{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Information about NOMANA-IT products and services","text":""},{"location":"#knowledge-base","title":"Knowledge base","text":"<p>Information about our products and services with targeted solutions, getting started guides, and content for advanced use cases.</p> <p>LIBERTY API BLOG</p>"},{"location":"#open-source-projects","title":"Open source projects","text":"<p>All public repositories developed by NOMANA-IT</p> <p>Github Repository</p>"},{"location":"#liberty-framework","title":"Liberty Framework","text":"<p>Welcome to Liberty Framework, a no-code development platform designed for rapid and efficient web application creation using the latest in React, Node.js, and PostgreSQL technologies. Whether you're a developer or a non-technical user, Liberty Framework empowers you to build robust applications with zero coding skills required.</p> <p>Online Demo</p> <pre><code>Login = demo\nPassword = demo\nAppplication = LIBERTY, NOMASX-1 and NOMAJDE\n</code></pre>"},{"location":"#company-website","title":"Company Website","text":"<p>Company specialized in consulting, integration and development.</p> <p>NOMANA-IT</p>"},{"location":"api/getting-started/","title":"Open source API for JD Edwards and BI Publisher","text":""},{"location":"api/getting-started/#jd-edwards","title":"JD Edwards","text":"<p>Oracle\u2019s JD Edwards EnterpriseOne is an integrated applications suite of comprehensive enterprise resource planning software that combines business value, standards-based technology, and deep industry experience into a business solution with a low total cost of ownership.</p> <p>Export XML source or PDF Output from JD Edwards BLOB fields</p> <p>Export source code for BSFN from JD Edwards BLOB field (F98780R)</p>"},{"location":"api/getting-started/#bi-publisher","title":"BI Publisher","text":"<p>Oracle BI Publisher is the reporting solution to author, manage, and deliver all your reports and documents easier and faster than traditional reporting tools.</p> <p>Simple JAVA CLASS to encode string and display barcode 128 with BI Publisher RTF template</p> <p>JAVA package with Oracle BI Publisher API</p>"},{"location":"api/bip-api/nomabc/","title":"NOMABC - Barcode 128 for BI Publisher","text":"<p>Download Built with VSCode and JDK 11</p>"},{"location":"api/bip-api/nomabc/#1-modify-xdocfg","title":"1. Modify xdo.cfg","text":"<p>Add the line below to declare the truetype font. The font is delivered into the dist directory. (Thanks to GrandZebu for explanation and font : http://grandzebu.net/informatique/codbar/code128.htm)</p> <pre><code>&lt;font family=\"Code 128z\" style=\"normal\" weight=\"normal\"&gt;&lt;truetype path=\"d:/BIP/java/fonts/code128z.TTF\"/&gt;&lt;/font&gt;\n</code></pre>"},{"location":"api/bip-api/nomabc/#2-declaration-of-a-custom-function-into-a-rtf-template","title":"2. Declaration of a custom function into a RTF Template","text":"<p>Add a field into the template and set the property like this</p> <pre><code>&lt;?register-barcode-vendor:'nomabc.BarcodeUtil';'NOMANA\u2019?&gt;\n</code></pre> <p></p>"},{"location":"api/bip-api/nomabc/#3-convert-into-barcode-128","title":"3. Convert into BarCode 128","text":"<p>Add the field with the value to convert and modify the property with the following script</p> <pre><code>&lt;?format-barcode:DataBarreCode;'code128';'NOMANA\u2019?&gt;\n</code></pre> <p></p>"},{"location":"api/bip-api/nomabc/#4-display-barcode","title":"4. Display BarCode","text":"<p>Modify the font for the field in RTF with and select \"Code 128z\". If the truetype is not declared into Windows fonts, you will not see the font but you can simply modify it by typing the font name as screenshot below</p> <p></p>"},{"location":"api/bip-api/nomabip/","title":"NOMABIP - Java package with Oracle BI Publisher API","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/bip-api/nomabip/#1-functionalities","title":"1. Functionalities","text":"<p>This API was initially developed to integrate easily JD Edwards and BI Publisher, regardless of JD Edwards Tools Release.</p> <p>Nothing to install, only to use. Sample scripts are provided in the <code>test</code> directory. It can now be used for any spool with or without JD Edwards (BI Publisher license is needed).</p>"},{"location":"api/bip-api/nomabip/#features","title":"Features:","text":"<ul> <li>Generate PDF and XML files simultaneously from a XML spool.</li> <li>Burst or single mode for flexible processing.</li> <li>Configure the number of CPUs for parallel processing and performance improvements.</li> <li>Add Ghostscript for enhanced PDF compatibility.</li> <li>Document indexation and error tracking in an Oracle Database (optional).</li> <li>Integrate the Java class NOMABC to print Barcode 128 (see GitHub repository).</li> </ul>"},{"location":"api/bip-api/nomabip/#2-global-settings","title":"2. Global Settings","text":"Parameter Description cmdGS Call ghostscript to transform PDF after generation (ie, version 1.6 to 1.5) runGS Call GS script Y/N xdo Settings for fonts, subtemplate directory... appHome Running script directory burstOutput Output directory for bursting documents singleOutput Output directory for single mode processHome Process directory dirOutput Temp Output directory copyXSL XSL transformation to generate copies routageXSL Used for JD Edwards to copy back into the Printqueue updateDB Update Oracle database (Y/N) with index and logs"},{"location":"api/bip-api/nomabip/#3-template-settings","title":"3. Template Settings","text":"<p>Set template location, ID of fields used to name the output document in case of bursting and mandatory fields when update database is on.</p>"},{"location":"api/bip-api/nomabip/#4-usage","title":"4. Usage","text":"<ul> <li>Simple java application to configure and generate documents <pre><code>java -jar ../dist/nomabip.jar -config ./config/config.properties\n</code></pre></li> <li>Encrypt password for config file <pre><code>java -jar ../dist/nomabip.jar -password &lt;PASSWORD&gt;\n</code></pre></li> <li>Generate documents <pre><code>java -jar ../dist/nomabip.jar -run ./config/config.properties &lt;TEMPLATE&gt; &lt;DOCUMENT_NAME&gt; &lt;MODE&gt; &lt;DOCUMENT_ID&gt; \n</code></pre></li> </ul>"},{"location":"api/bip-api/nomabip/#5-screenshot","title":"5. Screenshot","text":""},{"location":"api/jde-api/jdebip/","title":"JDEBIP - Export XML source or PDF Output from JD Edwards BLOB fields","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/jde-api/jdebip/#1-functionalities","title":"1. Functionalities","text":"<ul> <li>Export XML source or PDF Output from JD Edwards BLOB fields</li> </ul>"},{"location":"api/jde-api/jdebip/#2-settings","title":"2. Settings","text":"<p>This class can be used to export blob column for BI Publisher from JD Edwards Database. This class can be extended to export BLOB for all tables.</p> Parameter Description URL JDBC String for database connection USER User to login into the database PASSWORD Password to login into the database OutputDirectory Output directory for files exported from blob field XML SQL Query to get XML source PDF SQL Query to get PDF output REMOVE_RD If you need to retrieve batch from PrintQueue, record should be deleted DELETE_F9563110 SQL query to delete record into F9563110 DELETE_F95630 SQL query to delete record into F95630"},{"location":"api/jde-api/jdebip/#3-usage","title":"3. Usage","text":"<ul> <li>Extract XML Source <pre><code>java -cp ../dist/nomajde.jar jdebip XML &lt;OBJECT_NAME&gt; &lt;VERSION&gt; &lt;LANGUAGE&gt; &lt;JOB_NUMBER&gt;\n</code></pre></li> <li>Extract PDF output\\ <pre><code>java -cp ../dist/nomajde.jar jdebip PDF &lt;OBJECT_NAME&gt; &lt;VERSION&gt; &lt;LANGUAGE&gt; &lt;JOB_NUMBER&gt;\n</code></pre></li> </ul>"},{"location":"api/jde-api/jdebsfn/","title":"JDEBSN - Export source code for BSFN from JD Edwards BLOB field (F98780R)","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/jde-api/jdebsfn/#1-functionalities","title":"1. Functionalities","text":"<ul> <li>Export source code for BSFN from JD Edwards BLOB field (F98780R)</li> </ul>"},{"location":"api/jde-api/jdebsfn/#2-settings","title":"2. Settings","text":"<p>This class can be used to export blob column for BSFN from JD Edwards Database. This class can be extended to export BLOB for all tables.</p> Parameter Description URL JDBC String for database connection USER User to login into the database PASSWORD Password to login into the database OutputDirectory Output directory for files exported from blob field F98780R SQL Query to get source code for BSFN"},{"location":"api/jde-api/jdebsfn/#3-usage","title":"3. Usage","text":"<ul> <li>Extract source code\\ <pre><code>java -cp ../dist/nomajde.jar jdebsfn F98780R &lt;BSFN_OR_TABLE&gt;\n</code></pre></li> </ul>"},{"location":"blog/","title":"Articles","text":""},{"location":"blog/2024/11/21/locks-management/","title":"Locks Management","text":""},{"location":"blog/2024/11/21/locks-management/#1-gather-locks-for-current-session","title":"1. Gather locks for current session","text":"<pre><code>SELECT\n  (select username || ' - ' || osuser from v$session where sid=a.sid) blocker,\n  a.sid || ', ' || (select serial# from v$session where sid=a.sid) sid_serial,\n ' is blocking ',\n  (select username || ' - ' || osuser from v$session where sid=b.sid) blockee,\n  b.sid || ', ' || (select serial# from v$session where sid=b.sid) sid_serial\nFROM \n  v$lock a, v$lock b\nWHERE \n  a.block = 1\n  AND b.request &gt; 0\n  AND a.id1 = b.id1\n  AND a.id2 = b.id2;\n</code></pre>"},{"location":"blog/2024/11/21/database-size/","title":"Database size","text":""},{"location":"blog/2024/11/21/database-size/#1-full-size-of-the-database","title":"1. Full size of the database","text":"<pre><code>SELECT  SUM(bytes/1024/1024/1024) FROM dba_segments \n</code></pre>"},{"location":"blog/2024/11/21/database-size/#2-size-by-tablespace","title":"2. Size by tablespace","text":"<pre><code>SELECT  OWNER, SUM(bytes/1024/1024/1024) FROM dba_segments \nGROUP BY owner\norder BY owner;\n</code></pre>"},{"location":"blog/2024/11/21/database-size/#3-fragmented-space-for-a-schema","title":"3. Fragmented space for a schema","text":"<pre><code>SELECT \n  table_name,avg_row_len,round(((blocks*16/1024)),2)||'MB' \"TOTAL_SIZE\",\n  round((num_rows*avg_row_len/1024/1024),2)||'Mb' \"ACTUAL_SIZE\",\n  round(((blocks*16/1024)-(num_rows*avg_row_len/1024/1024)),2) ||'MB' \"FRAGMENTED_SPACE\",\n  round((round(((blocks*16/1024)-(num_rows*avg_row_len/1024/1024)),2)/round(((blocks*16/1024)),2))*100,2) \"percentage\"\nFROM \n  all_tables \nWHERE \n  owner='&lt;OWNER&gt;' \n  AND blocks&gt;0;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/","title":"Transport SQL profile from one base to another","text":""},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#1-list-all-profiles-to-retrieve-the-profile-name","title":"1. List all profiles to retrieve the profile name","text":"<pre><code>SELECT * FROM DBA_SQL_PROFILES;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#2-create-table-with-dbms-to-export-profile","title":"2. Create table with DBMS to export profile","text":"<pre><code>BEGIN\n  DBMS_SQLTUNE.CREATE_STGTAB_SQLPROF (\n    table_name  =&gt; 'TMP_SQL_PROFILES'\n,   schema_name =&gt; 'SYSTEM'\n);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#3-export-profile-to-the-temporary-table","title":"3. Export profile to the temporary table","text":"<p><pre><code>BEGIN\n  DBMS_SQLTUNE.PACK_STGTAB_SQLPROF (\n    profile_name         =&gt; 'SYS_SQLPROF_02701ab7b57c0000'\n,   staging_table_name   =&gt; 'TMP_SQL_PROFILES'\n,   staging_schema_owner =&gt; 'SYSTEM'\n);\nEND;\n</code></pre> Export/Import this table between both databases</p>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#4-import-profile-from-temporay-table-in-the-target-database","title":"4. Import profile from temporay table in the target database","text":"<pre><code>BEGIN\n  DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(\n     replace            =&gt; true\n,    staging_table_name =&gt; 'TMP_SQL_PROFILES'\n);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/statistics-management/","title":"Statistics Management","text":""},{"location":"blog/2024/11/21/statistics-management/#1-gather-statistics-for-a-table","title":"1. Gather statistics for a table","text":"<pre><code>BEGIN\n DBMS_STATS.GATHER_TABLE_STATS (ownname =&gt; '&lt;OWNER&gt;' , tabname =&gt; '&lt;TABLE_NAME&gt;',\n  cascade =&gt; true, estimate_percent =&gt; 15,method_opt=&gt;'for all indexed columns size 1', granularity =&gt; 'ALL', degree =&gt; 1);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/statistics-management/#2-gather-statistics-for-a-schema","title":"2. Gather statistics for a schema","text":"<pre><code>exec dbms_stats.gather_schema_stats( -\n    ownname          =&gt; '&lt;SCHEMA_NAME&gt;', -\n    options          =&gt; 'GATHER AUTO', -\n    estimate_percent =&gt; dbms_stats.auto_sample_size, -\n    method_opt       =&gt; 'for all columns size repeat', -\n    degree           =&gt; 15 -\n)\n</code></pre>"},{"location":"liberty/getting-started/","title":"Getting Started with Liberty Framework","text":""},{"location":"liberty/getting-started/#liberty-framework","title":"Liberty Framework","text":"<p>Welcome to Liberty Framework, a no-code development platform designed for rapid and efficient web application creation using the latest in React, Node.js, and PostgreSQL technologies. Whether you're a developer or a non-technical user, Liberty Framework empowers you to build robust applications with zero coding skills required.</p> <p>Go to Demo</p> <pre><code>Login = demo\nPassword = demo\nAppplication = LIBERTY, NOMASX-1 and NOMAJDE\n</code></pre>"},{"location":"liberty/release-notes/","title":"Release Notes","text":""},{"location":"liberty/nomasx1/admin/global-settings/","title":"Global Settings","text":""},{"location":"liberty/nomasx1/admin/global-settings/#global-settings","title":"Global Settings","text":""},{"location":"liberty/nomasx1/admin/global-settings/#1-applications","title":"1. Applications","text":"<ul> <li>Native connector for JD Edwards (Oracle, DB2 or MS-SQL)</li> <li>Native connector for Oracle Database</li> <li>Native connector for Microsoft Active Directory</li> <li>All databases accessibles with jdbc can be set</li> </ul> <p>Click on add or edit to set a new datasource or modify an existing datasource and follow the wizard</p>"},{"location":"liberty/nomasx1/admin/global-settings/#11-global-settings","title":"1.1. Global Settings","text":"Parameter Description Comments Application ID Unique ID Automatic increment number used in all table joins Application Name Name of your application Application Type Native or custom connector JD Edwards, Database, LDAP, Weblogic, Custom Application Database Type of database Oracle, MySQL, IBM DB2, Microsoft SQL Server, LDAP"},{"location":"liberty/nomasx1/admin/global-settings/#12-connections","title":"1.2. Connections","text":"<p>Some parameters could be hidden depending on the type of the application</p> Parameter Description Comments Host Database server Port Database port Database Service Name Service Name and not SID for Oracle later than 12.2 User Login to database login could have read-only rights but with access to dictionary or catalog Password Password for the user"},{"location":"liberty/nomasx1/admin/global-settings/#13-options","title":"1.3. Options","text":"<p>Parameters differs depending on the type of the application</p>"},{"location":"liberty/nomasx1/admin/global-settings/#131-jd-edwards","title":"1.3.1. JD Edwards","text":"Parameter Description Comments JDE DTA Business Data PRODDTA JDE CTL Control Tables PRODCTL JDE CO Central Objects PD920 JDE SY System Tables SY920 JDE SVM Server Map SVM920 JDE OL Object Librarian OL920 F00950 Security table location (sometimes not in SYSTEM) SY920 Standard Menu (Y/N) Collect Tasks Menus E1 Pages (Y/N) Collect E1 Pages Before Tools Release 9.2 and E1 composite E1 Composite (Y/N) Collect E1 Composite Pages After Tools Release 9.2"},{"location":"liberty/nomasx1/admin/global-settings/#132-database-custom-application","title":"1.3.2. Database / Custom Application","text":"<p>NONE</p>"},{"location":"liberty/nomasx1/admin/global-settings/#133-ldap","title":"1.3.3. LDAP","text":"Parameter Description Comments LDAP Context Search OU=Utilisateurs,DC=nomana-it,DC=fr LDAP Filter Filtering type of object (&amp;(objectClass=user)) LDAP Exclude Exclude node OU=Applications,OU=Utilisateurs,DC=nomana-it,DC=fr"},{"location":"liberty/nomasx1/admin/global-settings/#2-users","title":"2. Users","text":""},{"location":"liberty/nomasx1/admin/global-settings/#3-query","title":"3. Query","text":""},{"location":"liberty/nomasx1/admin/global-settings/#4-dwh","title":"4. DWH","text":""},{"location":"liberty/technical/architecture/","title":"Architecture","text":"<p>This document provides an overview of the functionality and configuration of the services within the Liberty Framework, including Node.js, PostgreSQL, pgAdmin, Airflow, OIDC, and Gitea. These services are integrated with Traefik as a reverse proxy, enabling both HTTP and HTTPS access with automated routing. </p>"},{"location":"liberty/technical/architecture/#1-nodejs-service-liberty-node","title":"1. Node.js Service (<code>liberty-node</code>) \ud83d\udfe2","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-node:latest</code></li> <li>Command: Runs the Node.js app (<code>app.js</code>) on port <code>3002</code>.</li> <li>Security Options: </li> <li>\ud83d\udd12 <code>label:disable</code>: Disables SELinux labels.</li> <li>\u2699\ufe0f <code>cap_drop</code>: Removes unnecessary Linux capabilities like <code>MKNOD</code> and <code>AUDIT_WRITE</code>.</li> <li>Networks: Connected to the <code>liberty-network</code>.</li> <li>Working Directory: <code>/opt/liberty</code></li> <li>Depends on: PostgreSQL (<code>pg</code>) service.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 API Routing: HTTP and HTTPS routing for <code>/api</code> using <code>PathPrefix</code>.</li> <li>\ud83d\udce1 Socket Routing: HTTP and HTTPS routing for <code>/socket</code> and <code>/socket.io</code>.</li> <li>\u269b\ufe0f React Application: Handles HTTP and HTTPS routing for the React app with a middleware for error pages.</li> <li>\ud83d\ude80 Compression: <code>compress-middleware</code> applied to several routes for better performance.</li> <li>\ud83d\udd0c Port Configuration: Node.js runs on port <code>3002</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#2-postgresql-service-liberty-pg","title":"2. PostgreSQL Service (<code>liberty-pg</code>) \ud83d\udc18","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-pg:latest</code></li> <li>Command: Runs the PostgreSQL server with optimized settings for performance:</li> <li><code>shared_buffers=2GB</code></li> <li><code>track_activity_query_size=1MB</code></li> <li><code>work_mem=256MB</code></li> <li><code>maintenance_work_mem=128MB</code></li> <li>Other configurations to optimize WAL size, checkpoint timing, and costs.</li> <li>Volumes: Data stored in the <code>pg-data</code> volume.</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83d\udee0\ufe0f TCP Router: Routes PostgreSQL traffic via <code>db</code> entry point.</li> <li>\ud83d\udd0c Port: Exposed on port <code>5432</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#3-pgadmin-service-liberty-pgadmin","title":"3. pgAdmin Service (<code>liberty-pgadmin</code>) \ud83d\udda5\ufe0f","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-pgadmin:latest</code></li> <li>User: Root privileges enabled.</li> <li>Volumes: pgAdmin data stored in the <code>pgadmin-data</code> volume.</li> <li>Environment: Sets the <code>SCRIPT_NAME=/pgadmin</code> for pgAdmin web access.</li> <li>Depends on: PostgreSQL (<code>pg</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 HTTP Router: Routes requests for <code>/pgadmin</code>.</li> <li>\ud83d\udd0c Port: Exposed on port <code>3003</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#4-airflow-service-liberty-airflow","title":"4. Airflow Service (<code>liberty-airflow</code>) \ud83d\udee0\ufe0f","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-airflow:latest</code></li> <li>Security Options:</li> <li>\ud83d\udd12 Disables SELinux labels.</li> <li>\u2699\ufe0f Drops capabilities <code>MKNOD</code> and <code>AUDIT_WRITE</code>.</li> <li>Volumes: </li> <li>Logs stored in the <code>airflow-logs</code> volume.</li> <li>Depends on: PostgreSQL (<code>pg</code>), Gitea (<code>gitea</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 Routing: Handles HTTP and HTTPS requests for <code>/airflow/home</code>.</li> <li>\u26a0\ufe0f Error Pages Middleware: Applied to both HTTP and HTTPS routes.</li> <li>\ud83d\udd0c Port: Exposed on port <code>8080</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#5-oidc-service-liberty-keycloak","title":"5. OIDC Service (<code>liberty-keycloak</code>) \ud83d\udd10","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-keycloak:latest</code></li> <li>Command: Starts the Keycloak OIDC server with proxy headers and hostname settings.</li> <li>Environment Variables:</li> <li>\ud83d\udd04 <code>PROXY_ADDRESS_FORWARDING</code>: Enables proxy address forwarding.</li> <li>\ud83c\udf0d <code>KC_HOSTNAME_PATH</code> and <code>KC_HTTP_RELATIVE_PATH</code>: Configured to <code>/oidc</code>.</li> <li>Depends on: PostgreSQL (<code>pg</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 HTTP and HTTPS Routing: Routes <code>/oidc</code> requests.</li> <li>\ud83d\udd0c Port: OIDC runs on port <code>9000</code> (Keycloak internally uses port <code>8080</code>).</li> <li>\ud83c\udf0d CORS Middleware: Configures Cross-Origin Resource Sharing (CORS) for all origins and credentials.</li> </ul>"},{"location":"liberty/technical/architecture/#6-gitea-service-liberty-gitea","title":"6. Gitea Service (<code>liberty-gitea</code>) \ud83d\udcc2","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-gitea:latest</code></li> <li>Healthcheck: Ensures service health by checking <code>/</code> endpoint every 30 seconds.</li> <li>Volumes: </li> <li>Configuration and data in <code>liberty-gitea</code>.</li> <li>Restart Policy: Set to <code>unless-stopped</code>.</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 Routing: Routes HTTP requests to <code>/gitea</code>.</li> <li>\ud83d\udee0\ufe0f Middleware: Uses <code>stripprefix</code> to remove <code>/gitea</code> from the path for internal routing.</li> <li>\ud83d\udd0c Port: Exposed on port <code>3000</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#volumes","title":"Volumes \ud83d\uddc3\ufe0f","text":"<ul> <li>node-logs: Stores Logs for backend and frontend.</li> <li>pg-data: Stores PostgreSQL data.</li> <li>pg-logs: Stores Logs for database.</li> <li>pgadmin-data: Stores pgAdmin data.</li> <li>liberty-gitea: Stores gitea config and data.</li> <li>airflow-logs: Stores logs for Airflow.</li> <li>airflow-dags: Stores Dags for Airflow.</li> <li>airflow-plugins: Stores Plugins for Airflow.</li> <li>traefik-certs: Stores Traefik certificates (external).</li> <li>traefik-config: Stores Traefik configuration (external).</li> <li>shared-data: Stores shared data (external).</li> </ul>"},{"location":"liberty/technical/architecture/#networks","title":"Networks \ud83c\udf10","text":"<ul> <li>liberty-network: External network for inter-service communication.</li> </ul> <p>This configuration enables a scalable, containerized microservice architecture with Node.js for application logic, PostgreSQL for database management, pgAdmin for database administration, Airflow for automation, Keycloak OIDC for authentication, and Gitea for file management and versioning. Traefik serves as the reverse proxy, handling routing and applying security middleware for all services.</p>"},{"location":"liberty/technical/installation/","title":"Docker Installation Guide","text":"<p>This guide covers the installation of Docker and Docker Compose on CentOS and Amazon Linux. Follow the respective instructions based on your environment.</p>"},{"location":"liberty/technical/installation/#docker-installation-for-centos","title":"Docker Installation for CentOS","text":""},{"location":"liberty/technical/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>CentOS 8 or higher</li> <li>Root or sudo access</li> <li>Minimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.</li> </ul>"},{"location":"liberty/technical/installation/#step-1-update-system-packages","title":"Step 1: Update System Packages","text":"<p>Before starting the installation, update your system to ensure all packages are up-to-date.</p> <pre><code>sudo yum update -y\n</code></pre> <p>if Podman is installed, remove all packages, artifacts and containers storage</p> <pre><code>yum remove buildah skopeo podman containers-common atomic-registries docker container-tools\nrm -rf /etc/containers/* /var/lib/containers/* /etc/docker /etc/subuid* /etc/subgid*\ncd ~ &amp;&amp; rm -rf /.local/share/containers/\n</code></pre>"},{"location":"liberty/technical/installation/#step-2-install-required-dependencies","title":"Step 2: Install Required Dependencies","text":"<p>Install the necessary packages required to set up the Docker repository.</p> <pre><code>sudo yum install -y yum-utils \n</code></pre>"},{"location":"liberty/technical/installation/#step-3-set-up-the-docker-repository","title":"Step 3: Set Up the Docker Repository","text":"<p>Add the Docker repository to your CentOS system.</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>"},{"location":"liberty/technical/installation/#step-4-install-docker","title":"Step 4: Install Docker","text":"<p>Install Docker Engine, CLI, and Containerd.</p> <pre><code>sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"liberty/technical/installation/#step-5-start-and-enable-docker","title":"Step 5: Start and Enable Docker","text":"<p>Start the Docker service and enable it to start on boot.</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"liberty/technical/installation/#step-6-verify-docker-installation","title":"Step 6: Verify Docker Installation","text":"<p>Verify the installation by running a test Docker container.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>If the container runs and displays a welcome message, Docker is installed correctly.</p>"},{"location":"liberty/technical/installation/#step-7-adding-your-user-to-the-docker-group-optional","title":"Step 7: Adding Your User to the Docker Group (Optional)","text":"<p>To run Docker commands without <code>sudo</code>, add your user to the Docker group.</p> <pre><code>sudo usermod -aG docker $(whoami)\n</code></pre> <p>Log out and log back in to apply the group changes.</p>"},{"location":"liberty/technical/installation/#uninstall-docker","title":"Uninstall Docker","text":"<p>To remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:</p> <pre><code>sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre>"},{"location":"liberty/technical/installation/#docker-installation-for-amazon-linux-os","title":"Docker Installation for Amazon Linux OS","text":""},{"location":"liberty/technical/installation/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Amazon Linux or Amazon Linux 2</li> <li>Root or sudo access</li> <li>Minimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.</li> </ul>"},{"location":"liberty/technical/installation/#step-1-update-system-packages_1","title":"Step 1: Update System Packages","text":"<p>Before starting the installation, update your system to ensure all packages are up-to-date.</p> <pre><code>sudo yum update -y\n</code></pre>"},{"location":"liberty/technical/installation/#step-2-install-docker","title":"Step 2: Install Docker","text":"<p>Install Docker using the Amazon Linux Extras &amp; yum package manager.</p> <pre><code>sudo amazon-linux-extras install docker -y\n</code></pre>"},{"location":"liberty/technical/installation/#step-3-start-and-enable-docker","title":"Step 3: Start and Enable Docker","text":"<p>Start the Docker service and enable it to start on boot.</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"liberty/technical/installation/#step-4-verify-docker-installation","title":"Step 4: Verify Docker Installation","text":"<p>Verify the installation by running a test Docker container.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>If the container runs and displays a welcome message, Docker is installed correctly.</p>"},{"location":"liberty/technical/installation/#step-5-install-docker-compose","title":"Step 5: Install Docker Compose","text":"<p>Download the current stable release of Docker Compose:</p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '\"tag_name\": \"\\K.*?(?=\")')/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n</code></pre> <p>Apply executable permissions to the binary:</p> <pre><code>sudo chmod +x /usr/local/bin/docker-compose\n</code></pre> <p>Verify that the installation was successful:</p> <pre><code>docker-compose --version\n</code></pre>"},{"location":"liberty/technical/installation/#step-6-adding-your-user-to-the-docker-group-optional","title":"Step 6: Adding Your User to the Docker Group (Optional)","text":"<p>To run Docker commands without <code>sudo</code>, add your user to the Docker group.</p> <pre><code>sudo usermod -aG docker $(whoami)\n</code></pre> <p>Log out and log back in to apply the group changes.</p>"},{"location":"liberty/technical/installation/#uninstall-docker_1","title":"Uninstall Docker","text":"<p>To remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:</p> <pre><code>sudo yum remove docker\nsudo rm -rf /var/lib/docker\nsudo rm /usr/local/bin/docker-compose\n</code></pre>"},{"location":"liberty/technical/installation/#post-installation-tasks","title":"Post installation Tasks","text":"<p>If you want to set a custom directory for docker and if you are running behind a proxy, the docker service must be modified</p> <p>Edit the service: /lib/systemd/system/docker.service</p> <pre><code>[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd --data-root &lt;CUSTOM_DIRECTORY&gt; -H fd:// --containerd=/run/containerd/containerd.sock\nExecReload=/bin/kill -s HUP $MAINPID\nTimeoutStartSec=0\nRestartSec=2\nRestart=always\nEnvironment=\"HTTP_PROXY=&lt;PROXY_URL&gt;\"\nEnvironment=\"HTTPS_PROXY=&lt;PROXY_URL&gt;\"\n</code></pre> <p>If you want to change the default IP range (172.17.x.x) for docker Edit the file: /etc/docker/daemon.json</p> <pre><code># Set the ip range according to your requirements\n# bip is for the internal interface\n# default-address-pools is for all new networks\n{\n  \"bip\": \"172.26.0.1/16\",\n  \"default-address-pools\": [\n    { \"base\": \"172.27.0.0/16\", \"size\": 24 }\n  ]\n}\n</code></pre>"},{"location":"liberty/technical/installation/#conclusion","title":"Conclusion","text":"<p>You have successfully installed Docker and Docker Compose on your CentOS or Amazon Linux OS system. You can now begin deploying and managing your Docker containers for Liberty Framework.</p>"},{"location":"liberty/technical/installation/#references","title":"References","text":"<ul> <li>Docker Documentation</li> <li>AWS Documentation</li> </ul>"},{"location":"liberty/technical/liberty-deployment/","title":"Deploying Liberty Framework with Portainer","text":"<p>This guide will walk you through deploying Liberty Framework using Portainer, based on the Compose file located at the following URL: liberty-framework.yml.</p>"},{"location":"liberty/technical/liberty-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure the following prerequisites are met:</p> <ul> <li>You have Docker installed and running on your server. Installation instructions can be found here.</li> <li>You have Portainer installed and running on your server. Installation instructions can be found here.</li> <li>You have access to the Portainer web interface. The URL typically looks like <code>http://your-server-ip:3000</code> or <code>https://your-server-ip:3443</code>.</li> </ul>"},{"location":"liberty/technical/liberty-deployment/#accessing-portainer","title":"Accessing Portainer","text":"<ol> <li> <p>Open a web browser and navigate to the Portainer web interface.</p> </li> <li> <p>Log in with your Portainer credentials.</p> </li> <li> <p>Set a password first time you log into Portainer</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#logging-into-a-custom-registry","title":"Logging into a Custom Registry","text":"<ol> <li> <p>In the Portainer web interface, navigate to <code>Registries</code> from the sidebar.</p> </li> <li> <p>Click on the <code>+ Add registry</code> button.</p> </li> <li> <p>Provide the following details for your custom registry:</p> <ul> <li>Name: A friendly name for your registry.</li> <li>URL: The URL of your custom registry (e.g., <code>ghcr.io/fblettner</code>).</li> <li>Username: Your registry username (this user will be provided by Nomana-IT).</li> <li>Password: Your registry password (this token will be provided by Nomana-IT).</li> </ul> </li> <li> <p>After filling in the details, click on the <code>Add Registry</code> button to save the registry.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#deploy-the-stack","title":"Deploy the Stack","text":"<ol> <li> <p>In the Portainer web interface, navigate to <code>Stacks</code> from the sidebar.</p> </li> <li> <p>Click on the <code>+ Add Stack</code> button.</p> </li> <li> <p>Provide a name for your stack in the <code>Name</code> field.</p> </li> <li> <p>Under the <code>Git repository</code> tab:</p> <ul> <li> <p>Enter the Repository URL:    <pre><code>https://github.com/fblettner/liberty-public\n</code></pre></p> </li> <li> <p>In the Compose path field, specify:   <pre><code>release/latest/liberty-framework.yml\n</code></pre></p> </li> </ul> </li> <li> <p>Scroll down and click on the <code>Deploy the stack</code> button.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#verify-deployment","title":"Verify Deployment","text":"<ol> <li> <p>Once the stack is deployed, navigate to <code>Containers</code> from the sidebar.</p> </li> <li> <p>Verify that the containers listed in the Compose file are running.</p> </li> <li> <p>Access the services through the designated ports to ensure everything is functioning as expected.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#alternative-pull-docker-images-from-terminal","title":"Alternative: Pull Docker Images from Terminal","text":"<p>If you prefer to pull Docker images directly from the terminal, you can do so using the following commands:</p> <ol> <li> <p>Open a terminal and log in to the custom registry:</p> <pre><code>docker login ghcr.io\n</code></pre> <p>When prompted, enter your username and password (token).</p> </li> <li> <p>Pull the required Docker images manually:</p> <pre><code>docker pull ghcr.io/fblettner/liberty-node:latest\ndocker pull ghcr.io/fblettner/liberty-pg:latest\ndocker pull ghcr.io/fblettner/liberty-pgadmin:latest\ndocker pull ghcr.io/fblettner/liberty-rundeck:latest\ndocker pull ghcr.io/fblettner/liberty-keycloak:latest\ndocker pull ghcr.io/fblettner/liberty-filebrowser:latest\n</code></pre> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#steps-for-aws-users","title":"Steps for AWS Users","text":"<p>If you are using AWS and need to connect via AWS CLI, follow these steps:</p> <ol> <li> <p>Configure your AWS CLI:</p> <pre><code>aws configure\n</code></pre> <p>Follow the prompts to enter your AWS Access Key, Secret Access Key, default region name, and output format.</p> </li> <li> <p>Log in to the AWS Elastic Container Registry (ECR):</p> <pre><code>aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin &lt;your-aws-account-id&gt;.dkr.ecr.eu-west-1.amazonaws.com\n</code></pre> <p>Replace <code>&lt;your-aws-account-id&gt;</code> with your actual AWS account ID.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#additional-resources","title":"Additional Resources","text":"<ul> <li>Portainer Documentation</li> <li>Docker Compose Documentation</li> <li>GitHub Repository - liberty-framework.yml</li> </ul> <p>By following this guide, you should be able to deploy Liberty Framework using Portainer seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.</p>"},{"location":"liberty/technical/liberty-deployment/#summary","title":"Summary","text":"<p>URLs: - Web Application: <code>/</code> - API: <code>/api</code> - PgAdmin: <code>/pgadmin</code> - Rundeck: <code>/rundeck</code> - OIDC: <code>/oidc</code> - Filebrowser: <code>/filebrowser</code></p> <p>Services: - node: ghcr.io/fblettner/liberty-node:latest (Port 3002) - pg: ghcr.io/fblettner/liberty-pg:latest (Port 5432) - pgadmin: ghcr.io/fblettner/liberty-pgadmin:latest (Port 3003) - rundeck: ghcr.io/fblettner/liberty-rundeck:latest (Port 4440) - oidc: ghcr.io/fblettner/liberty-keycloak:latest (Port 8080) - filebrowser: ghcr.io/fblettner/liberty-filebrowser:latest (Port 80)</p> <p>Details of all Liberty Framework Services can be found here.</p>"},{"location":"liberty/technical/linux-services/","title":"Creating Systemd Services for Docker Compose","text":"<p>This guide will walk you through creating systemd services to manage your Docker Compose deployments. This ensures that your services start automatically on boot and can be managed easily using standard systemd commands.</p>"},{"location":"liberty/technical/linux-services/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure the following prerequisites are met:</p> <ul> <li>You have Docker and Docker Compose installed on your server.</li> <li>You have completed the deployment steps for Liberty Framework using Docker Compose.</li> </ul>"},{"location":"liberty/technical/linux-services/#creating-the-systemd-service-for-admin-tools","title":"Creating the Systemd Service for Admin Tools","text":"<ol> <li> <p>Create a service file for <code>docker-admin</code>:</p> <pre><code>sudo nano /etc/systemd/system/docker-admin.service\n</code></pre> </li> <li> <p>Paste the following content into the file:</p> <pre><code>[Unit]\nDescription=Liberty Admin Tools Service\nPartOf=docker.service\nAfter=docker.service\n\n[Service]\nType=simple\nRemainAfterExit=true\nWorkingDirectory=/app/liberty-admin/\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml start\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml stop\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"liberty/technical/linux-services/#creating-the-systemd-service-for-liberty-framework","title":"Creating the Systemd Service for Liberty Framework","text":"<ol> <li>Open a terminal.</li> <li> <p>Create a new directory:     <pre><code>mkdir -p /app/liberty-framework\ncd /app/liberty-framework\n</code></pre></p> </li> <li> <p>Download the Docker Compose file from the provided URL, Using <code>curl</code>:     <pre><code>curl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-framework.yml\n</code></pre></p> </li> <li> <p>Create a service file for <code>docker-liberty</code>:</p> <pre><code>sudo nano /etc/systemd/system/docker-liberty.service\n</code></pre> </li> <li> <p>Paste the following content into the file:</p> <pre><code>[Unit]\nDescription=Liberty Framework Service\nPartOf=docker.service\nAfter=docker.service\n\n[Service]\nType=simple\nRemainAfterExit=true\nWorkingDirectory=/app/liberty/\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-framework/docker-compose.yml start\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-framework/liberty-compose.yaml stop\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"liberty/technical/linux-services/#enabling-and-starting-the-services","title":"Enabling and Starting the Services","text":"<ol> <li> <p>Enable the created services to start on boot:</p> <pre><code>sudo systemctl enable docker-liberty.service\nsudo systemctl enable docker-admin.service\n</code></pre> </li> <li> <p>Start the services immediately:</p> <pre><code>sudo systemctl start docker-liberty.service\nsudo systemctl start docker-admin.service\n</code></pre> </li> <li> <p>Check the status of the services to ensure they are running:</p> <pre><code>sudo systemctl status docker-liberty.service\nsudo systemctl status docker-admin.service\n</code></pre> </li> </ol>"},{"location":"liberty/technical/linux-services/#additional-resources","title":"Additional Resources","text":"<ul> <li>Systemd Documentation</li> <li>Docker Documentation</li> <li>Docker Compose Documentation</li> </ul> <p>By following this guide, you should be able to create and manage systemd services for your Docker Compose deployments seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.</p>"},{"location":"liberty/technical/post-ssl/","title":"Enable SSL with Traefik","text":"<p>By default, SSL is enabled with a self signed certificate. You have to copy your own certificates according to your domain</p>"},{"location":"liberty/technical/post-ssl/#prerequisites","title":"Prerequisites:","text":"<ul> <li><code>mkcert</code> installed to create a new self-signed certificate.</li> <li>Certificates for your domain</li> </ul>"},{"location":"liberty/technical/post-ssl/#step-1-copy-your-certificates-files","title":"Step 1: Copy your certificates files","text":"<ol> <li> <p>Copy your certificates files to the server hosting Liberty Framework</p> </li> <li> <p>Transfer you certificate to the Docker container <pre><code>docker cp &lt;your_certificate_directory&gt;/cert.pem traefik:/etc/certs/cert.pem\ndocker cp &lt;your_certificate_directory&gt;/key.pem traefik:/etc/certs/key.pem\n</code></pre></p> </li> </ol> <p>Final Administrator Note: Certificates must be transferred to the Docker container with each renewal</p>"},{"location":"liberty/technical/post-ssl/#step2-create-a-self-signed-certificate-optional","title":"Step2: Create a self-signed certificate (optional)","text":"<ol> <li> <p>Connect to the server hosting Liberty Framework</p> </li> <li> <p>Create a new self signed certificate <pre><code>mkcert -key-file ./certs/key.pem -cert-file ./certs/cert.pem '&lt;server_name&gt;'\n</code></pre></p> </li> <li> <p>Transfer you certificate to the Docker container <pre><code>docker cp ./certs/cert.pem traefik:/etc/certs/cert.pem\ndocker cp ./certs/key.pem traefik:/etc/certs/key.pem\n</code></pre></p> </li> </ol> <p>Final Administrator Note: After updating both files, it is required to restart the Traefik service to apply the new settings.</p>"},{"location":"liberty/technical/tools-deployment/","title":"Deploying Installation Tools with Docker Compose","text":""},{"location":"liberty/technical/tools-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, ensure you have the following installed on your system:</p> <ol> <li>Docker and Docker Compose: Installation instructions can be found here.</li> <li>Git: Installation instructions can be found here.</li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-1-logging-into-docker","title":"Step 1: Logging into Docker","text":"<p>To access a private Docker registry, you'll need to authenticate with your Docker credentials.</p> <ol> <li>Log in to Docker:     <pre><code>docker login\n</code></pre>     Follow the prompts to enter your Docker username and password.</li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-2-create-a-directory-for-deployment","title":"Step 2: Create a Directory for Deployment","text":"<p>Create a directory where you will download and store the Docker Compose file.</p> <ol> <li>Open a terminal.</li> <li>Create a new directory:     <pre><code>mkdir -p /app/liberty-admin\ncd /app/liberty-admin\n</code></pre></li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-3-download-the-docker-compose-file","title":"Step 3: Download the Docker Compose File","text":"<p>Next, download the Docker Compose file from the provided URL.</p> <ol> <li> <p>Using <code>curl</code>:     <pre><code>curl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n</code></pre></p> </li> <li> <p>Alternatively, using <code>wget</code>:     <pre><code>wget -O docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n</code></pre></p> </li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-4-deploy-the-docker-container-using-docker-compose","title":"Step 4: Deploy the Docker Container using Docker Compose","text":"<p>Once you have the <code>docker-compose.yml</code> file downloaded into your <code>liberty-admin</code> directory, use Docker Compose to deploy the container.</p> <ol> <li> <p>In the terminal, navigate to the <code>liberty-admin</code> directory (if not already there):     <pre><code>cd /app/liberty-admin\n</code></pre></p> </li> <li> <p>Deploy the Docker container:     <pre><code>docker-compose up -d\n</code></pre></p> </li> </ol> <p>This command will pull the necessary images from the registry (if they are not already available locally) and start the containers in detached mode.</p>"},{"location":"liberty/technical/tools-deployment/#step-5-verify-the-deployment","title":"Step 5: Verify the Deployment","text":"<p>To ensure the deployment is successful, you can check the status of the containers.</p> <ol> <li>List the running containers:     <pre><code>docker ps\n</code></pre></li> </ol> <p>You should see the following containers running as defined in the <code>docker-compose.yml</code> file:</p> <ul> <li>traefik: This service is managing routing and load balancing, and exposes several endpoints for web (port 3000), websecure (port 3443), dashboard (port 8080), and database (port 5432).</li> <li>portainer: This service provides a UI for managing Docker environments, accessible via paths prefixed with <code>/portainer</code>.</li> <li>error-pages: This service handles error pages and is available to respond to general HTTP requests.</li> </ul>"},{"location":"liberty/technical/tools-deployment/#summary-of-commands","title":"Summary of Commands","text":"<pre><code># Log in to Docker\ndocker login\n\n# Create and navigate to the admin directory\nmkdir -p /app/liberty-admin\ncd /app/liberty-admin\n\n# Download the Docker Compose file\ncurl -L -o docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n# or using wget\nwget -O docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n\n# Deploy the Docker container\ndocker-compose up -d\n</code></pre>"},{"location":"liberty/technical/tools-deployment/#accessing-services","title":"Accessing Services","text":"<p>After deployment, you can access the services with the following URLs:</p> <ul> <li>Traefik Dashboard: Accessible at http://<code>&lt;your_server_ip&gt;</code>:8080/dashboard/ (authentication may be required).</li> <li>Portainer: Accessible at http://<code>&lt;your_server_ip&gt;</code>:3000/portainer or https://<code>&lt;your_server_ip&gt;</code>:3443/portainer.</li> </ul> <p>Replace <code>&lt;your_server_ip&gt;</code> with the IP address or hostname of your server. Feel free to reach out if you have any further questions or run into any issues!</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/oracle/","title":"Oracle","text":""}]}