{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NOMANA-IT - Documentation, Blog and Resources","text":""},{"location":"#knowledge-base","title":"Knowledge base","text":"<p>Information about our products and services with targeted solutions, getting started guides, and content for advanced use cases.</p> <p>LIBERTY API BLOG</p>"},{"location":"#open-source-projects","title":"Open source projects","text":"<p>All public repositories developed by NOMANA-IT</p> <p>Github Repository</p>"},{"location":"#liberty-framework","title":"Liberty Framework","text":"<p>Welcome to Liberty Framework, a no-code development platform designed for rapid and efficient web application creation using the latest in React, Node.js, and PostgreSQL technologies. Whether you're a developer or a non-technical user, Liberty Framework empowers you to build robust applications with zero coding skills required.</p> <p>Online Demo</p> <pre><code>Login = demo\nPassword = demo\nAppplication = LIBERTY, NOMASX-1 and NOMAJDE\n</code></pre>"},{"location":"#company-website","title":"Company Website","text":"<p>Company specialized in consulting, integration and development.</p> <p>NOMANA-IT</p>"},{"location":"api/getting-started/","title":"Open source API for JD Edwards and BI Publisher","text":""},{"location":"api/getting-started/#jd-edwards","title":"JD Edwards","text":"<p>Oracle\u2019s JD Edwards EnterpriseOne is an integrated applications suite of comprehensive enterprise resource planning software that combines business value, standards-based technology, and deep industry experience into a business solution with a low total cost of ownership.</p> <p>Export XML source or PDF Output from JD Edwards BLOB fields</p> <p>Export source code for BSFN from JD Edwards BLOB field (F98780R)</p>"},{"location":"api/getting-started/#bi-publisher","title":"BI Publisher","text":"<p>Oracle BI Publisher is the reporting solution to author, manage, and deliver all your reports and documents easier and faster than traditional reporting tools.</p> <p>Simple JAVA CLASS to encode string and display barcode 128 with BI Publisher RTF template</p> <p>JAVA package with Oracle BI Publisher API</p>"},{"location":"api/bip-api/nomabc/","title":"NOMABC - Barcode 128 for BI Publisher","text":"<p>Download Built with VSCode and JDK 11</p>"},{"location":"api/bip-api/nomabc/#1-modify-xdocfg","title":"1. Modify xdo.cfg","text":"<p>Add the line below to declare the truetype font. The font is delivered into the dist directory. (Thanks to GrandZebu for explanation and font : http://grandzebu.net/informatique/codbar/code128.htm)</p> <pre><code>&lt;font family=\"Code 128z\" style=\"normal\" weight=\"normal\"&gt;&lt;truetype path=\"d:/BIP/java/fonts/code128z.TTF\"/&gt;&lt;/font&gt;\n</code></pre>"},{"location":"api/bip-api/nomabc/#2-declaration-of-a-custom-function-into-a-rtf-template","title":"2. Declaration of a custom function into a RTF Template","text":"<p>Add a field into the template and set the property like this</p> <pre><code>&lt;?register-barcode-vendor:'nomabc.BarcodeUtil';'NOMANA\u2019?&gt;\n</code></pre> <p></p>"},{"location":"api/bip-api/nomabc/#3-convert-into-barcode-128","title":"3. Convert into BarCode 128","text":"<p>Add the field with the value to convert and modify the property with the following script</p> <pre><code>&lt;?format-barcode:DataBarreCode;'code128';'NOMANA\u2019?&gt;\n</code></pre> <p></p>"},{"location":"api/bip-api/nomabc/#4-display-barcode","title":"4. Display BarCode","text":"<p>Modify the font for the field in RTF with and select \"Code 128z\". If the truetype is not declared into Windows fonts, you will not see the font but you can simply modify it by typing the font name as screenshot below</p> <p></p>"},{"location":"api/bip-api/nomabip/","title":"NOMABIP - Java package with Oracle BI Publisher API","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/bip-api/nomabip/#1-functionalities","title":"1. Functionalities","text":"<p>This API was initially developed to integrate easily JD Edwards and BI Publisher, regardless of JD Edwards Tools Release.</p> <p>Nothing to install, only to use. Sample scripts are provided in the <code>test</code> directory. It can now be used for any spool with or without JD Edwards (BI Publisher license is needed).</p>"},{"location":"api/bip-api/nomabip/#features","title":"Features:","text":"<ul> <li>Generate PDF and XML files simultaneously from a XML spool.</li> <li>Burst or single mode for flexible processing.</li> <li>Configure the number of CPUs for parallel processing and performance improvements.</li> <li>Add Ghostscript for enhanced PDF compatibility.</li> <li>Document indexation and error tracking in an Oracle Database (optional).</li> <li>Integrate the Java class NOMABC to print Barcode 128 (see GitHub repository).</li> </ul>"},{"location":"api/bip-api/nomabip/#2-global-settings","title":"2. Global Settings","text":"Parameter Description cmdGS Call ghostscript to transform PDF after generation (ie, version 1.6 to 1.5) runGS Call GS script Y/N xdo Settings for fonts, subtemplate directory... appHome Running script directory burstOutput Output directory for bursting documents singleOutput Output directory for single mode processHome Process directory dirOutput Temp Output directory copyXSL XSL transformation to generate copies routageXSL Used for JD Edwards to copy back into the Printqueue updateDB Update Oracle database (Y/N) with index and logs"},{"location":"api/bip-api/nomabip/#3-template-settings","title":"3. Template Settings","text":"<p>Set template location, ID of fields used to name the output document in case of bursting and mandatory fields when update database is on.</p>"},{"location":"api/bip-api/nomabip/#4-usage","title":"4. Usage","text":"<ul> <li>Simple java application to configure and generate documents <pre><code>java -jar ../dist/nomabip.jar -config ./config/config.properties\n</code></pre></li> <li>Encrypt password for config file <pre><code>java -jar ../dist/nomabip.jar -password &lt;PASSWORD&gt;\n</code></pre></li> <li>Generate documents <pre><code>java -jar ../dist/nomabip.jar -run ./config/config.properties &lt;TEMPLATE&gt; &lt;DOCUMENT_NAME&gt; &lt;MODE&gt; &lt;DOCUMENT_ID&gt; \n</code></pre></li> </ul>"},{"location":"api/bip-api/nomabip/#5-screenshot","title":"5. Screenshot","text":""},{"location":"api/jde-api/jdebip/","title":"JDEBIP - Export XML source or PDF Output from JD Edwards BLOB fields","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/jde-api/jdebip/#1-functionalities","title":"1. Functionalities","text":"<ul> <li>Export XML source or PDF Output from JD Edwards BLOB fields</li> </ul>"},{"location":"api/jde-api/jdebip/#2-settings","title":"2. Settings","text":"<p>This class can be used to export blob column for BI Publisher from JD Edwards Database. This class can be extended to export BLOB for all tables.</p> Parameter Description URL JDBC String for database connection USER User to login into the database PASSWORD Password to login into the database OutputDirectory Output directory for files exported from blob field XML SQL Query to get XML source PDF SQL Query to get PDF output REMOVE_RD If you need to retrieve batch from PrintQueue, record should be deleted DELETE_F9563110 SQL query to delete record into F9563110 DELETE_F95630 SQL query to delete record into F95630"},{"location":"api/jde-api/jdebip/#3-usage","title":"3. Usage","text":"<ul> <li>Extract XML Source <pre><code>java -cp ../dist/nomajde.jar jdebip XML &lt;OBJECT_NAME&gt; &lt;VERSION&gt; &lt;LANGUAGE&gt; &lt;JOB_NUMBER&gt;\n</code></pre></li> <li>Extract PDF output\\ <pre><code>java -cp ../dist/nomajde.jar jdebip PDF &lt;OBJECT_NAME&gt; &lt;VERSION&gt; &lt;LANGUAGE&gt; &lt;JOB_NUMBER&gt;\n</code></pre></li> </ul>"},{"location":"api/jde-api/jdebsfn/","title":"JDEBSN - Export source code for BSFN from JD Edwards BLOB field (F98780R)","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/jde-api/jdebsfn/#1-functionalities","title":"1. Functionalities","text":"<ul> <li>Export source code for BSFN from JD Edwards BLOB field (F98780R)</li> </ul>"},{"location":"api/jde-api/jdebsfn/#2-settings","title":"2. Settings","text":"<p>This class can be used to export blob column for BSFN from JD Edwards Database. This class can be extended to export BLOB for all tables.</p> Parameter Description URL JDBC String for database connection USER User to login into the database PASSWORD Password to login into the database OutputDirectory Output directory for files exported from blob field F98780R SQL Query to get source code for BSFN"},{"location":"api/jde-api/jdebsfn/#3-usage","title":"3. Usage","text":"<ul> <li>Extract source code\\ <pre><code>java -cp ../dist/nomajde.jar jdebsfn F98780R &lt;BSFN_OR_TABLE&gt;\n</code></pre></li> </ul>"},{"location":"blog/","title":"Articles","text":""},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/","title":"Setting Up a JD Edwards EnterpriseOne Trial Instance on Oracle Cloud","text":"<p>JD Edwards EnterpriseOne is a comprehensive ERP solution, and Oracle provides an easy way to deploy a trial instance via the Oracle Cloud Marketplace. This guide walks you through the steps to set up the JD Edwards EnterpriseOne Trial Edition.</p> <p>The URL for accessing our Demo platform for JD Edwards EnterpriseOne and Studio are as follows:</p> <ul> <li>EnterpriseOne: https://132.145.35.251:8080/jde/owhtml</li> <li>Studio: https://132.145.35.251:7077/studio</li> <li>Server Manager: https://132.145.35.251:8998/manage</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#login-credentials","title":"Login Credentials","text":"<p>Use the following credentials to access the instance: <pre><code># Login Credentials\nUser: demo\nPassword: nomana\n</code></pre></p>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following:</p> <ul> <li>Oracle Cloud Account: An active subscription or free tier account with Oracle Cloud Infrastructure (OCI).</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#steps-to-deploy-the-jd-edwards-trial-edition","title":"Steps to Deploy the JD Edwards Trial Edition","text":""},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#1-access-the-oracle-cloud-marketplace","title":"1. Access the Oracle Cloud Marketplace","text":"<ol> <li>Go to the Oracle Cloud Marketplace.</li> <li>Search for JD Edwards EnterpriseOne Trial Edition.</li> <li>Open the listing to view detailed information.</li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#2-deploy-the-application","title":"2. Deploy the Application","text":"<ol> <li>Click the Get App button on the listing page.</li> <li>Log in with your Oracle Cloud Single Sign-On credentials.</li> <li>Accept the Oracle Cloud Marketplace Terms of Service.</li> <li>Select your OCI compartment and click Launch Instance.</li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#3-configure-the-instance","title":"3. Configure the Instance","text":"<ol> <li>Instance Details:<ul> <li>Enter a name for your instance.</li> <li>Select the compartment where the instance will reside.</li> </ul> </li> </ol> <ol> <li>Compute Shape:<ul> <li>Choose a shape, such as <code>VM.Standard2.4</code>, that provides sufficient resources.</li> </ul> </li> </ol> <ol> <li>Networking:<ul> <li>Select an existing Virtual Cloud Network (VCN) and subnet or create a new one.</li> <li>Assign a public IP address for external access.</li> </ul> </li> <li>SSH Keys:<ul> <li>Download SSH Key or upload your public SSH key to enable secure access to the instance.</li> </ul> </li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#4-launch-the-instance","title":"4. Launch the Instance","text":"<ul> <li>Review all configuration settings.</li> <li>Click Create to launch the instance.</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#5-access-the-jd-edwards-environment","title":"5. Access the JD Edwards Environment","text":"<ol> <li>Once the instance is running, connect to it via SSH:     <pre><code>ssh -i &lt;path_to_private_key&gt; opc@&lt;instance_public_ip&gt;\n</code></pre></li> </ol> <p>Follow the assistant to enter all informations related to the instance (port, password)</p> <p></p> <ol> <li> <p>Open a web browser and navigate to the JD Edwards EnterpriseOne interface using the public IP address and port (default: <code>8080</code>).</p> <p>Example URL: <pre><code>http://&lt;instance_public_ip&gt;:8080\n</code></pre></p> </li> <li> <p>Log in with the default credentials or any credentials provided during setup.</p> </li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#additional-resources","title":"Additional Resources","text":"<ul> <li>JD Edwards EnterpriseOne Trial Edition - Oracle Cloud Marketplace</li> <li>Oracle Cloud Infrastructure Documentation</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#next-steps","title":"Next Steps","text":"<p>After successfully deploying the trial instance, you can explore JD Edwards EnterpriseOne features such as:</p> <ul> <li>Configuring modules for your business needs.</li> <li>Testing integrations with other Oracle Cloud applications.</li> <li>Evaluating its scalability and performance in the cloud.</li> </ul> <p>For further assistance, refer to the official documentation or consult Oracle support.</p>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/","title":"Installing and Deploying MkDocs Material with GitHub Pages","text":"<p>This guide explains how to install and deploy MkDocs Material for creating beautiful documentation sites. It also includes steps to automate deployment to GitHub Pages.</p>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#whats-included-in-the-site","title":"What's Included in the Site","text":"<p>The provided MkDocs Material configuration is designed to support a comprehensive documentation site with the following features:</p> <ul> <li> <p>Navigation:</p> <ul> <li>Multi-level navigation with tabs and collapsible sections.</li> <li>Support for documentation, guides, blog posts, API references, and release notes.</li> </ul> </li> <li> <p>Customization:</p> <ul> <li>Custom logo and favicon.</li> <li>Light and dark themes with a toggle switch.</li> <li>Customizable color palettes to match your branding.</li> </ul> </li> <li> <p>Enhanced User Experience:</p> <ul> <li>Instant navigation with prefetching for fast transitions.</li> <li>Sticky top navigation for ease of access.</li> <li>Copy button for code snippets to improve developer productivity.</li> </ul> </li> <li> <p>Plugins:</p> <ul> <li><code>awesome-pages</code>: Automatically organizes navigation based on folder structure.</li> <li><code>minify</code>: Optimizes site assets for faster loading.</li> <li><code>blog</code>: Supports structured and visually appealing blog posts.</li> <li><code>search</code>: Integrated full-text search for quick access to content.</li> </ul> </li> <li> <p>Content Types:</p> <ul> <li>Documentation sections for getting started, installation guides, and tutorials.</li> <li>Blog posts with structured navigation and metadata.</li> </ul> </li> <li> <p>Technical Enhancements:</p> <ul> <li>Cookie consent settings to comply with privacy policies.</li> <li>CSP (Content Security Policy) meta tag for enhanced security.</li> <li>Custom CSS and JavaScript to further tailor the site's appearance and functionality.</li> </ul> </li> </ul>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#repository-features","title":"Repository Features","text":"<p>The repository includes:</p> <ol> <li>A complete <code>mkdocs.yml</code> configuration with navigation, theme, and plugin settings.</li> <li>A <code>docs/</code> directory with pre-structured files and folders for easy customization.</li> <li>Workflow configuration (<code>.github/workflows/deploy.yml</code>) to automate deployment to GitHub Pages.</li> <li>Sample blog posts, API documentation, and guides to demonstrate how to structure content.</li> <li>Custom assets for branding, including a logo and favicon.</li> </ol> <p>By cloning this repository, you can start with a fully functional MkDocs Material site and focus on adding your content instead of setting up the structure.</p>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-1-prerequisites","title":"Step 1: Prerequisites","text":"<p>Before starting, ensure you have the following: - Python 3.x installed (verify with <code>python --version</code>).</p> <ul> <li> <p>pip installed (verify with <code>pip --version</code>).</p> </li> <li> <p>A GitHub repository to host your documentation.</p> </li> <li> <p>Git configured locally with a GitHub personal access token if needed.</p> </li> </ul>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-2-install-mkdocs-material","title":"Step 2: Install MkDocs Material","text":"<ol> <li> <p>Create a Virtual Environment (optional but recommended):    <pre><code>python -m venv venv\nsource venv/bin/activate # On Windows, use venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install MkDocs Material:    <pre><code>pip install mkdocs-material\n</code></pre></p> </li> <li> <p>Verify Installation:    <pre><code>mkdocs --version\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-3-create-the-mkdocs-project","title":"Step 3: Create the MkDocs Project","text":"<ol> <li> <p>Create a New MkDocs Project:    <pre><code>mkdocs new my-project\ncd my-project\n</code></pre></p> </li> <li> <p>Edit the <code>mkdocs.yml</code> File:    Replace the default configuration with the following:</p> </li> </ol> <pre><code>site_name: Your Site Name\nsite_url: Your Site URL\n\ntheme:\n  name: material\n  logo: assets/your_logo.png\n  favicon: assets/your_logo.png\n  custom_dir: overrides\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      primary: blue grey\n      accent: amber\n      scheme: default\n      toggle:\n        icon: material/weather-night\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      primary: blue grey\n      accent: amber\n      scheme: slate\n      toggle:\n        icon: material/weather-sunny\n        name: Switch to light mode   \n  features:\n    - content.code.copy     \n    - navigation.instant\n    - navigation.tabs\n    - navigation.path\n    - navigation.top\n    - navigation.footer\n    - header.autohide\n\n# example of navigation\nnav:\n  - Home: index.md\n  - Liberty:\n      - Getting Started: liberty/getting-started.md\n      - Installation:\n        - Architecture: liberty/technical/architecture.md\n        - Docker Installation Guide: liberty/technical/installation.md\n        - Installation Tools Deployment Guide: liberty/technical/tools-deployment.md\n        - Liberty Deployment Guide: liberty/technical/liberty-deployment.md\n        - Create Linux Services: liberty/technical/linux-services.md\n        - Enable SSL with Traefik: liberty/technical/post-ssl.md    \n  - Blog:\n    - blog/index.md\n\nplugins:\n  - search\n  - awesome-pages\n  - minify\n  - blog\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: your social link for github\n    - icon: fontawesome/brands/linkedin\n      link: your social link for linkedin          \n  meta:\n      - name: Content-Security-Policy\n        value: frame-ancestors 'self' https://giscus.app;      \n  consent:\n    title: Cookie consent\n    actions:\n      - accept\n      - manage\n      - reject\n    description: &gt;- \n      We use cookies to recognize your repeated visits and preferences,\n      as well as to measure the effectiveness of our documentation.\n  markdown_extensions:\n    - attr_list\n    - pymdownx.highlight:\n        anchor_linenums: true\n        linenums: true\n        line_spans: __span\n        pygments_lang_class: true\n    - pymdownx.inlinehilite\n    - pymdownx.snippets\n    - pymdownx.superfences\nextra_css:\n  - css/custom.css\nextra_javascript:\n  - js/extra.js  \ncopyright: &gt;\n  Copyright &amp;copy; 2024 Nomana-IT \u2013\n  &lt;a href=\"#__consent\"&gt;Change cookie settings&lt;/a&gt;\n</code></pre> <ol> <li>Add Your Documentation Files:    Organize your files under the <code>docs/</code> folder as per the navigation structure defined in the <code>mkdocs.yml</code>.</li> </ol>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-4-deploy-to-github-pages","title":"Step 4: Deploy to GitHub Pages","text":"<ol> <li>Set Up GitHub Actions:    Add the following configuration in <code>.github/workflows/deploy.yml</code>:</li> </ol> <pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material mkdocs-awesome-pages-plugin mkdocs-minify-plugin\n      - run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>Push Your Changes:    Commit and push your project to the <code>main</code> branch of your GitHub repository:    <pre><code>git add .\ngit commit -m \"Initial documentation setup\"\ngit push origin main\n</code></pre></p> </li> <li> <p>Access Your Site:    After GitHub Actions finish deploying, your site will be live at:    <pre><code>https://&lt;your-github-username&gt;.github.io/&lt;repository-name&gt;/\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#conclusion","title":"Conclusion","text":"<p>Your MkDocs Material documentation is now installed and deployed with GitHub Pages! This workflow ensures automated deployment and a professional look for your documentation site.</p>"},{"location":"blog/2024/11/21/locks-management/","title":"Locks Management","text":""},{"location":"blog/2024/11/21/locks-management/#1-gather-locks-for-current-session","title":"1. Gather locks for current session","text":"<pre><code>SELECT\n  (select username || ' - ' || osuser from v$session where sid=a.sid) blocker,\n  a.sid || ', ' || (select serial# from v$session where sid=a.sid) sid_serial,\n ' is blocking ',\n  (select username || ' - ' || osuser from v$session where sid=b.sid) blockee,\n  b.sid || ', ' || (select serial# from v$session where sid=b.sid) sid_serial\nFROM \n  v$lock a, v$lock b\nWHERE \n  a.block = 1\n  AND b.request &gt; 0\n  AND a.id1 = b.id1\n  AND a.id2 = b.id2;\n</code></pre>"},{"location":"blog/2024/11/21/database-size/","title":"Database size","text":""},{"location":"blog/2024/11/21/database-size/#1-full-size-of-the-database","title":"1. Full size of the database","text":"<pre><code>SELECT  SUM(bytes/1024/1024/1024) FROM dba_segments \n</code></pre>"},{"location":"blog/2024/11/21/database-size/#2-size-by-tablespace","title":"2. Size by tablespace","text":"<pre><code>SELECT  OWNER, SUM(bytes/1024/1024/1024) FROM dba_segments \nGROUP BY owner\norder BY owner;\n</code></pre>"},{"location":"blog/2024/11/21/database-size/#3-fragmented-space-for-a-schema","title":"3. Fragmented space for a schema","text":"<pre><code>SELECT \n  table_name,avg_row_len,round(((blocks*16/1024)),2)||'MB' \"TOTAL_SIZE\",\n  round((num_rows*avg_row_len/1024/1024),2)||'Mb' \"ACTUAL_SIZE\",\n  round(((blocks*16/1024)-(num_rows*avg_row_len/1024/1024)),2) ||'MB' \"FRAGMENTED_SPACE\",\n  round((round(((blocks*16/1024)-(num_rows*avg_row_len/1024/1024)),2)/round(((blocks*16/1024)),2))*100,2) \"percentage\"\nFROM \n  all_tables \nWHERE \n  owner='&lt;OWNER&gt;' \n  AND blocks&gt;0;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/","title":"Transport SQL profile from one base to another","text":""},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#1-list-all-profiles-to-retrieve-the-profile-name","title":"1. List all profiles to retrieve the profile name","text":"<pre><code>SELECT * FROM DBA_SQL_PROFILES;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#2-create-table-with-dbms-to-export-profile","title":"2. Create table with DBMS to export profile","text":"<pre><code>BEGIN\n  DBMS_SQLTUNE.CREATE_STGTAB_SQLPROF (\n    table_name  =&gt; 'TMP_SQL_PROFILES'\n,   schema_name =&gt; 'SYSTEM'\n);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#3-export-profile-to-the-temporary-table","title":"3. Export profile to the temporary table","text":"<p><pre><code>BEGIN\n  DBMS_SQLTUNE.PACK_STGTAB_SQLPROF (\n    profile_name         =&gt; 'SYS_SQLPROF_02701ab7b57c0000'\n,   staging_table_name   =&gt; 'TMP_SQL_PROFILES'\n,   staging_schema_owner =&gt; 'SYSTEM'\n);\nEND;\n</code></pre> Export/Import this table between both databases</p>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#4-import-profile-from-temporay-table-in-the-target-database","title":"4. Import profile from temporay table in the target database","text":"<pre><code>BEGIN\n  DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(\n     replace            =&gt; true\n,    staging_table_name =&gt; 'TMP_SQL_PROFILES'\n);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/statistics-management/","title":"Statistics Management","text":""},{"location":"blog/2024/11/21/statistics-management/#1-gather-statistics-for-a-table","title":"1. Gather statistics for a table","text":"<pre><code>BEGIN\n DBMS_STATS.GATHER_TABLE_STATS (ownname =&gt; '&lt;OWNER&gt;' , tabname =&gt; '&lt;TABLE_NAME&gt;',\n  cascade =&gt; true, estimate_percent =&gt; 15,method_opt=&gt;'for all indexed columns size 1', granularity =&gt; 'ALL', degree =&gt; 1);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/statistics-management/#2-gather-statistics-for-a-schema","title":"2. Gather statistics for a schema","text":"<pre><code>exec dbms_stats.gather_schema_stats( -\n    ownname          =&gt; '&lt;SCHEMA_NAME&gt;', -\n    options          =&gt; 'GATHER AUTO', -\n    estimate_percent =&gt; dbms_stats.auto_sample_size, -\n    method_opt       =&gt; 'for all columns size repeat', -\n    degree           =&gt; 15 -\n)\n</code></pre>"},{"location":"liberty/getting-started/","title":"Getting Started with Liberty Framework","text":""},{"location":"liberty/getting-started/#liberty-framework","title":"Liberty Framework","text":"<p>Welcome to Liberty Framework, a no-code development platform designed for rapid and efficient web application creation using the latest in React, Node.js, and PostgreSQL technologies. Whether you're a developer or a non-technical user, Liberty Framework empowers you to build robust applications with zero coding skills required.</p> <p>Go to Demo</p> <pre><code>Login = demo\nPassword = demo\nAppplication = LIBERTY, NOMASX-1 and NOMAJDE\n</code></pre>"},{"location":"liberty/getting-started/#documentation","title":"Documentation","text":"<p>Download the complete Liberty Framework User Guide in PDF format:</p> <p>Download Liberty Framework User Guide</p>"},{"location":"liberty/release-notes/","title":"Release Notes","text":""},{"location":"liberty/api/liberty-api/","title":"Liberty API","text":"<p>Description: Liberty API provides a powerful and scalable backend for managing authentication,  database operations, and framework functionalities in the Liberty Framework. </p>"},{"location":"liberty/api/liberty-api/#key-features","title":"\ud83d\udd39 Key Features:","text":"<ul> <li>Authentication &amp; Authorization: Secure endpoints with JWT tokens and OAuth2.</li> <li>Database Management: Query, insert, update, and delete records across multiple pools.</li> <li>Framework Controls: Manage modules, applications, themes, and logs.</li> <li>Security &amp; Encryption: Encrypt data and ensure safe database access.</li> <li>Logging &amp; Auditing: Retrieve and analyze logs for security and debugging.</li> </ul>"},{"location":"liberty/api/liberty-api/#authentication","title":"\ud83d\udd39 Authentication","text":"<ul> <li><code>/api/auth/token</code> - Generate a JWT token for authentication.</li> <li><code>/api/auth/user</code> - Retrieve authenticated user details.</li> </ul>"},{"location":"liberty/api/liberty-api/#database-operations","title":"\ud83d\udd39 Database Operations","text":"<ul> <li><code>/api/db/check</code> - Validate database connection.</li> <li><code>/api/db/query</code> - Retrieve, insert, update, or delete records.</li> <li><code>/api/db/audit/{table}/{user}</code> - Audit changes on a specific table.</li> </ul>"},{"location":"liberty/api/liberty-api/#framework-features","title":"\ud83d\udd39 Framework Features","text":"<ul> <li><code>/api/fmw/modules</code> - Retrieve framework modules.</li> <li><code>/api/fmw/applications</code> - Retrieve available applications.</li> <li><code>/api/fmw/themes</code> - Manage application themes.</li> </ul> <p>\ud83d\udd17 Explore the API using Swagger UI (<code>/api/test</code>) or Redoc (<code>/api</code>).</p> <p>Version: 1.0.0</p>"},{"location":"liberty/api/liberty-api/#authentication_1","title":"Authentication","text":""},{"location":"liberty/api/liberty-api/#auth-user","title":"AUTH - User","text":"<p>Retrieve user information.</p> <p>GET <code>/api/auth/user</code></p> <p>Query Parameters</p> <ul> <li><code>user</code> (in query): User ID.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the user. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get user information <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"USR_ID\": \"demo\",\n            \"USR_PASSWORD\": \"ENC:...\",\n            \"USR_NAME\": \"Demo User\",\n            \"USR_EMAIL\": \"demo@liberty.fr\",\n            \"USR_STATUS\": \"Y\",\n            \"USR_ADMIN\": \"N\",\n            \"USR_LANGUAGE\": \"fr\",\n            \"USR_MODE\": \"light\",\n            \"USR_READONLY\": \"Y\",\n            \"USR_DASHBOARD\": 1,\n            \"USR_THEME\": \"liberty\"\n        }\n    ],\n    \"status\": \"success\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Unprocessable Entity <ul> <li>Content-Type: <code>application/json</code></li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#auth-token","title":"AUTH - Token","text":"<p>Generate a JWT token for the user.</p> <p>POST <code>/api/auth/token</code></p> <p>Query Parameters</p> <ul> <li><code>pool</code> (in query): The database pool alias to retrieve the user. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>type</code> (in query): Authentication type, from database or using OIDC. Valid values: <code>database</code>, <code>oidc</code></li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"properties\": {\n        \"user\": {\n            \"type\": \"string\",\n            \"title\": \"User\"\n        },\n        \"password\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Password\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"user\",\n        \"password\"\n    ],\n    \"title\": \"LoginRequest\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Authentication successful, JWT token generated <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"access_token\": \"....\",\n    \"token_type\": \"bearer\",\n    \"status\": \"success\",\n    \"message\": \"Authentication successful\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Authentication failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#framework","title":"Framework","text":""},{"location":"liberty/api/liberty-api/#fmw-applications","title":"FMW - Applications","text":"<p>Retrieve Applications.</p> <p>GET <code>/api/fmw/applications</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get Applications Available <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"pool\": \"default\",\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"APPS_ID\": 1,\n            \"APPS_NAME\": \"LIBERTY\",\n            \"APPS_DESCRIPTION\": \"Framework Liberty\",\n            \"APPS_POOL\": \"default\",\n            \"APPS_OFFSET\": 5000,\n            \"APPS_LIMIT\": 10000,\n            \"APPS_VERSION\": 500,\n            \"APPS_DASHBOARD\": 1,\n            \"APPS_THEME\": \"liberty\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"APPS_ID\": 2,\n            \"APPS_NAME\": \"NOMASX1\",\n            \"APPS_DESCRIPTION\": \"Rights, licenses and SOD\",\n            \"APPS_POOL\": \"default\",\n            \"APPS_OFFSET\": 5000,\n            \"APPS_LIMIT\": 10000,\n            \"APPS_VERSION\": 500,\n            \"APPS_DASHBOARD\": 1,\n            \"APPS_THEME\": \"modernBluePurple\"\n        }\n    ],\n    \"rowCount\": 2,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"MODULE_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_DESCRIPTION\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_ENABLED\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_PARAMS\",\n            \"type\": \"UNKNOWN\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-modules","title":"FMW - Modules","text":"<p>Retrieve Modules.</p> <p>GET <code>/api/fmw/modules</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get Modules Details <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"pool\": \"default\",\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"MODULE_ID\": \"menus\",\n            \"MODULE_DESCRIPTION\": \"Enable Drawer Menus\",\n            \"MODULE_ENABLED\": \"Y\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"MODULE_ID\": \"grafana\",\n            \"MODULE_DESCRIPTION\": \"Enable Grafana Dashboard\",\n            \"MODULE_ENABLED\": \"N\"\n        },\n        {\n            \"ROW_ID\": 3,\n            \"MODULE_ID\": \"dev\",\n            \"MODULE_DESCRIPTION\": \"Enable Development Mode\",\n            \"MODULE_ENABLED\": \"Y\"\n        },\n        {\n            \"ROW_ID\": 4,\n            \"MODULE_ID\": \"sentry\",\n            \"MODULE_DESCRIPTION\": \"Enable Sentry\",\n            \"MODULE_ENABLED\": \"N\",\n            \"MODULE_PARAMS\": {\n                \"url\": \"https://sentry.io\",\n                \"replay\": \"false\",\n                \"clientid\": \"nomana\",\n                \"platform\": \"dev\"\n            }\n        },\n        {\n            \"ROW_ID\": 5,\n            \"MODULE_ID\": \"debug\",\n            \"MODULE_DESCRIPTION\": \"Enable Debug\",\n            \"MODULE_ENABLED\": \"N\"\n        },\n        {\n            \"ROW_ID\": 6,\n            \"MODULE_ID\": \"login\",\n            \"MODULE_DESCRIPTION\": \"Enable Embedded Login\",\n            \"MODULE_ENABLED\": \"Y\"\n        }\n    ],\n    \"rowCount\": 6,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"MODULE_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_DESCRIPTION\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_ENABLED\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_PARAMS\",\n            \"type\": \"UNKNOWN\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-themes","title":"FMW - Themes","text":"<p>Retrieve Themes Definition.</p> <p>GET <code>/api/fmw/themes</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get Themes Details <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"pool\": \"default\",\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"THM_NAME\": \"modernBluePurple\",\n            \"TCL_KEY\": \"primary\",\n            \"TCL_LIGHT\": \"#3f51b5\",\n            \"TCL_DARK\": \"#673ab7\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"THM_NAME\": \"luxuryDarkGold\",\n            \"TCL_KEY\": \"secondary\",\n            \"TCL_LIGHT\": \"#607d8b\",\n            \"TCL_DARK\": \"rgb(206, 203, 203)\"\n        }\n    ],\n    \"rowCount\": 2,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"MODULE_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_DESCRIPTION\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_ENABLED\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_PARAMS\",\n            \"type\": \"UNKNOWN\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-get-logs","title":"FMW - Get logs","text":"<p>Get all current logs and upload to cache</p> <p>GET <code>/api/logs</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Successful Response <ul> <li>Content-Type: <code>application/json</code></li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-get-log-details","title":"FMW - Get log details","text":"<p>Get details for a log id from the cache</p> <p>GET <code>/api/logs/details</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Successful Response <ul> <li>Content-Type: <code>application/json</code></li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-encrypt","title":"FMW - Encrypt","text":"<p>Encrypt the input received</p> <p>POST <code>/api/fmw/encrypt</code></p> <p>Query Parameters</p> <ul> <li><code>plain_text</code> (in query): Text to be encrypted</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Encryption successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"encrypted\": \"ENC:wNMyALbXf.....\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Failed to encrypt data: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError)\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-push-logs","title":"FMW - Push logs","text":"<p>Push logs to files in json and plain text format</p> <p>POST <code>/api/logs</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Successful Response <ul> <li>Content-Type: <code>application/json</code></li> </ul>"},{"location":"liberty/api/liberty-api/#database","title":"Database","text":""},{"location":"liberty/api/liberty-api/#database-check","title":"DATABASE - Check","text":"<p>Performs a basic check to ensure the database connection is functional. Returns the current date if the connection is successful.</p> <p>GET <code>/api/db/check</code></p> <p>Query Parameters</p> <ul> <li><code>framework_pool</code> (in query): Pool alias to retrieve the database definition. (e.g., <code>default</code>, <code>libnsx1</code>). (Default: <code>default</code>)</li> <li><code>target_pool</code> (in query): Pool alias of the database to check. (e.g., <code>nomasx1</code>, <code>nomajde</code>). (Default: <code>default</code>)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Database connection is successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"rows\": [\n        {\n            \"ROW_ID\": 1,\n            \"CURRENT_DATE\": \"2025-01-27T08:14:13.809494+00:00\"\n        }\n    ],\n    \"rowCount\": 1,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"CURRENT_DATE\",\n            \"type\": \"datetime\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError)\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#database-close","title":"DATABASE - Close","text":"<p>Close all database connections for the specified pool alias.</p> <p>GET <code>/api/db/close</code></p> <p>Query Parameters</p> <ul> <li><code>pool</code> (in query): Pool alias for the database to close. (e.g., <code>default</code>, <code>libnsx1</code>). (Default: <code>default</code>)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Pool closed successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"disconnected\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Requested pool `alias` not found\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#database-open","title":"DATABASE - Open","text":"<p>Open a connection to the database using the specified pool alias.</p> <p>GET <code>/api/db/open</code></p> <p>Query Parameters</p> <ul> <li><code>framework_pool</code> (in query): Pool alias to retrieve the database definition. (e.g., <code>default</code>, <code>libnsx1</code>). (Default: <code>default</code>)</li> <li><code>target_pool</code> (in query): Pool alias of the database to open. (e.g., <code>libnsx1</code>, <code>nomasx1</code>, <code>nomajde</code>). (Default: <code>default</code>)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Pool opened successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"connected\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Requested pool `alias` not found\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query","title":"Query","text":""},{"location":"liberty/api/liberty-api/#query-select","title":"QUERY - Select","text":"<p>Retrieve data or metadata from the database based on query parameters. Supports filtering, language and pagination.</p> <p>GET <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>q</code> (in query): Filters to apply to the query in JSON format (e.g., <code>[{'APPS_ID':{'=':10}, 'APPS_NAME':{'like':'LIBERTY%'} }]</code>).</li> <li><code>language</code> (in query): The language for query execution. (e.g., <code>en</code>, <code>fr</code>). (Default: <code>en</code>)</li> <li><code>offset</code> (in query): The number of rows to skip before starting to fetch. (Default: <code>0</code>)</li> <li><code>limit</code> (in query): The maximum number of rows to return. (Default: <code>1000</code>)</li> <li><code>params</code> (in query): Additional parameters in JSON format to replace variable in a query (e.g., <code>[{'APPS_ID': 10}]</code>).</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data retrieved successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"DD_ID\": \"ACT_AUDIT_DATE\",\n            \"DD_LABEL\": \"Date (Audit)\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"DD_ID\": \"ACT_ID\",\n            \"DD_LABEL\": \"Action ID\"\n        }\n    ],\n    \"status\": \"success\",\n    \"metadata\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"DD_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"DD_LABEL\",\n            \"type\": \"str\"\n        }\n    ],\n    \"hasMore\": true,\n    \"limit\": 100,\n    \"offset\": 0,\n    \"count\": 2\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Invalid JSON format in request query.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Example error message\"\n            }\n        ],\n        \"status\": \"error\",\n        \"hasMore\": false,\n        \"limit\": 100,\n        \"offset\": 0,\n        \"count\": 0,\n        \"query\": \"SELECT * FROM table_name\"\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-audit","title":"QUERY - Audit","text":"<p>Audit user actions on a table.</p> <p>POST <code>/api/db/audit/{table}/{user}</code></p> <p>Query Parameters</p> <ul> <li><code>table</code> (in path): No description (Required)</li> <li><code>user</code> (in path): No description (Required)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty. JSON object with key-value pairs is required.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-insert","title":"QUERY - Insert","text":"<p>Insert data into a table.</p> <p>POST <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"type\": \"object\",\n    \"description\": \"JSON object with key-value pairs is required.\",\n    \"title\": \"Body\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-update","title":"QUERY - Update","text":"<p>Update data into a table.</p> <p>PUT <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"type\": \"object\",\n    \"description\": \"JSON object with key-value pairs is required.\",\n    \"title\": \"Body\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty. JSON object with key-value pairs is required.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-delete","title":"QUERY - Delete","text":"<p>Delete data into a table.</p> <p>DELETE <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"type\": \"object\",\n    \"description\": \"JSON object with key-value pairs is required.\",\n    \"title\": \"Body\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty. JSON object with key-value pairs is required.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup","title":"Setup","text":""},{"location":"liberty/api/liberty-api/#setup-current","title":"SETUP - Current","text":"<p>Get the current version deployed</p> <p>GET <code>/api/setup/current</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-downgrade","title":"SETUP - Downgrade","text":"<p>Downgrade databases to a specific version</p> <p>POST <code>/api/setup/downgrade/{version}</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-installation","title":"SETUP - Installation","text":"<p>Configure the postgres database.</p> <p>POST <code>/api/setup/install</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"properties\": {\n        \"host\": {\n            \"type\": \"string\",\n            \"title\": \"Host\"\n        },\n        \"port\": {\n            \"type\": \"integer\",\n            \"title\": \"Port\"\n        },\n        \"database\": {\n            \"type\": \"string\",\n            \"title\": \"Database\"\n        },\n        \"user\": {\n            \"type\": \"string\",\n            \"title\": \"User\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"title\": \"Password\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ],\n    \"title\": \"SetupRequest\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-revision","title":"SETUP - Revision","text":"<p>Create a new revision for the database</p> <p>POST <code>/api/setup/revision</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-upgrade","title":"SETUP - Upgrade","text":"<p>Upgrade databases to latest version</p> <p>POST <code>/api/setup/upgrade</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#export","title":"Export","text":""},{"location":"liberty/api/liberty-api/#export-repository-for-deployment","title":"EXPORT - Repository for Deployment","text":"<p>Export all tables models and data.</p> <p>GET <code>/api/export/repository</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/core/getting-started/","title":"Liberty Core","text":"<p>A modular, extensible framework for building modern applications with reusable UI components and application management tools.</p>"},{"location":"liberty/core/getting-started/#overview","title":"Overview","text":"<p>Liberty Core is a comprehensive framework that provides a robust set of UI components, application management tools, and context providers to streamline development.</p>"},{"location":"liberty/core/getting-started/#features","title":"Features","text":"<ul> <li>\ud83d\ude80 Prebuilt UI Components: Buttons, Dialogs, Alerts, Tables, and more.</li> <li>\u2699\ufe0f Context Providers: Manage applications, authentication, users, and modules.</li> <li>\ud83c\udfa8 Theming Support: Customizable styles for different UI needs.</li> <li>\ud83d\udd0c Extensibility: Easily add and configure new modules.</li> <li>\ud83c\udf10 Integrated State Management: Built-in context for handling global application state.</li> </ul>"},{"location":"liberty/core/getting-started/#backend-integration","title":"Backend Integration","text":"<p>Liberty Core is designed to seamlessly integrate with the Liberty Framework, which includes a FastAPI-based backend powered by PostgreSQL. This backend provides a preconfigured database and a complete set of ready-to-use APIs, allowing developers to focus on building applications without worrying about backend setup.</p> <ul> <li>\ud83d\udd17 Backend Repository: Liberty Framework</li> </ul>"},{"location":"liberty/core/getting-started/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is divided into the following categories:</p>"},{"location":"liberty/core/getting-started/#application-management","title":"Application Management","text":"<ul> <li>\ud83d\udd39 [AppProvider] - Provides global application state.</li> <li>\ud83d\udd39 [Modules] - Handles feature activation.</li> <li>\ud83d\udd39 [Applications] - Manages multiple application instances.</li> <li>\ud83d\udd39 [Users] - User authentication and profiles.</li> <li>\ud83d\udd39 [Authentication] - Token-based authentication system.</li> <li>\ud83d\udd39 [Use Media Query] - Responsive design utilities.</li> </ul>"},{"location":"liberty/core/getting-started/#ui-components","title":"UI Components","text":"<ul> <li>\ud83c\udfaf Alerts &amp; Messages - Alert, AlertMessage, SnackMessage.</li> <li>\ud83c\udf9b Buttons &amp; Toggles - Button, IconButton, Toggle.</li> <li>\ud83d\uddd4 Dialogs &amp; Overlays - Dialog, ConfirmationDialog, DialogExport, Popper, Tooltip.</li> <li>\u270d\ufe0f Inputs &amp; Forms - Input, Checkbox, Select.</li> <li>\ud83d\udcc2 Navigation - Menu, Tabs.</li> <li>\ud83d\udcca Data Display - Table, List, Grid, Typography.</li> </ul>"},{"location":"liberty/core/getting-started/#getting-started","title":"Getting Started","text":"<p>To use Liberty Core, install it via npm: ```sh npm install @nomana-it/liberty-core ```</p> <p>Then import the necessary components: ```tsx import { AppProvider, Button, Dialog } from \"liberty-core\";</p> <p>export const MyApp = () =&gt; (    Click Me  ); ```</p>"},{"location":"liberty/core/getting-started/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/new-project/","title":"Creating a New React App with Liberty Core","text":""},{"location":"liberty/core/new-project/#description","title":"Description","text":"<p>Liberty Core provides a modular and extensible foundation for building modern web applications. This guide explains how to create a new React app using Liberty Core, set up authentication with OIDC, and configure translations and error handling.</p>"},{"location":"liberty/core/new-project/#step-1-initialize-a-new-react-project","title":"Step 1: Initialize a New React Project","text":"<p>Create a new React project using Vite (recommended for performance):</p> <pre><code>npm create vite@latest my-liberty-app --template react-ts\ncd my-liberty-app\n</code></pre> <p>Then, install the required dependencies:</p> <pre><code>npm install liberty-core react-oidc-context @mui/material @emotion/react @emotion/styled\n</code></pre>"},{"location":"liberty/core/new-project/#step-2-create-the-application-entry-point","title":"Step 2: Create the Application Entry Point","text":"<p>Create a new file called `main.tsx` inside `src/` with the following setup:</p> <pre><code>import React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport { App } from \"./App\" \nimport { AppProvider, Div, ErrorBoundary, TranslationProvider } from \"liberty-core\"\nimport { AuthProvider, useAuth as oidcUseAuth } from \"react-oidc-context\";\n\n// OIDC Configuration\nconst oidcConfig = {\n  authority: window.location.origin + \"/oidc/realms/Liberty\",\n  client_id: \"liberty-framework\",\n  redirect_uri: window.location.origin,\n};\n\n// Render the app inside ReactDOM with the required providers\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  &lt;React.StrictMode&gt;\n    &lt;AuthProvider {...oidcConfig}&gt;\n      &lt;AppProvider useAuth={oidcUseAuth}&gt;\n        &lt;ErrorBoundary fallback={&lt;Div&gt;An error has occurred&lt;/Div&gt;}&gt;\n          &lt;TranslationProvider&gt;\n            &lt;App /&gt;\n          &lt;/TranslationProvider&gt;\n        &lt;/ErrorBoundary&gt;\n      &lt;/AppProvider&gt;\n    &lt;/AuthProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre>"},{"location":"liberty/core/new-project/#step-3-create-the-app-component","title":"Step 3: Create the App Component","text":"<p>Now, create a file named `App.tsx` inside `src/` and add:</p> <pre><code>import { AppsContent, LYThemeProvider, useAppContext } from 'liberty-core';\n\nexport function App() {\n  const { userProperties, appsProperties, modulesProperties } = useAppContext();\n\n  return (\n    &lt;LYThemeProvider&gt;\n      &lt;AppsContent /&gt;\n    &lt;/LYThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"liberty/core/new-project/#step-4-run-the-application","title":"Step 4: Run the Application","text":"<p>Start the development server:</p> <pre><code>npm run dev\n</code></pre> <p>Your Liberty Core app is now running! \ud83c\udf89</p>"},{"location":"liberty/core/new-project/#customization","title":"Customization","text":""},{"location":"liberty/core/new-project/#1-customize-the-theme","title":"1. Customize the Theme","text":"<p>Modify the theme inside `App.tsx`:</p> <pre><code>import { AppsContent, LYThemeProvider } from 'liberty-core';\nimport { theme } from './theme';  // Create a theme file\n\nexport function App() {\n  return (\n    &lt;LYThemeProvider customTheme={theme}&gt;\n      &lt;AppsContent /&gt;\n    &lt;/LYThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"liberty/core/new-project/#2-customize-menus","title":"2. Customize Menus","text":"<p>To override the default menus, use `getMenus` in `AppProvider`:</p> <pre><code>const getMenus = async () =&gt; {\n  return {\n    items: [\n      {\n        MENU_LABEL: \"Dashboard\",\n        MENU_COMPONENT: \"FormsDashboard\",\n        MENU_COMPONENT_ID: 1,\n      },\n      {\n        MENU_LABEL: \"Settings\",\n        MENU_COMPONENT: \"FormsContent\",\n        MENU_COMPONENT_ID: 2,\n      },\n    ],\n  };\n};\n\n// Wrap AppProvider with custom menus\n&lt;AppProvider getMenus={getMenus}&gt;\n</code></pre>"},{"location":"liberty/core/new-project/#conclusion","title":"Conclusion","text":"<p>You have now set up a React application using Liberty Core with authentication, error handling, translation, and theming. \ud83c\udfaf </p>"},{"location":"liberty/core/new-project/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/alert-message/","title":"AlertMessage Component","text":""},{"location":"liberty/core/components/ui-elements/alert-message/#description","title":"Description","text":"<p>The <code>AlertMessage</code> component is a wrapper around the <code>Alert</code> component that provides automatic dismissal for non-error messages.</p>"},{"location":"liberty/core/components/ui-elements/alert-message/#props","title":"Props","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls whether the alert is visible. <code>severity</code> <code>\"success\" , \"info\" , \"warning\" , \"error\"</code> <code>\"info\"</code> Defines the severity of the alert. <code>message</code> <code>string</code> <code>\"\"</code> The text displayed inside the alert. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback function triggered when the alert is closed."},{"location":"liberty/core/components/ui-elements/alert-message/#behavior","title":"Behavior","text":"<ul> <li>If the <code>severity</code> is not error, the alert will automatically close after 3 seconds.</li> <li>Clicking the close button will manually dismiss the alert.</li> </ul>"},{"location":"liberty/core/components/ui-elements/alert-message/#example-usage","title":"Example Usage","text":"<pre><code>import { AlertMessage } from \"liberty-core\";\nimport { useState } from \"react\";\n\nexport const AlertMessageExample = () =&gt; {\n  const [open, setOpen] = useState(true);\n\n  return (\n    &lt;div&gt;\n      &lt;AlertMessage open={open} severity={ESeverity.success} message=\"This is a success alert!\" onClose={() =&gt; setOpen(false)} /&gt;\n      &lt;AlertMessage open={true} severity={ESeverity.info} message=\"This is an info alert!\" onClose={() =&gt; console.log(\"Closed\")} /&gt;\n      &lt;AlertMessage open={true} severity={ESeverity.warning} message=\"This is a warning alert!\" onClose={() =&gt; console.log(\"Closed\")} /&gt;\n      &lt;AlertMessage open={true} severity={ESeverity.error} message=\"This is an error alert!\" onClose={() =&gt; console.log(\"Closed\")} /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/alert-message/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/alert/","title":"Alert Component","text":""},{"location":"liberty/core/components/ui-elements/alert/#description","title":"Description","text":"<p>The <code>Alert</code> component provides a styled alert message with various severity levels. It can also be dismissible.</p>"},{"location":"liberty/core/components/ui-elements/alert/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>\"success\" , \"info\" , \"warning\" , \"error\"</code> <code>\"info\"</code> Defines the style and icon of the alert. <code>dismissible</code> <code>boolean</code> <code>false</code> Allows the alert to be dismissed. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback function when the alert is closed."},{"location":"liberty/core/components/ui-elements/alert/#example-usage","title":"Example Usage","text":"<pre><code>import { Alert } from \"liberty-core\";\n\nexport const AlertExample = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;Alert variant=\"success\"&gt;This is a success alert!&lt;/Alert&gt;\n      &lt;Alert variant=\"info\"&gt;This is an info alert.&lt;/Alert&gt;\n      &lt;Alert variant=\"warning\" dismissible onClose={() =&gt; alert(\"Alert closed!\")}&gt;\n        This is a dismissible warning alert.\n      &lt;/Alert&gt;\n      &lt;Alert variant=\"error\"&gt;This is an error alert.&lt;/Alert&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/alert/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/button/","title":"Button Component","text":""},{"location":"liberty/core/components/ui-elements/button/#description","title":"Description","text":"<p>The <code>Button</code> component provides a customizable button with multiple variants and props. It supports different styles, icons, full-width mode, and disabled states.</p>"},{"location":"liberty/core/components/ui-elements/button/#props","title":"Props","text":"Prop Type Description <code>variant</code> <code>\"contained\", \"outlined\", \"text\"</code> Defines the button style <code>fullWidth</code> <code>boolean</code> If true, the button spans the full container width <code>disabled</code> <code>boolean</code> If true, the button is disabled <code>startIcon</code> <code>ReactNode, React.ElementType</code> Icon displayed before button text <code>endIcon</code> <code>ReactNode, React.ElementType</code> Icon displayed after button text <code>color</code> <code>string</code> Custom color for the button text <code>href</code> <code>string</code> If provided, renders the button as a link <code>target</code> <code>\"_blank\", \"_self\", \"_parent\", \"_top\"</code> Defines link target behavior <code>rel</code> <code>string</code> Specifies the relationship between the link and target <code>badgeContent</code> <code>ReactNode</code> Adds a small badge (for notifications, counts, etc.) <code>badgeColor</code> <code>string</code> Defines badge background color"},{"location":"liberty/core/components/ui-elements/button/#example-usage","title":"Example Usage","text":"<pre><code>import { Button } from \"liberty-core\";\nimport { FaCheck } from \"react-icons/fa\";\n\nexport const ButtonExample = () =&gt; {\n  return (\n    &lt;&gt;\n      {/* Default Contained Button */}\n      &lt;Button variant=\"contained\" onClick={() =&gt; alert(\"Contained Button Clicked\")}&gt;\n        Contained Button\n      &lt;/Button&gt;\n\n      {/* Outlined Button */}\n      &lt;Button variant=\"outlined\" color=\"secondary\" onClick={() =&gt; alert(\"Outlined Button Clicked\")}&gt;\n        Outlined Button\n      &lt;/Button&gt;\n\n      {/* Button with Icon */}\n      &lt;Button startIcon={&lt;FaCheck /&gt;} variant=\"contained\"&gt;\n        With Icon\n      &lt;/Button&gt;\n\n      {/* Disabled Button */}\n      &lt;Button disabled&gt;Disabled Button&lt;/Button&gt;\n\n      {/* Full Width Button */}\n      &lt;Button fullWidth variant=\"contained\"&gt;Full Width Button&lt;/Button&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/button/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/card/","title":"Card Component","text":""},{"location":"liberty/core/components/ui-elements/card/#description","title":"Description","text":"<p>The <code>Card</code> component is a versatile container that can display structured content, such as headers, actions, and clickable areas.</p>"},{"location":"liberty/core/components/ui-elements/card/#props","title":"Props","text":""},{"location":"liberty/core/components/ui-elements/card/#card","title":"<code>Card</code>","text":"Prop Type Default Description <code>isSelected</code> <code>boolean</code> <code>false</code> Adds a selected state style to the card."},{"location":"liberty/core/components/ui-elements/card/#cardheader","title":"<code>CardHeader</code>","text":"Prop Type Default Description <code>title</code> <code>string</code> <code>\"\"</code> The title displayed at the top of the card. <code>action</code> <code>ReactNode</code> <code>null</code> Additional action elements (e.g., buttons)."},{"location":"liberty/core/components/ui-elements/card/#cardcontent","title":"<code>CardContent</code>","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> <code>null</code> Content inside the card body."},{"location":"liberty/core/components/ui-elements/card/#cardactionarea","title":"<code>CardActionArea</code>","text":"Prop Type Default Description <code>onClick</code> <code>() =&gt; void</code> <code>undefined</code> Callback when the area is clicked. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the action area. <code>href</code> <code>string</code> <code>\"\"</code> Optional link instead of a button. <code>target</code> <code>\"_blank\" , \"_self\" , \"_parent\" , \"_top\"</code> <code>undefined</code> Specifies how the link opens."},{"location":"liberty/core/components/ui-elements/card/#cardactions","title":"<code>CardActions</code>","text":"Prop Type Default Description <code>justifyContent</code> <code>\"flex-start\" , \"center\" , \"flex-end\" , \"space-between\"</code> <code>\"flex-end\"</code> Controls the alignment of action buttons."},{"location":"liberty/core/components/ui-elements/card/#example-usage","title":"Example Usage","text":"<pre><code>import { Card, CardHeader, CardContent, CardActionArea, CardActions, Button } from \"liberty-core\";\n\nexport const CardExample = () =&gt; {\n  return (\n    &lt;Card isSelected={true}&gt;\n      &lt;CardHeader title=\"Card Title\" action={&lt;Button variant=\"text\"&gt;Edit&lt;/Button&gt;} /&gt;\n      &lt;CardContent&gt;\n        This is the content inside the card. You can add text, images, or other elements here.\n      &lt;/CardContent&gt;\n      &lt;CardActionArea onClick={() =&gt; alert(\"Card Clicked!\")}&gt;\n        Clickable Area\n      &lt;/CardActionArea&gt;\n      &lt;CardActions&gt;\n        &lt;Button variant=\"contained\" onClick={() =&gt; alert(\"Action Clicked!\")}&gt;Action&lt;/Button&gt;\n      &lt;/CardActions&gt;\n    &lt;/Card&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/card/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/applications/","title":"Applications Configuration","text":""},{"location":"liberty/core/services/applications/#description","title":"Description","text":"<p>The <code>Applications Configuration</code> defines multiple applications within the Liberty Framework. Each application has specific settings such as offset, limit, version, dashboard, and theme.</p>"},{"location":"liberty/core/services/applications/#data-structure","title":"Data Structure","text":"Field Name Type Description <code>APPS_ID</code> <code>number</code> Unique application identifier. <code>APPS_NAME</code> <code>string</code> The name of the application. <code>APPS_DESCRIPTION</code> <code>string</code> Description of the application\u2019s purpose. <code>APPS_POOL</code> <code>string</code> The database connection pool used by the application. <code>APPS_OFFSET</code> <code>number</code> The default offset value for queries. <code>APPS_LIMIT</code> <code>number</code> The maximum number of records per query. <code>APPS_VERSION</code> <code>string</code> The current version of the application. <code>APPS_DASHBOARD</code> <code>number | undefined</code> The dashboard ID associated with the app. <code>APPS_THEME</code> <code>string</code> The theme applied to the application. <code>APPS_SESSION</code> <code>string</code> The session mode (e.g., <code>session</code>). <code>APPS_JWT_TOKEN</code> <code>string</code> JWT token for authentication (if applicable)."},{"location":"liberty/core/services/applications/#example-usage","title":"Example Usage","text":"<pre><code>import { useAppContext } from \"liberty-core\";\n\nexport const ApplicationsExample = () =&gt; {\n  const { appsProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Available Applications&lt;/h2&gt;\n      &lt;ul&gt;\n        {Object.entries(appsProperties).map(([key, app]) =&gt; (\n          &lt;li key={key}&gt;\n            &lt;strong&gt;{app.name}&lt;/strong&gt; - {app.description} (Version: {app.version})\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/applications/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/appprovider/","title":"AppProvider Component","text":""},{"location":"liberty/core/services/appprovider/#description","title":"Description","text":"<p>The <code>AppProvider</code> is a context provider that manages global state for the Liberty Framework. It provides access to:</p> <ul> <li>Authentication state</li> <li>Application properties</li> <li>User properties</li> <li>Module configurations</li> <li>Snack messages</li> <li>WebSocket handling</li> </ul> <p>This provider allows injecting custom functions for retrieving data such as applications, users, tokens, and menus.</p>"},{"location":"liberty/core/services/appprovider/#props","title":"Props","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - Components wrapped by the provider. <code>useAuth</code> <code>() =&gt; AuthContextProps</code> - Custom authentication hook. <code>getModules</code> <code>() =&gt; Promise&lt;IModulesProps&gt;</code> - Fetch function for modules configuration. <code>getApplications</code> <code>() =&gt; Promise&lt;IAppsProps&gt;</code> - Fetch function for application settings. <code>getUser</code> <code>() =&gt; Promise&lt;IUsersProps&gt;</code> - Fetch function for user details. <code>getMenus</code> <code>() =&gt; Promise&lt;IMenusProps&gt;</code> - Fetch function for application menus."},{"location":"liberty/core/services/appprovider/#example-usage","title":"Example Usage","text":"<pre><code>import { AppProvider, useAppContext } from \"liberty-core\";\n\nexport const AppProviderExample = () =&gt; {\n  return (\n    &lt;AppProvider&gt;\n      &lt;MyApp /&gt;\n    &lt;/AppProvider&gt;\n  );\n};\n\nconst MyApp = () =&gt; {\n  const { userProperties, modulesProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;User: {userProperties.name}&lt;/h2&gt;\n      &lt;p&gt;Debug Mode: {modulesProperties.debug.enabled ? \"Enabled\" : \"Disabled\"}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/appprovider/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/authentication/","title":"Authentication &amp; Token Management","text":""},{"location":"liberty/core/services/authentication/#description","title":"Description","text":"<p>The authentication system in Liberty Framework uses an access token mechanism. A user provides their credentials, and if authenticated, they receive an access token.</p>"},{"location":"liberty/core/services/authentication/#data-structure","title":"Data Structure","text":""},{"location":"liberty/core/services/authentication/#successful-response","title":"Successful Response","text":"Field Name Type Description <code>access_token</code> <code>string</code> The generated token for the session. <code>token_type</code> <code>string</code> Type of token, usually <code>\"bearer\"</code>. <code>status</code> <code>\"success\"</code> Indicates authentication was successful. <code>message</code> <code>string</code> Message confirming login success."},{"location":"liberty/core/services/authentication/#failed-response-login-error","title":"Failed Response (Login Error)","text":"Field Name Type Description <code>access_token</code> <code>string</code> Empty, as login failed. <code>token_type</code> <code>string</code> Type of token, usually <code>\"bearer\"</code>. <code>status</code> <code>\"failed\"</code> Indicates authentication failure. <code>message</code> <code>string</code> Error message <code>\"loginError\"</code>."},{"location":"liberty/core/services/authentication/#failed-response-password-error","title":"Failed Response (Password Error)","text":"Field Name Type Description <code>access_token</code> <code>string</code> Empty, as authentication failed. <code>token_type</code> <code>string</code> Type of token, usually <code>\"bearer\"</code>. <code>status</code> <code>\"failed\"</code> Indicates authentication failure. <code>message</code> <code>string</code> Error message <code>\"passwordError\"</code>."},{"location":"liberty/core/services/authentication/#example-usage","title":"Example Usage","text":"<pre><code>import { getToken } from \"liberty-core\";\n\nexport const AuthenticationExample = async () =&gt; {\n  const response = await getToken(\"admin\", \"admin\");\n\n  if (response.status === \"success\") {\n    console.log(\"Access Token:\", response.access_token);\n  } else {\n    console.error(\"Authentication Failed:\", response.message);\n  }\n};\n</code></pre>"},{"location":"liberty/core/services/authentication/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/error-boundary/","title":"ErrorBoundary Component","text":""},{"location":"liberty/core/services/error-boundary/#description","title":"Description","text":"<p>The <code>ErrorBoundary</code> component is a React class component that catches JavaScript errors anywhere in its child component tree. It prevents the entire application from crashing by displaying a fallback UI and logging the error using Sentry.</p>"},{"location":"liberty/core/services/error-boundary/#features","title":"Features:","text":"<ul> <li>Catches errors in the component tree and prevents the app from breaking.</li> <li>Uses Sentry for error reporting when Sentry is available.</li> <li>Provides a customizable fallback UI.</li> <li>Supports React class component lifecycle methods for error handling.</li> </ul>"},{"location":"liberty/core/services/error-boundary/#props","title":"Props","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - Components wrapped inside the boundary. <code>fallback</code> <code>ReactNode</code> - Optional fallback UI when an error occurs."},{"location":"liberty/core/services/error-boundary/#example-usage","title":"Example Usage","text":"<pre><code>import { ErrorBoundary } from \"liberty-core\";\nimport { MyComponent } from \"./MyComponent\";\n\nexport const MyApp = () =&gt; {\n  return (\n    &lt;ErrorBoundary fallback={&lt;div&gt;Something went wrong.&lt;/div&gt;}&gt;\n      &lt;MyComponent /&gt;\n    &lt;/ErrorBoundary&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/error-boundary/#implementation","title":"Implementation","text":"<p>The <code>ErrorBoundary</code> component utilizes React lifecycle methods to catch and handle errors. <pre><code>import { Component, ErrorInfo, ReactNode } from \"react\";\nimport { Div } from \"@ly_styles/Div\";\nimport * as Sentry from \"@sentry/react\";\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component&lt;ErrorBoundaryProps, ErrorBoundaryState&gt; {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_: Error): ErrorBoundaryState {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Error caught by ErrorBoundary:\", error, errorInfo);\n    if (Sentry.getClient()) {\n      Sentry.captureException(error);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || &lt;Div&gt;An unexpected error has occurred.&lt;/Div&gt;;\n    }\n    return this.props.children;\n  }\n}\n</code></pre></p>"},{"location":"liberty/core/services/error-boundary/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/modules/","title":"Modules Configuration","text":""},{"location":"liberty/core/services/modules/#description","title":"Description","text":"<p>The <code>Modules</code> configuration determines which application features are enabled or disabled.</p>"},{"location":"liberty/core/services/modules/#data-structure","title":"Data Structure","text":"Field Name Type Description <code>MODULE_ID</code> <code>string</code> Unique module identifier. <code>MODULE_DESCRIPTION</code> <code>string</code> Description of the module. <code>MODULE_ENABLED</code> <code>boolean</code> Indicates whether the module is active. <code>MODULE_PARAMS</code> <code>JSON</code> Additional configuration for the module."},{"location":"liberty/core/services/modules/#example-usage","title":"Example Usage","text":"<pre><code>import { useAppContext } from \"liberty-core\";\n\nexport const ModulesExample = () =&gt; {\n  const { modulesProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Modules Status&lt;/h2&gt;\n      &lt;ul&gt;\n        {Object.entries(modulesProperties).map(([key, module]) =&gt; (\n          &lt;li key={key}&gt;\n            &lt;strong&gt;{key}&lt;/strong&gt;: {module.enabled ? \"Enabled \u2705\" : \"Disabled \u274c\"}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/modules/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/themes/","title":"Theme Configuration","text":""},{"location":"liberty/core/services/themes/#description","title":"Description","text":"<p>The Theme Configuration in Liberty Core defines the application's primary color scheme, typography, background styles, and dark mode behavior.</p> <p>It provides a dynamic way to override and customize themes using the AppProvider.</p>"},{"location":"liberty/core/services/themes/#theme-structure","title":"Theme Structure","text":""},{"location":"liberty/core/services/themes/#theme-colors","title":"Theme Colors","text":"Key Light Mode Value Dark Mode Value Description <code>primary</code> <code>#1976d2</code> <code>#607d8b</code> Primary brand color. <code>secondary</code> <code>#ff9800</code> <code>#ffc107</code> Secondary accent color. <code>background</code> Light gradient Dark gradient Defines the UI background. <code>color</code> <code>#333333</code> <code>#E1D9D1</code> Default text color."},{"location":"liberty/core/services/themes/#theme-fields","title":"Theme Fields","text":"Field Name Type Description <code>palette.mode</code> <code>\"light\" | \"dark\"</code> Determines the color scheme. <code>palette.primary.main</code> <code>string</code> Primary color. <code>palette.secondary.main</code> <code>string</code> Secondary color. <code>background.default</code> <code>string</code> Main background color. <code>background.loginPage</code> <code>string</code> Background gradient for login page. <code>spacing</code> <code>(factor: number) =&gt; string</code> Function to set spacing. <code>shadows</code> <code>string[]</code> Shadow presets for components."},{"location":"liberty/core/services/themes/#example-usage","title":"Example Usage","text":"<pre><code>import { AppProvider, LYThemeProvider } from \"liberty-core\";\nimport { theme } from \"liberty-core\";\n\nexport const ThemeExample = () =&gt; {\n  return (\n    &lt;AppProvider&gt;\n      &lt;LYThemeProvider customTheme={theme}&gt;\n        &lt;MyApp /&gt;\n      &lt;/LYThemeProvider&gt;\n    &lt;/AppProvider&gt;\n  );\n};\n\nconst MyApp = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Theming with Liberty Core&lt;/h2&gt;\n      &lt;p&gt;The theme is applied dynamically using the theme provider.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/themes/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/translations/","title":"TranslationProvider Component","text":""},{"location":"liberty/core/services/translations/#description","title":"Description","text":"<p>The <code>TranslationProvider</code> is a wrapper for internationalization (i18n) using i18next in the Liberty Framework. It ensures that translations are available across the application.</p>"},{"location":"liberty/core/services/translations/#features","title":"Features","text":"<ul> <li>Uses i18next for managing translations.</li> <li>Provides language switching support.</li> <li>Works seamlessly with the AppProvider.</li> </ul>"},{"location":"liberty/core/services/translations/#props","title":"Props","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - Components wrapped by the translation provider."},{"location":"liberty/core/services/translations/#example-usage","title":"Example Usage","text":"<p>To use the <code>TranslationProvider</code>, wrap it around your application inside ReactDOM.createRoot:</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { AppProvider, TranslationProvider } from \"liberty-core\";\nimport App from \"./App\";\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  &lt;React.StrictMode&gt;\n      &lt;AppProvider useAuth={oidcUseAuth}&gt;\n        &lt;TranslationProvider&gt;\n            &lt;App /&gt;\n        &lt;/TranslationProvider&gt;\n    &lt;/AppProvider&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"liberty/core/services/translations/#notes","title":"Notes","text":"<ul> <li>The <code>TranslationProvider</code> should always wrap the application inside the <code>AppProvider</code> to ensure translations are available globally.</li> <li>It integrates with i18next, and translations can be managed dynamically. `;</li> </ul>"},{"location":"liberty/core/services/translations/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/use-media-query/","title":"useMediaQuery &amp; useDeviceDetection","text":""},{"location":"liberty/core/services/use-media-query/#description","title":"Description","text":"<p>These hooks help in detecting screen sizes and device types for responsive UI design.</p>"},{"location":"liberty/core/services/use-media-query/#usemediaqueryquery-string","title":"<code>useMediaQuery(query: string)</code>","text":"<p>This hook listens to media queries and returns <code>true</code> or <code>false</code> based on the match.</p>"},{"location":"liberty/core/services/use-media-query/#usedevicedetection","title":"<code>useDeviceDetection()</code>","text":"<p>This hook detects if the user is on a mobile or tablet device.</p>"},{"location":"liberty/core/services/use-media-query/#example-usage","title":"Example Usage","text":"<pre><code>import { useMediaQuery, useDeviceDetection } from \"@ly_common/UseMediaQuery\";\nimport { Typography } from \"liberty-core\";\n\nexport const MediaQueryExample = () =&gt; {\n  const isMobile = useMediaQuery(\"(max-width: 600px)\");\n  const isTablet = useMediaQuery(\"(max-width: 960px)\");\n  const isDeviceMobile = useDeviceDetection();\n\n  return (\n    &lt;div&gt;\n      &lt;Typography variant=\"body1\"&gt;\n        {isMobile ? \"\ud83d\udcf1 Mobile View\" : \"\ud83d\udcbb Desktop View\"}\n      &lt;/Typography&gt;\n      &lt;Typography variant=\"body1\"&gt;\n        {isTablet ? \"\ud83d\udcdf Tablet View\" : \"\ud83d\udda5\ufe0f Large Screen\"}\n      &lt;/Typography&gt;\n      &lt;Typography variant=\"body1\"&gt;\n        {isDeviceMobile ? \"\ud83d\udcf1 Mobile Device Detected\" : \"\ud83d\udcbb Not a Mobile Device\"}\n      &lt;/Typography&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/use-media-query/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/users/","title":"Users Configuration","text":""},{"location":"liberty/core/services/users/#description","title":"Description","text":"<p>The <code>Users Configuration</code> defines user profiles within the Liberty Framework. Each user has settings such as their role, status, language, theme, and permissions.</p>"},{"location":"liberty/core/services/users/#data-structure","title":"Data Structure","text":"Field Name Type Description <code>USR_ID</code> <code>string</code> Unique user identifier. <code>USR_PASSWORD</code> <code>string</code> User\u2019s password (hashed or stored securely). <code>USR_NAME</code> <code>string</code> The full name of the user. <code>USR_EMAIL</code> <code>string</code> The user\u2019s email address. <code>USR_STATUS</code> <code>\"Y\" | \"N\"</code> Indicates if the user is active. <code>USR_ADMIN</code> <code>\"Y\" | \"N\"</code> Defines if the user has admin privileges. <code>USR_LANGUAGE</code> <code>string</code> Preferred language of the user. <code>USR_MODE</code> <code>\"dark\" | \"light\"</code> UI theme preference (dark/light mode). <code>USR_READONLY</code> <code>\"Y\" | \"N\"</code> Determines if the user has read-only access. <code>USR_DASHBOARD</code> <code>number | undefined</code> The dashboard assigned to the user. <code>USR_THEME</code> <code>string</code> The theme applied to the user\u2019s UI."},{"location":"liberty/core/services/users/#example-usage","title":"Example Usage","text":"<pre><code>import { useAppContext } from \"liberty-core\";\n\nexport const UsersExample = () =&gt; {\n  const { userProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Current User&lt;/h2&gt;\n      &lt;ul&gt;\n        &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; {userProperties.name}&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; {userProperties.email}&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; {userProperties.theme}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/users/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/nomasx1/admin/global-settings/","title":"Global Settings","text":""},{"location":"liberty/nomasx1/admin/global-settings/#global-settings","title":"Global Settings","text":""},{"location":"liberty/nomasx1/admin/global-settings/#1-applications","title":"1. Applications","text":"<ul> <li>Native connector for JD Edwards (Oracle, DB2 or MS-SQL)</li> <li>Native connector for Oracle Database</li> <li>Native connector for Microsoft Active Directory</li> <li>All databases accessibles with jdbc can be set</li> </ul> <p>Click on add or edit to set a new datasource or modify an existing datasource and follow the wizard</p>"},{"location":"liberty/nomasx1/admin/global-settings/#11-global-settings","title":"1.1. Global Settings","text":"Parameter Description Comments Application ID Unique ID Automatic increment number used in all table joins Application Name Name of your application Application Type Native or custom connector JD Edwards, Database, LDAP, Weblogic, Custom Application Database Type of database Oracle, MySQL, IBM DB2, Microsoft SQL Server, LDAP"},{"location":"liberty/nomasx1/admin/global-settings/#12-connections","title":"1.2. Connections","text":"<p>Some parameters could be hidden depending on the type of the application</p> Parameter Description Comments Host Database server Port Database port Database Service Name Service Name and not SID for Oracle later than 12.2 User Login to database login could have read-only rights but with access to dictionary or catalog Password Password for the user"},{"location":"liberty/nomasx1/admin/global-settings/#13-options","title":"1.3. Options","text":"<p>Parameters differs depending on the type of the application</p>"},{"location":"liberty/nomasx1/admin/global-settings/#131-jd-edwards","title":"1.3.1. JD Edwards","text":"Parameter Description Comments JDE DTA Business Data PRODDTA JDE CTL Control Tables PRODCTL JDE CO Central Objects PD920 JDE SY System Tables SY920 JDE SVM Server Map SVM920 JDE OL Object Librarian OL920 F00950 Security table location (sometimes not in SYSTEM) SY920 Standard Menu (Y/N) Collect Tasks Menus E1 Pages (Y/N) Collect E1 Pages Before Tools Release 9.2 and E1 composite E1 Composite (Y/N) Collect E1 Composite Pages After Tools Release 9.2"},{"location":"liberty/nomasx1/admin/global-settings/#132-database-custom-application","title":"1.3.2. Database / Custom Application","text":"<p>NONE</p>"},{"location":"liberty/nomasx1/admin/global-settings/#133-ldap","title":"1.3.3. LDAP","text":"Parameter Description Comments LDAP Context Search OU=Utilisateurs,DC=nomana-it,DC=fr LDAP Filter Filtering type of object (&amp;(objectClass=user)) LDAP Exclude Exclude node OU=Applications,OU=Utilisateurs,DC=nomana-it,DC=fr"},{"location":"liberty/nomasx1/admin/global-settings/#2-users","title":"2. Users","text":""},{"location":"liberty/nomasx1/admin/global-settings/#3-query","title":"3. Query","text":""},{"location":"liberty/nomasx1/admin/global-settings/#4-dwh","title":"4. DWH","text":""},{"location":"liberty/technical/architecture/","title":"Architecture","text":"<p>This document provides an overview of the functionality and configuration of the services within the Liberty Framework, including Node.js, PostgreSQL, pgAdmin, Airflow, OIDC, and Gitea. These services are integrated with Traefik as a reverse proxy, enabling both HTTP and HTTPS access with automated routing. </p>"},{"location":"liberty/technical/architecture/#1-nodejs-service-liberty-node","title":"1. Node.js Service (<code>liberty-node</code>) \ud83d\udfe2","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-node:latest</code></li> <li>Command: Runs the Node.js app (<code>app.js</code>) on port <code>3002</code>.</li> <li>Security Options: </li> <li>\ud83d\udd12 <code>label:disable</code>: Disables SELinux labels.</li> <li>\u2699\ufe0f <code>cap_drop</code>: Removes unnecessary Linux capabilities like <code>MKNOD</code> and <code>AUDIT_WRITE</code>.</li> <li>Networks: Connected to the <code>liberty-network</code>.</li> <li>Working Directory: <code>/opt/liberty</code></li> <li>Depends on: PostgreSQL (<code>pg</code>) service.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 API Routing: HTTP and HTTPS routing for <code>/api</code> using <code>PathPrefix</code>.</li> <li>\ud83d\udce1 Socket Routing: HTTP and HTTPS routing for <code>/socket</code> and <code>/socket.io</code>.</li> <li>\u269b\ufe0f React Application: Handles HTTP and HTTPS routing for the React app with a middleware for error pages.</li> <li>\ud83d\ude80 Compression: <code>compress-middleware</code> applied to several routes for better performance.</li> <li>\ud83d\udd0c Port Configuration: Node.js runs on port <code>3002</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#2-postgresql-service-liberty-pg","title":"2. PostgreSQL Service (<code>liberty-pg</code>) \ud83d\udc18","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-pg:latest</code></li> <li>Command: Runs the PostgreSQL server with optimized settings for performance:</li> <li><code>shared_buffers=2GB</code></li> <li><code>track_activity_query_size=1MB</code></li> <li><code>work_mem=256MB</code></li> <li><code>maintenance_work_mem=128MB</code></li> <li>Other configurations to optimize WAL size, checkpoint timing, and costs.</li> <li>Volumes: Data stored in the <code>pg-data</code> volume.</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83d\udee0\ufe0f TCP Router: Routes PostgreSQL traffic via <code>db</code> entry point.</li> <li>\ud83d\udd0c Port: Exposed on port <code>5432</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#3-pgadmin-service-liberty-pgadmin","title":"3. pgAdmin Service (<code>liberty-pgadmin</code>) \ud83d\udda5\ufe0f","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-pgadmin:latest</code></li> <li>User: Root privileges enabled.</li> <li>Volumes: pgAdmin data stored in the <code>pgadmin-data</code> volume.</li> <li>Environment: Sets the <code>SCRIPT_NAME=/pgadmin</code> for pgAdmin web access.</li> <li>Depends on: PostgreSQL (<code>pg</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 HTTP Router: Routes requests for <code>/pgadmin</code>.</li> <li>\ud83d\udd0c Port: Exposed on port <code>3003</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#4-airflow-service-liberty-airflow","title":"4. Airflow Service (<code>liberty-airflow</code>) \ud83d\udee0\ufe0f","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-airflow:latest</code></li> <li>Security Options:</li> <li>\ud83d\udd12 Disables SELinux labels.</li> <li>\u2699\ufe0f Drops capabilities <code>MKNOD</code> and <code>AUDIT_WRITE</code>.</li> <li>Volumes: </li> <li>Logs stored in the <code>airflow-logs</code> volume.</li> <li>Depends on: PostgreSQL (<code>pg</code>), Gitea (<code>gitea</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 Routing: Handles HTTP and HTTPS requests for <code>/airflow/home</code>.</li> <li>\u26a0\ufe0f Error Pages Middleware: Applied to both HTTP and HTTPS routes.</li> <li>\ud83d\udd0c Port: Exposed on port <code>8080</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#5-oidc-service-liberty-keycloak","title":"5. OIDC Service (<code>liberty-keycloak</code>) \ud83d\udd10","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-keycloak:latest</code></li> <li>Command: Starts the Keycloak OIDC server with proxy headers and hostname settings.</li> <li>Environment Variables:</li> <li>\ud83d\udd04 <code>PROXY_ADDRESS_FORWARDING</code>: Enables proxy address forwarding.</li> <li>\ud83c\udf0d <code>KC_HOSTNAME_PATH</code> and <code>KC_HTTP_RELATIVE_PATH</code>: Configured to <code>/oidc</code>.</li> <li>Depends on: PostgreSQL (<code>pg</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 HTTP and HTTPS Routing: Routes <code>/oidc</code> requests.</li> <li>\ud83d\udd0c Port: OIDC runs on port <code>9000</code> (Keycloak internally uses port <code>8080</code>).</li> <li>\ud83c\udf0d CORS Middleware: Configures Cross-Origin Resource Sharing (CORS) for all origins and credentials.</li> </ul>"},{"location":"liberty/technical/architecture/#6-gitea-service-liberty-gitea","title":"6. Gitea Service (<code>liberty-gitea</code>) \ud83d\udcc2","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-gitea:latest</code></li> <li>Healthcheck: Ensures service health by checking <code>/</code> endpoint every 30 seconds.</li> <li>Volumes: </li> <li>Configuration and data in <code>liberty-gitea</code>.</li> <li>Restart Policy: Set to <code>unless-stopped</code>.</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 Routing: Routes HTTP requests to <code>/gitea</code>.</li> <li>\ud83d\udee0\ufe0f Middleware: Uses <code>stripprefix</code> to remove <code>/gitea</code> from the path for internal routing.</li> <li>\ud83d\udd0c Port: Exposed on port <code>3000</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#volumes","title":"Volumes \ud83d\uddc3\ufe0f","text":"<ul> <li>node-logs: Stores Logs for backend and frontend.</li> <li>pg-data: Stores PostgreSQL data.</li> <li>pg-logs: Stores Logs for database.</li> <li>pgadmin-data: Stores pgAdmin data.</li> <li>liberty-gitea: Stores gitea config and data.</li> <li>airflow-logs: Stores logs for Airflow.</li> <li>airflow-dags: Stores Dags for Airflow.</li> <li>airflow-plugins: Stores Plugins for Airflow.</li> <li>traefik-certs: Stores Traefik certificates (external).</li> <li>traefik-config: Stores Traefik configuration (external).</li> <li>shared-data: Stores shared data (external).</li> </ul>"},{"location":"liberty/technical/architecture/#networks","title":"Networks \ud83c\udf10","text":"<ul> <li>liberty-network: External network for inter-service communication.</li> </ul> <p>This configuration enables a scalable, containerized microservice architecture with Node.js for application logic, PostgreSQL for database management, pgAdmin for database administration, Airflow for automation, Keycloak OIDC for authentication, and Gitea for file management and versioning. Traefik serves as the reverse proxy, handling routing and applying security middleware for all services.</p>"},{"location":"liberty/technical/installation/","title":"Docker Installation Guide","text":"<p>This guide covers the installation of Docker and Docker Compose on CentOS and Amazon Linux. Follow the respective instructions based on your environment.</p>"},{"location":"liberty/technical/installation/#docker-installation-for-centos","title":"Docker Installation for CentOS","text":""},{"location":"liberty/technical/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>CentOS 8 or higher</li> <li>Root or sudo access</li> <li>Minimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.</li> </ul>"},{"location":"liberty/technical/installation/#step-1-update-system-packages","title":"Step 1: Update System Packages","text":"<p>Before starting the installation, update your system to ensure all packages are up-to-date.</p> <pre><code>sudo yum update -y\n</code></pre> <p>if Podman is installed, remove all packages, artifacts and containers storage</p> <pre><code>yum remove buildah skopeo podman containers-common atomic-registries docker container-tools\nrm -rf /etc/containers/* /var/lib/containers/* /etc/docker /etc/subuid* /etc/subgid*\ncd ~ &amp;&amp; rm -rf /.local/share/containers/\n</code></pre>"},{"location":"liberty/technical/installation/#step-2-install-required-dependencies","title":"Step 2: Install Required Dependencies","text":"<p>Install the necessary packages required to set up the Docker repository.</p> <pre><code>sudo yum install -y yum-utils \n</code></pre>"},{"location":"liberty/technical/installation/#step-3-set-up-the-docker-repository","title":"Step 3: Set Up the Docker Repository","text":"<p>Add the Docker repository to your CentOS system.</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>"},{"location":"liberty/technical/installation/#step-4-install-docker","title":"Step 4: Install Docker","text":"<p>Install Docker Engine, CLI, and Containerd.</p> <pre><code>sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"liberty/technical/installation/#step-5-start-and-enable-docker","title":"Step 5: Start and Enable Docker","text":"<p>Start the Docker service and enable it to start on boot.</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"liberty/technical/installation/#step-6-verify-docker-installation","title":"Step 6: Verify Docker Installation","text":"<p>Verify the installation by running a test Docker container.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>If the container runs and displays a welcome message, Docker is installed correctly.</p>"},{"location":"liberty/technical/installation/#step-7-adding-your-user-to-the-docker-group-optional","title":"Step 7: Adding Your User to the Docker Group (Optional)","text":"<p>To run Docker commands without <code>sudo</code>, add your user to the Docker group.</p> <pre><code>sudo usermod -aG docker $(whoami)\n</code></pre> <p>Log out and log back in to apply the group changes.</p>"},{"location":"liberty/technical/installation/#uninstall-docker","title":"Uninstall Docker","text":"<p>To remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:</p> <pre><code>sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre>"},{"location":"liberty/technical/installation/#docker-installation-for-amazon-linux-os","title":"Docker Installation for Amazon Linux OS","text":""},{"location":"liberty/technical/installation/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Amazon Linux or Amazon Linux 2</li> <li>Root or sudo access</li> <li>Minimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.</li> </ul>"},{"location":"liberty/technical/installation/#step-1-update-system-packages_1","title":"Step 1: Update System Packages","text":"<p>Before starting the installation, update your system to ensure all packages are up-to-date.</p> <pre><code>sudo yum update -y\n</code></pre>"},{"location":"liberty/technical/installation/#step-2-install-docker","title":"Step 2: Install Docker","text":"<p>Install Docker using the Amazon Linux Extras &amp; yum package manager.</p> <pre><code>sudo amazon-linux-extras install docker -y\n</code></pre>"},{"location":"liberty/technical/installation/#step-3-start-and-enable-docker","title":"Step 3: Start and Enable Docker","text":"<p>Start the Docker service and enable it to start on boot.</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"liberty/technical/installation/#step-4-verify-docker-installation","title":"Step 4: Verify Docker Installation","text":"<p>Verify the installation by running a test Docker container.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>If the container runs and displays a welcome message, Docker is installed correctly.</p>"},{"location":"liberty/technical/installation/#step-5-install-docker-compose","title":"Step 5: Install Docker Compose","text":"<p>Download the current stable release of Docker Compose:</p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '\"tag_name\": \"\\K.*?(?=\")')/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n</code></pre> <p>Apply executable permissions to the binary:</p> <pre><code>sudo chmod +x /usr/local/bin/docker-compose\n</code></pre> <p>Verify that the installation was successful:</p> <pre><code>docker-compose --version\n</code></pre>"},{"location":"liberty/technical/installation/#step-6-adding-your-user-to-the-docker-group-optional","title":"Step 6: Adding Your User to the Docker Group (Optional)","text":"<p>To run Docker commands without <code>sudo</code>, add your user to the Docker group.</p> <pre><code>sudo usermod -aG docker $(whoami)\n</code></pre> <p>Log out and log back in to apply the group changes.</p>"},{"location":"liberty/technical/installation/#uninstall-docker_1","title":"Uninstall Docker","text":"<p>To remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:</p> <pre><code>sudo yum remove docker\nsudo rm -rf /var/lib/docker\nsudo rm /usr/local/bin/docker-compose\n</code></pre>"},{"location":"liberty/technical/installation/#post-installation-tasks","title":"Post installation Tasks","text":"<p>If you want to set a custom directory for docker and if you are running behind a proxy, the docker service must be modified</p> <p>Edit the service: /lib/systemd/system/docker.service</p> <pre><code>[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd --data-root &lt;CUSTOM_DIRECTORY&gt; -H fd:// --containerd=/run/containerd/containerd.sock\nExecReload=/bin/kill -s HUP $MAINPID\nTimeoutStartSec=0\nRestartSec=2\nRestart=always\nEnvironment=\"HTTP_PROXY=&lt;PROXY_URL&gt;\"\nEnvironment=\"HTTPS_PROXY=&lt;PROXY_URL&gt;\"\n</code></pre> <p>If you want to change the default IP range (172.17.x.x) for docker Edit the file: /etc/docker/daemon.json</p> <pre><code># Set the ip range according to your requirements\n# bip is for the internal interface\n# default-address-pools is for all new networks\n{\n  \"bip\": \"172.26.0.1/16\",\n  \"default-address-pools\": [\n    { \"base\": \"172.27.0.0/16\", \"size\": 24 }\n  ]\n}\n</code></pre>"},{"location":"liberty/technical/installation/#conclusion","title":"Conclusion","text":"<p>You have successfully installed Docker and Docker Compose on your CentOS or Amazon Linux OS system. You can now begin deploying and managing your Docker containers for Liberty Framework.</p>"},{"location":"liberty/technical/installation/#references","title":"References","text":"<ul> <li>Docker Documentation</li> <li>AWS Documentation</li> </ul>"},{"location":"liberty/technical/liberty-deployment/","title":"Deploying Liberty Framework with Portainer","text":"<p>This guide will walk you through deploying Liberty Framework using Portainer, based on the Compose file located at the following URL: liberty-framework.yml.</p>"},{"location":"liberty/technical/liberty-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure the following prerequisites are met:</p> <ul> <li>You have Docker installed and running on your server. Installation instructions can be found here.</li> <li>You have Portainer installed and running on your server. Installation instructions can be found here.</li> <li>You have access to the Portainer web interface. The URL typically looks like <code>http://your-server-ip:3000</code> or <code>https://your-server-ip:3443</code>.</li> </ul>"},{"location":"liberty/technical/liberty-deployment/#accessing-portainer","title":"Accessing Portainer","text":"<ol> <li> <p>Open a web browser and navigate to the Portainer web interface.</p> </li> <li> <p>Log in with your Portainer credentials.</p> </li> <li> <p>Set a password first time you log into Portainer</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#logging-into-a-custom-registry","title":"Logging into a Custom Registry","text":"<ol> <li> <p>In the Portainer web interface, navigate to <code>Registries</code> from the sidebar.</p> </li> <li> <p>Click on the <code>+ Add registry</code> button.</p> </li> <li> <p>Provide the following details for your custom registry:</p> <ul> <li>Name: A friendly name for your registry.</li> <li>URL: The URL of your custom registry (e.g., <code>ghcr.io/fblettner</code>).</li> <li>Username: Your registry username (this user will be provided by Nomana-IT).</li> <li>Password: Your registry password (this token will be provided by Nomana-IT).</li> </ul> </li> <li> <p>After filling in the details, click on the <code>Add Registry</code> button to save the registry.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#deploy-the-stack","title":"Deploy the Stack","text":"<ol> <li> <p>In the Portainer web interface, navigate to <code>Stacks</code> from the sidebar.</p> </li> <li> <p>Click on the <code>+ Add Stack</code> button.</p> </li> <li> <p>Provide a name for your stack in the <code>Name</code> field.</p> </li> <li> <p>Under the <code>Git repository</code> tab:</p> <ul> <li> <p>Enter the Repository URL:    <pre><code>https://github.com/fblettner/liberty-public\n</code></pre></p> </li> <li> <p>In the Compose path field, specify:   <pre><code>release/latest/liberty-framework.yml\n</code></pre></p> </li> </ul> </li> <li> <p>Scroll down and click on the <code>Deploy the stack</code> button.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#verify-deployment","title":"Verify Deployment","text":"<ol> <li> <p>Once the stack is deployed, navigate to <code>Containers</code> from the sidebar.</p> </li> <li> <p>Verify that the containers listed in the Compose file are running.</p> </li> <li> <p>Access the services through the designated ports to ensure everything is functioning as expected.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#alternative-pull-docker-images-from-terminal","title":"Alternative: Pull Docker Images from Terminal","text":"<p>If you prefer to pull Docker images directly from the terminal, you can do so using the following commands:</p> <ol> <li> <p>Open a terminal and log in to the custom registry:</p> <pre><code>docker login ghcr.io\n</code></pre> <p>When prompted, enter your username and password (token).</p> </li> <li> <p>Pull the required Docker images manually:</p> <pre><code>docker pull ghcr.io/fblettner/liberty-node:latest\ndocker pull ghcr.io/fblettner/liberty-pg:latest\ndocker pull ghcr.io/fblettner/liberty-pgadmin:latest\ndocker pull ghcr.io/fblettner/liberty-rundeck:latest\ndocker pull ghcr.io/fblettner/liberty-keycloak:latest\ndocker pull ghcr.io/fblettner/liberty-filebrowser:latest\n</code></pre> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#steps-for-aws-users","title":"Steps for AWS Users","text":"<p>If you are using AWS and need to connect via AWS CLI, follow these steps:</p> <ol> <li> <p>Configure your AWS CLI:</p> <pre><code>aws configure\n</code></pre> <p>Follow the prompts to enter your AWS Access Key, Secret Access Key, default region name, and output format.</p> </li> <li> <p>Log in to the AWS Elastic Container Registry (ECR):</p> <pre><code>aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin &lt;your-aws-account-id&gt;.dkr.ecr.eu-west-1.amazonaws.com\n</code></pre> <p>Replace <code>&lt;your-aws-account-id&gt;</code> with your actual AWS account ID.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#additional-resources","title":"Additional Resources","text":"<ul> <li>Portainer Documentation</li> <li>Docker Compose Documentation</li> <li>GitHub Repository - liberty-framework.yml</li> </ul> <p>By following this guide, you should be able to deploy Liberty Framework using Portainer seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.</p>"},{"location":"liberty/technical/liberty-deployment/#summary","title":"Summary","text":"<p>URLs: - Web Application: <code>/</code> - API: <code>/api</code> - PgAdmin: <code>/pgadmin</code> - Rundeck: <code>/rundeck</code> - OIDC: <code>/oidc</code> - Filebrowser: <code>/filebrowser</code></p> <p>Services: - node: ghcr.io/fblettner/liberty-node:latest (Port 3002) - pg: ghcr.io/fblettner/liberty-pg:latest (Port 5432) - pgadmin: ghcr.io/fblettner/liberty-pgadmin:latest (Port 3003) - rundeck: ghcr.io/fblettner/liberty-rundeck:latest (Port 4440) - oidc: ghcr.io/fblettner/liberty-keycloak:latest (Port 8080) - filebrowser: ghcr.io/fblettner/liberty-filebrowser:latest (Port 80)</p> <p>Details of all Liberty Framework Services can be found here.</p>"},{"location":"liberty/technical/linux-services/","title":"Creating Systemd Services for Docker Compose","text":"<p>This guide will walk you through creating systemd services to manage your Docker Compose deployments. This ensures that your services start automatically on boot and can be managed easily using standard systemd commands.</p>"},{"location":"liberty/technical/linux-services/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure the following prerequisites are met:</p> <ul> <li>You have Docker and Docker Compose installed on your server.</li> <li>You have completed the deployment steps for Liberty Framework using Docker Compose.</li> </ul>"},{"location":"liberty/technical/linux-services/#creating-the-systemd-service-for-admin-tools","title":"Creating the Systemd Service for Admin Tools","text":"<ol> <li> <p>Create a service file for <code>docker-admin</code>:</p> <pre><code>sudo nano /etc/systemd/system/docker-admin.service\n</code></pre> </li> <li> <p>Paste the following content into the file:</p> <pre><code>[Unit]\nDescription=Liberty Admin Tools Service\nPartOf=docker.service\nAfter=docker.service\n\n[Service]\nType=simple\nRemainAfterExit=true\nWorkingDirectory=/app/liberty-admin/\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml start\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml stop\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"liberty/technical/linux-services/#creating-the-systemd-service-for-liberty-framework","title":"Creating the Systemd Service for Liberty Framework","text":"<ol> <li>Open a terminal.</li> <li> <p>Create a new directory:     <pre><code>mkdir -p /app/liberty-framework\ncd /app/liberty-framework\n</code></pre></p> </li> <li> <p>Download the Docker Compose file from the provided URL, Using <code>curl</code>:     <pre><code>curl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-framework.yml\n</code></pre></p> </li> <li> <p>Create a service file for <code>docker-liberty</code>:</p> <pre><code>sudo nano /etc/systemd/system/docker-liberty.service\n</code></pre> </li> <li> <p>Paste the following content into the file:</p> <pre><code>[Unit]\nDescription=Liberty Framework Service\nPartOf=docker.service\nAfter=docker.service\n\n[Service]\nType=simple\nRemainAfterExit=true\nWorkingDirectory=/app/liberty/\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-framework/docker-compose.yml start\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-framework/liberty-compose.yaml stop\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"liberty/technical/linux-services/#enabling-and-starting-the-services","title":"Enabling and Starting the Services","text":"<ol> <li> <p>Enable the created services to start on boot:</p> <pre><code>sudo systemctl enable docker-liberty.service\nsudo systemctl enable docker-admin.service\n</code></pre> </li> <li> <p>Start the services immediately:</p> <pre><code>sudo systemctl start docker-liberty.service\nsudo systemctl start docker-admin.service\n</code></pre> </li> <li> <p>Check the status of the services to ensure they are running:</p> <pre><code>sudo systemctl status docker-liberty.service\nsudo systemctl status docker-admin.service\n</code></pre> </li> </ol>"},{"location":"liberty/technical/linux-services/#additional-resources","title":"Additional Resources","text":"<ul> <li>Systemd Documentation</li> <li>Docker Documentation</li> <li>Docker Compose Documentation</li> </ul> <p>By following this guide, you should be able to create and manage systemd services for your Docker Compose deployments seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.</p>"},{"location":"liberty/technical/post-ssl/","title":"Enable SSL with Traefik","text":"<p>By default, SSL is enabled with a self signed certificate. You have to copy your own certificates according to your domain</p>"},{"location":"liberty/technical/post-ssl/#prerequisites","title":"Prerequisites:","text":"<ul> <li><code>mkcert</code> installed to create a new self-signed certificate.</li> <li>Certificates for your domain</li> </ul>"},{"location":"liberty/technical/post-ssl/#step-1-copy-your-certificates-files","title":"Step 1: Copy your certificates files","text":"<ol> <li> <p>Copy your certificates files to the server hosting Liberty Framework</p> </li> <li> <p>Transfer you certificate to the Docker container <pre><code>docker cp &lt;your_certificate_directory&gt;/cert.pem traefik:/etc/certs/cert.pem\ndocker cp &lt;your_certificate_directory&gt;/key.pem traefik:/etc/certs/key.pem\n</code></pre></p> </li> </ol> <p>Final Administrator Note: Certificates must be transferred to the Docker container with each renewal</p>"},{"location":"liberty/technical/post-ssl/#step2-create-a-self-signed-certificate-optional","title":"Step2: Create a self-signed certificate (optional)","text":"<ol> <li> <p>Connect to the server hosting Liberty Framework</p> </li> <li> <p>Create a new self signed certificate <pre><code>mkcert -key-file ./certs/key.pem -cert-file ./certs/cert.pem '&lt;server_name&gt;'\n</code></pre></p> </li> <li> <p>Transfer you certificate to the Docker container <pre><code>docker cp ./certs/cert.pem traefik:/etc/certs/cert.pem\ndocker cp ./certs/key.pem traefik:/etc/certs/key.pem\n</code></pre></p> </li> </ol> <p>Final Administrator Note: After updating both files, it is required to restart the Traefik service to apply the new settings.</p>"},{"location":"liberty/technical/tools-deployment/","title":"Deploying Installation Tools with Docker Compose","text":""},{"location":"liberty/technical/tools-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, ensure you have the following installed on your system:</p> <ol> <li>Docker and Docker Compose: Installation instructions can be found here.</li> <li>Git: Installation instructions can be found here.</li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-1-logging-into-docker","title":"Step 1: Logging into Docker","text":"<p>To access a private Docker registry, you'll need to authenticate with your Docker credentials.</p> <ol> <li>Log in to Docker:     <pre><code>docker login\n</code></pre>     Follow the prompts to enter your Docker username and password.</li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-2-create-a-directory-for-deployment","title":"Step 2: Create a Directory for Deployment","text":"<p>Create a directory where you will download and store the Docker Compose file.</p> <ol> <li>Open a terminal.</li> <li>Create a new directory:     <pre><code>mkdir -p /app/liberty-admin\ncd /app/liberty-admin\n</code></pre></li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-3-download-the-docker-compose-file","title":"Step 3: Download the Docker Compose File","text":"<p>Next, download the Docker Compose file from the provided URL.</p> <ol> <li> <p>Using <code>curl</code>:     <pre><code>curl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n</code></pre></p> </li> <li> <p>Alternatively, using <code>wget</code>:     <pre><code>wget -O docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n</code></pre></p> </li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-4-deploy-the-docker-container-using-docker-compose","title":"Step 4: Deploy the Docker Container using Docker Compose","text":"<p>Once you have the <code>docker-compose.yml</code> file downloaded into your <code>liberty-admin</code> directory, use Docker Compose to deploy the container.</p> <ol> <li> <p>In the terminal, navigate to the <code>liberty-admin</code> directory (if not already there):     <pre><code>cd /app/liberty-admin\n</code></pre></p> </li> <li> <p>Deploy the Docker container:     <pre><code>docker-compose up -d\n</code></pre></p> </li> </ol> <p>This command will pull the necessary images from the registry (if they are not already available locally) and start the containers in detached mode.</p>"},{"location":"liberty/technical/tools-deployment/#step-5-verify-the-deployment","title":"Step 5: Verify the Deployment","text":"<p>To ensure the deployment is successful, you can check the status of the containers.</p> <ol> <li>List the running containers:     <pre><code>docker ps\n</code></pre></li> </ol> <p>You should see the following containers running as defined in the <code>docker-compose.yml</code> file:</p> <ul> <li>traefik: This service is managing routing and load balancing, and exposes several endpoints for web (port 3000), websecure (port 3443), dashboard (port 8080), and database (port 5432).</li> <li>portainer: This service provides a UI for managing Docker environments, accessible via paths prefixed with <code>/portainer</code>.</li> <li>error-pages: This service handles error pages and is available to respond to general HTTP requests.</li> </ul>"},{"location":"liberty/technical/tools-deployment/#summary-of-commands","title":"Summary of Commands","text":"<pre><code># Log in to Docker\ndocker login\n\n# Create and navigate to the admin directory\nmkdir -p /app/liberty-admin\ncd /app/liberty-admin\n\n# Download the Docker Compose file\ncurl -L -o docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n# or using wget\nwget -O docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n\n# Deploy the Docker container\ndocker-compose up -d\n</code></pre>"},{"location":"liberty/technical/tools-deployment/#accessing-services","title":"Accessing Services","text":"<p>After deployment, you can access the services with the following URLs:</p> <ul> <li>Traefik Dashboard: Accessible at http://<code>&lt;your_server_ip&gt;</code>:8080/dashboard/ (authentication may be required).</li> <li>Portainer: Accessible at http://<code>&lt;your_server_ip&gt;</code>:3000/portainer or https://<code>&lt;your_server_ip&gt;</code>:3443/portainer.</li> </ul> <p>Replace <code>&lt;your_server_ip&gt;</code> with the IP address or hostname of your server. Feel free to reach out if you have any further questions or run into any issues!</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/jd-edwards/","title":"JD Edwards","text":""},{"location":"blog/category/mkdocs-materials/","title":"MkDocs Materials","text":""},{"location":"blog/category/oracle/","title":"Oracle","text":""}]}