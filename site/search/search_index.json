{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NOMANA-IT - Documentation, Blog and Resources","text":""},{"location":"#knowledge-base","title":"Knowledge base","text":"<p>Information about our products and services with targeted solutions, getting started guides, and content for advanced use cases.</p> <p>LIBERTY API BLOG</p>"},{"location":"#open-source-projects","title":"Open source projects","text":"<p>All public repositories developed by NOMANA-IT</p> <p>Github Repository</p>"},{"location":"#liberty-framework","title":"Liberty Framework","text":"<p>Welcome to Liberty Framework, a no-code development platform designed for rapid and efficient web application creation using the latest in React, Node.js, and PostgreSQL technologies. Whether you're a developer or a non-technical user, Liberty Framework empowers you to build robust applications with zero coding skills required.</p> <p>Online Demo</p> <pre><code>Login = demo\nPassword = demo\nAppplication = LIBERTY, NOMASX-1 and NOMAJDE\n</code></pre>"},{"location":"#company-website","title":"Company Website","text":"<p>Company specialized in consulting, integration and development.</p> <p>NOMANA-IT</p>"},{"location":"api/getting-started/","title":"Open source API for JD Edwards and BI Publisher","text":""},{"location":"api/getting-started/#jd-edwards","title":"JD Edwards","text":"<p>Oracle\u2019s JD Edwards EnterpriseOne is an integrated applications suite of comprehensive enterprise resource planning software that combines business value, standards-based technology, and deep industry experience into a business solution with a low total cost of ownership.</p> <p>Export XML source or PDF Output from JD Edwards BLOB fields</p> <p>Export source code for BSFN from JD Edwards BLOB field (F98780R)</p>"},{"location":"api/getting-started/#bi-publisher","title":"BI Publisher","text":"<p>Oracle BI Publisher is the reporting solution to author, manage, and deliver all your reports and documents easier and faster than traditional reporting tools.</p> <p>Simple JAVA CLASS to encode string and display barcode 128 with BI Publisher RTF template</p> <p>JAVA package with Oracle BI Publisher API</p>"},{"location":"api/bip-api/nomabc/","title":"NOMABC - Barcode 128 for BI Publisher","text":"<p>Download Built with VSCode and JDK 11</p>"},{"location":"api/bip-api/nomabc/#1-modify-xdocfg","title":"1. Modify xdo.cfg","text":"<p>Add the line below to declare the truetype font. The font is delivered into the dist directory. (Thanks to GrandZebu for explanation and font : http://grandzebu.net/informatique/codbar/code128.htm)</p> <pre><code>&lt;font family=\"Code 128z\" style=\"normal\" weight=\"normal\"&gt;&lt;truetype path=\"d:/BIP/java/fonts/code128z.TTF\"/&gt;&lt;/font&gt;\n</code></pre>"},{"location":"api/bip-api/nomabc/#2-declaration-of-a-custom-function-into-a-rtf-template","title":"2. Declaration of a custom function into a RTF Template","text":"<p>Add a field into the template and set the property like this</p> <pre><code>&lt;?register-barcode-vendor:'nomabc.BarcodeUtil';'NOMANA\u2019?&gt;\n</code></pre> <p></p>"},{"location":"api/bip-api/nomabc/#3-convert-into-barcode-128","title":"3. Convert into BarCode 128","text":"<p>Add the field with the value to convert and modify the property with the following script</p> <pre><code>&lt;?format-barcode:DataBarreCode;'code128';'NOMANA\u2019?&gt;\n</code></pre> <p></p>"},{"location":"api/bip-api/nomabc/#4-display-barcode","title":"4. Display BarCode","text":"<p>Modify the font for the field in RTF with and select \"Code 128z\". If the truetype is not declared into Windows fonts, you will not see the font but you can simply modify it by typing the font name as screenshot below</p> <p></p>"},{"location":"api/bip-api/nomabip/","title":"NOMABIP - Java package with Oracle BI Publisher API","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/bip-api/nomabip/#1-functionalities","title":"1. Functionalities","text":"<p>This API was initially developed to integrate easily JD Edwards and BI Publisher, regardless of JD Edwards Tools Release.</p> <p>Nothing to install, only to use. Sample scripts are provided in the <code>test</code> directory. It can now be used for any spool with or without JD Edwards (BI Publisher license is needed).</p>"},{"location":"api/bip-api/nomabip/#features","title":"Features:","text":"<ul> <li>Generate PDF and XML files simultaneously from a XML spool.</li> <li>Burst or single mode for flexible processing.</li> <li>Configure the number of CPUs for parallel processing and performance improvements.</li> <li>Add Ghostscript for enhanced PDF compatibility.</li> <li>Document indexation and error tracking in an Oracle Database (optional).</li> <li>Integrate the Java class NOMABC to print Barcode 128 (see GitHub repository).</li> </ul>"},{"location":"api/bip-api/nomabip/#2-global-settings","title":"2. Global Settings","text":"Parameter Description cmdGS Call ghostscript to transform PDF after generation (ie, version 1.6 to 1.5) runGS Call GS script Y/N xdo Settings for fonts, subtemplate directory... appHome Running script directory burstOutput Output directory for bursting documents singleOutput Output directory for single mode processHome Process directory dirOutput Temp Output directory copyXSL XSL transformation to generate copies routageXSL Used for JD Edwards to copy back into the Printqueue updateDB Update Oracle database (Y/N) with index and logs"},{"location":"api/bip-api/nomabip/#3-template-settings","title":"3. Template Settings","text":"<p>Set template location, ID of fields used to name the output document in case of bursting and mandatory fields when update database is on.</p>"},{"location":"api/bip-api/nomabip/#4-usage","title":"4. Usage","text":"<ul> <li>Simple java application to configure and generate documents <pre><code>java -jar ../dist/nomabip.jar -config ./config/config.properties\n</code></pre></li> <li>Encrypt password for config file <pre><code>java -jar ../dist/nomabip.jar -password &lt;PASSWORD&gt;\n</code></pre></li> <li>Generate documents <pre><code>java -jar ../dist/nomabip.jar -run ./config/config.properties &lt;TEMPLATE&gt; &lt;DOCUMENT_NAME&gt; &lt;MODE&gt; &lt;DOCUMENT_ID&gt; \n</code></pre></li> </ul>"},{"location":"api/bip-api/nomabip/#5-screenshot","title":"5. Screenshot","text":""},{"location":"api/jde-api/jdebip/","title":"JDEBIP - Export XML source or PDF Output from JD Edwards BLOB fields","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/jde-api/jdebip/#1-functionalities","title":"1. Functionalities","text":"<ul> <li>Export XML source or PDF Output from JD Edwards BLOB fields</li> </ul>"},{"location":"api/jde-api/jdebip/#2-settings","title":"2. Settings","text":"<p>This class can be used to export blob column for BI Publisher from JD Edwards Database. This class can be extended to export BLOB for all tables.</p> Parameter Description URL JDBC String for database connection USER User to login into the database PASSWORD Password to login into the database OutputDirectory Output directory for files exported from blob field XML SQL Query to get XML source PDF SQL Query to get PDF output REMOVE_RD If you need to retrieve batch from PrintQueue, record should be deleted DELETE_F9563110 SQL query to delete record into F9563110 DELETE_F95630 SQL query to delete record into F95630"},{"location":"api/jde-api/jdebip/#3-usage","title":"3. Usage","text":"<ul> <li>Extract XML Source <pre><code>java -cp ../dist/nomajde.jar jdebip XML &lt;OBJECT_NAME&gt; &lt;VERSION&gt; &lt;LANGUAGE&gt; &lt;JOB_NUMBER&gt;\n</code></pre></li> <li>Extract PDF output\\ <pre><code>java -cp ../dist/nomajde.jar jdebip PDF &lt;OBJECT_NAME&gt; &lt;VERSION&gt; &lt;LANGUAGE&gt; &lt;JOB_NUMBER&gt;\n</code></pre></li> </ul>"},{"location":"api/jde-api/jdebsfn/","title":"JDEBSN - Export source code for BSFN from JD Edwards BLOB field (F98780R)","text":"<p>Download Built with VSCode and JDK 1.8</p>"},{"location":"api/jde-api/jdebsfn/#1-functionalities","title":"1. Functionalities","text":"<ul> <li>Export source code for BSFN from JD Edwards BLOB field (F98780R)</li> </ul>"},{"location":"api/jde-api/jdebsfn/#2-settings","title":"2. Settings","text":"<p>This class can be used to export blob column for BSFN from JD Edwards Database. This class can be extended to export BLOB for all tables.</p> Parameter Description URL JDBC String for database connection USER User to login into the database PASSWORD Password to login into the database OutputDirectory Output directory for files exported from blob field F98780R SQL Query to get source code for BSFN"},{"location":"api/jde-api/jdebsfn/#3-usage","title":"3. Usage","text":"<ul> <li>Extract source code\\ <pre><code>java -cp ../dist/nomajde.jar jdebsfn F98780R &lt;BSFN_OR_TABLE&gt;\n</code></pre></li> </ul>"},{"location":"blog/","title":"Articles","text":""},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/","title":"Setting Up a JD Edwards EnterpriseOne Trial Instance on Oracle Cloud","text":"<p>JD Edwards EnterpriseOne is a comprehensive ERP solution, and Oracle provides an easy way to deploy a trial instance via the Oracle Cloud Marketplace. This guide walks you through the steps to set up the JD Edwards EnterpriseOne Trial Edition.</p> <p>The URL for accessing our Demo platform for JD Edwards EnterpriseOne and Studio are as follows:</p> <ul> <li>EnterpriseOne: https://132.145.35.251:8080/jde/owhtml</li> <li>Studio: https://132.145.35.251:7077/studio</li> <li>Server Manager: https://132.145.35.251:8998/manage</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#login-credentials","title":"Login Credentials","text":"<p>Use the following credentials to access the instance: <pre><code># Login Credentials\nUser: demo\nPassword: nomana\n</code></pre></p>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following:</p> <ul> <li>Oracle Cloud Account: An active subscription or free tier account with Oracle Cloud Infrastructure (OCI).</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#steps-to-deploy-the-jd-edwards-trial-edition","title":"Steps to Deploy the JD Edwards Trial Edition","text":""},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#1-access-the-oracle-cloud-marketplace","title":"1. Access the Oracle Cloud Marketplace","text":"<ol> <li>Go to the Oracle Cloud Marketplace.</li> <li>Search for JD Edwards EnterpriseOne Trial Edition.</li> <li>Open the listing to view detailed information.</li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#2-deploy-the-application","title":"2. Deploy the Application","text":"<ol> <li>Click the Get App button on the listing page.</li> <li>Log in with your Oracle Cloud Single Sign-On credentials.</li> <li>Accept the Oracle Cloud Marketplace Terms of Service.</li> <li>Select your OCI compartment and click Launch Instance.</li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#3-configure-the-instance","title":"3. Configure the Instance","text":"<ol> <li>Instance Details:<ul> <li>Enter a name for your instance.</li> <li>Select the compartment where the instance will reside.</li> </ul> </li> </ol> <ol> <li>Compute Shape:<ul> <li>Choose a shape, such as <code>VM.Standard2.4</code>, that provides sufficient resources.</li> </ul> </li> </ol> <ol> <li>Networking:<ul> <li>Select an existing Virtual Cloud Network (VCN) and subnet or create a new one.</li> <li>Assign a public IP address for external access.</li> </ul> </li> <li>SSH Keys:<ul> <li>Download SSH Key or upload your public SSH key to enable secure access to the instance.</li> </ul> </li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#4-launch-the-instance","title":"4. Launch the Instance","text":"<ul> <li>Review all configuration settings.</li> <li>Click Create to launch the instance.</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#5-access-the-jd-edwards-environment","title":"5. Access the JD Edwards Environment","text":"<ol> <li>Once the instance is running, connect to it via SSH:     <pre><code>ssh -i &lt;path_to_private_key&gt; opc@&lt;instance_public_ip&gt;\n</code></pre></li> </ol> <p>Follow the assistant to enter all informations related to the instance (port, password)</p> <p></p> <ol> <li> <p>Open a web browser and navigate to the JD Edwards EnterpriseOne interface using the public IP address and port (default: <code>8080</code>).</p> <p>Example URL: <pre><code>http://&lt;instance_public_ip&gt;:8080\n</code></pre></p> </li> <li> <p>Log in with the default credentials or any credentials provided during setup.</p> </li> </ol>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#additional-resources","title":"Additional Resources","text":"<ul> <li>JD Edwards EnterpriseOne Trial Edition - Oracle Cloud Marketplace</li> <li>Oracle Cloud Infrastructure Documentation</li> </ul>"},{"location":"blog/2024/11/26/setting-up-a-jd-edwards-enterpriseone-trial-instance-on-oracle-cloud/#next-steps","title":"Next Steps","text":"<p>After successfully deploying the trial instance, you can explore JD Edwards EnterpriseOne features such as:</p> <ul> <li>Configuring modules for your business needs.</li> <li>Testing integrations with other Oracle Cloud applications.</li> <li>Evaluating its scalability and performance in the cloud.</li> </ul> <p>For further assistance, refer to the official documentation or consult Oracle support.</p>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/","title":"Installing and Deploying MkDocs Material with GitHub Pages","text":"<p>This guide explains how to install and deploy MkDocs Material for creating beautiful documentation sites. It also includes steps to automate deployment to GitHub Pages.</p>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#whats-included-in-the-site","title":"What's Included in the Site","text":"<p>The provided MkDocs Material configuration is designed to support a comprehensive documentation site with the following features:</p> <ul> <li> <p>Navigation:</p> <ul> <li>Multi-level navigation with tabs and collapsible sections.</li> <li>Support for documentation, guides, blog posts, API references, and release notes.</li> </ul> </li> <li> <p>Customization:</p> <ul> <li>Custom logo and favicon.</li> <li>Light and dark themes with a toggle switch.</li> <li>Customizable color palettes to match your branding.</li> </ul> </li> <li> <p>Enhanced User Experience:</p> <ul> <li>Instant navigation with prefetching for fast transitions.</li> <li>Sticky top navigation for ease of access.</li> <li>Copy button for code snippets to improve developer productivity.</li> </ul> </li> <li> <p>Plugins:</p> <ul> <li><code>awesome-pages</code>: Automatically organizes navigation based on folder structure.</li> <li><code>minify</code>: Optimizes site assets for faster loading.</li> <li><code>blog</code>: Supports structured and visually appealing blog posts.</li> <li><code>search</code>: Integrated full-text search for quick access to content.</li> </ul> </li> <li> <p>Content Types:</p> <ul> <li>Documentation sections for getting started, installation guides, and tutorials.</li> <li>Blog posts with structured navigation and metadata.</li> </ul> </li> <li> <p>Technical Enhancements:</p> <ul> <li>Cookie consent settings to comply with privacy policies.</li> <li>CSP (Content Security Policy) meta tag for enhanced security.</li> <li>Custom CSS and JavaScript to further tailor the site's appearance and functionality.</li> </ul> </li> </ul>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#repository-features","title":"Repository Features","text":"<p>The repository includes:</p> <ol> <li>A complete <code>mkdocs.yml</code> configuration with navigation, theme, and plugin settings.</li> <li>A <code>docs/</code> directory with pre-structured files and folders for easy customization.</li> <li>Workflow configuration (<code>.github/workflows/deploy.yml</code>) to automate deployment to GitHub Pages.</li> <li>Sample blog posts, API documentation, and guides to demonstrate how to structure content.</li> <li>Custom assets for branding, including a logo and favicon.</li> </ol> <p>By cloning this repository, you can start with a fully functional MkDocs Material site and focus on adding your content instead of setting up the structure.</p>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-1-prerequisites","title":"Step 1: Prerequisites","text":"<p>Before starting, ensure you have the following: - Python 3.x installed (verify with <code>python --version</code>).</p> <ul> <li> <p>pip installed (verify with <code>pip --version</code>).</p> </li> <li> <p>A GitHub repository to host your documentation.</p> </li> <li> <p>Git configured locally with a GitHub personal access token if needed.</p> </li> </ul>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-2-install-mkdocs-material","title":"Step 2: Install MkDocs Material","text":"<ol> <li> <p>Create a Virtual Environment (optional but recommended):    <pre><code>python -m venv venv\nsource venv/bin/activate # On Windows, use venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install MkDocs Material:    <pre><code>pip install mkdocs-material\n</code></pre></p> </li> <li> <p>Verify Installation:    <pre><code>mkdocs --version\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-3-create-the-mkdocs-project","title":"Step 3: Create the MkDocs Project","text":"<ol> <li> <p>Create a New MkDocs Project:    <pre><code>mkdocs new my-project\ncd my-project\n</code></pre></p> </li> <li> <p>Edit the <code>mkdocs.yml</code> File:    Replace the default configuration with the following:</p> </li> </ol> <pre><code>site_name: Your Site Name\nsite_url: Your Site URL\n\ntheme:\n  name: material\n  logo: assets/your_logo.png\n  favicon: assets/your_logo.png\n  custom_dir: overrides\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      primary: blue grey\n      accent: amber\n      scheme: default\n      toggle:\n        icon: material/weather-night\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      primary: blue grey\n      accent: amber\n      scheme: slate\n      toggle:\n        icon: material/weather-sunny\n        name: Switch to light mode   \n  features:\n    - content.code.copy     \n    - navigation.instant\n    - navigation.tabs\n    - navigation.path\n    - navigation.top\n    - navigation.footer\n    - header.autohide\n\n# example of navigation\nnav:\n  - Home: index.md\n  - Liberty:\n      - Getting Started: liberty/getting-started.md\n      - Installation:\n        - Architecture: liberty/technical/architecture.md\n        - Docker Installation Guide: liberty/technical/installation.md\n        - Installation Tools Deployment Guide: liberty/technical/tools-deployment.md\n        - Liberty Deployment Guide: liberty/technical/liberty-deployment.md\n        - Create Linux Services: liberty/technical/linux-services.md\n        - Enable SSL with Traefik: liberty/technical/post-ssl.md    \n  - Blog:\n    - blog/index.md\n\nplugins:\n  - search\n  - awesome-pages\n  - minify\n  - blog\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: your social link for github\n    - icon: fontawesome/brands/linkedin\n      link: your social link for linkedin          \n  meta:\n      - name: Content-Security-Policy\n        value: frame-ancestors 'self' https://giscus.app;      \n  consent:\n    title: Cookie consent\n    actions:\n      - accept\n      - manage\n      - reject\n    description: &gt;- \n      We use cookies to recognize your repeated visits and preferences,\n      as well as to measure the effectiveness of our documentation.\n  markdown_extensions:\n    - attr_list\n    - pymdownx.highlight:\n        anchor_linenums: true\n        linenums: true\n        line_spans: __span\n        pygments_lang_class: true\n    - pymdownx.inlinehilite\n    - pymdownx.snippets\n    - pymdownx.superfences\nextra_css:\n  - css/custom.css\nextra_javascript:\n  - js/extra.js  \ncopyright: &gt;\n  Copyright &amp;copy; 2024 Nomana-IT \u2013\n  &lt;a href=\"#__consent\"&gt;Change cookie settings&lt;/a&gt;\n</code></pre> <ol> <li>Add Your Documentation Files:    Organize your files under the <code>docs/</code> folder as per the navigation structure defined in the <code>mkdocs.yml</code>.</li> </ol>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#step-4-deploy-to-github-pages","title":"Step 4: Deploy to GitHub Pages","text":"<ol> <li>Set Up GitHub Actions:    Add the following configuration in <code>.github/workflows/deploy.yml</code>:</li> </ol> <pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material mkdocs-awesome-pages-plugin mkdocs-minify-plugin\n      - run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>Push Your Changes:    Commit and push your project to the <code>main</code> branch of your GitHub repository:    <pre><code>git add .\ngit commit -m \"Initial documentation setup\"\ngit push origin main\n</code></pre></p> </li> <li> <p>Access Your Site:    After GitHub Actions finish deploying, your site will be live at:    <pre><code>https://&lt;your-github-username&gt;.github.io/&lt;repository-name&gt;/\n</code></pre></p> </li> </ol>"},{"location":"blog/2024/11/26/installing-and-deploying-mkdocs-material-with-github-pages/#conclusion","title":"Conclusion","text":"<p>Your MkDocs Material documentation is now installed and deployed with GitHub Pages! This workflow ensures automated deployment and a professional look for your documentation site.</p>"},{"location":"blog/2024/11/21/locks-management/","title":"Locks Management","text":""},{"location":"blog/2024/11/21/locks-management/#1-gather-locks-for-current-session","title":"1. Gather locks for current session","text":"<pre><code>SELECT\n  (select username || ' - ' || osuser from v$session where sid=a.sid) blocker,\n  a.sid || ', ' || (select serial# from v$session where sid=a.sid) sid_serial,\n ' is blocking ',\n  (select username || ' - ' || osuser from v$session where sid=b.sid) blockee,\n  b.sid || ', ' || (select serial# from v$session where sid=b.sid) sid_serial\nFROM \n  v$lock a, v$lock b\nWHERE \n  a.block = 1\n  AND b.request &gt; 0\n  AND a.id1 = b.id1\n  AND a.id2 = b.id2;\n</code></pre>"},{"location":"blog/2024/11/21/database-size/","title":"Database size","text":""},{"location":"blog/2024/11/21/database-size/#1-full-size-of-the-database","title":"1. Full size of the database","text":"<pre><code>SELECT  SUM(bytes/1024/1024/1024) FROM dba_segments \n</code></pre>"},{"location":"blog/2024/11/21/database-size/#2-size-by-tablespace","title":"2. Size by tablespace","text":"<pre><code>SELECT  OWNER, SUM(bytes/1024/1024/1024) FROM dba_segments \nGROUP BY owner\norder BY owner;\n</code></pre>"},{"location":"blog/2024/11/21/database-size/#3-fragmented-space-for-a-schema","title":"3. Fragmented space for a schema","text":"<pre><code>SELECT \n  table_name,avg_row_len,round(((blocks*16/1024)),2)||'MB' \"TOTAL_SIZE\",\n  round((num_rows*avg_row_len/1024/1024),2)||'Mb' \"ACTUAL_SIZE\",\n  round(((blocks*16/1024)-(num_rows*avg_row_len/1024/1024)),2) ||'MB' \"FRAGMENTED_SPACE\",\n  round((round(((blocks*16/1024)-(num_rows*avg_row_len/1024/1024)),2)/round(((blocks*16/1024)),2))*100,2) \"percentage\"\nFROM \n  all_tables \nWHERE \n  owner='&lt;OWNER&gt;' \n  AND blocks&gt;0;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/","title":"Transport SQL profile from one base to another","text":""},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#1-list-all-profiles-to-retrieve-the-profile-name","title":"1. List all profiles to retrieve the profile name","text":"<pre><code>SELECT * FROM DBA_SQL_PROFILES;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#2-create-table-with-dbms-to-export-profile","title":"2. Create table with DBMS to export profile","text":"<pre><code>BEGIN\n  DBMS_SQLTUNE.CREATE_STGTAB_SQLPROF (\n    table_name  =&gt; 'TMP_SQL_PROFILES'\n,   schema_name =&gt; 'SYSTEM'\n);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#3-export-profile-to-the-temporary-table","title":"3. Export profile to the temporary table","text":"<p><pre><code>BEGIN\n  DBMS_SQLTUNE.PACK_STGTAB_SQLPROF (\n    profile_name         =&gt; 'SYS_SQLPROF_02701ab7b57c0000'\n,   staging_table_name   =&gt; 'TMP_SQL_PROFILES'\n,   staging_schema_owner =&gt; 'SYSTEM'\n);\nEND;\n</code></pre> Export/Import this table between both databases</p>"},{"location":"blog/2024/11/21/transport-sql-profile-from-one-base-to-another/#4-import-profile-from-temporay-table-in-the-target-database","title":"4. Import profile from temporay table in the target database","text":"<pre><code>BEGIN\n  DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(\n     replace            =&gt; true\n,    staging_table_name =&gt; 'TMP_SQL_PROFILES'\n);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/statistics-management/","title":"Statistics Management","text":""},{"location":"blog/2024/11/21/statistics-management/#1-gather-statistics-for-a-table","title":"1. Gather statistics for a table","text":"<pre><code>BEGIN\n DBMS_STATS.GATHER_TABLE_STATS (ownname =&gt; '&lt;OWNER&gt;' , tabname =&gt; '&lt;TABLE_NAME&gt;',\n  cascade =&gt; true, estimate_percent =&gt; 15,method_opt=&gt;'for all indexed columns size 1', granularity =&gt; 'ALL', degree =&gt; 1);\nEND;\n</code></pre>"},{"location":"blog/2024/11/21/statistics-management/#2-gather-statistics-for-a-schema","title":"2. Gather statistics for a schema","text":"<pre><code>exec dbms_stats.gather_schema_stats( -\n    ownname          =&gt; '&lt;SCHEMA_NAME&gt;', -\n    options          =&gt; 'GATHER AUTO', -\n    estimate_percent =&gt; dbms_stats.auto_sample_size, -\n    method_opt       =&gt; 'for all columns size repeat', -\n    degree           =&gt; 15 -\n)\n</code></pre>"},{"location":"liberty/getting-started/","title":"Getting Started with Liberty Framework","text":""},{"location":"liberty/getting-started/#liberty-framework","title":"Liberty Framework","text":"<p>Welcome to Liberty Framework, a no-code development platform designed for rapid and efficient web application creation using the latest in React, Node.js, and PostgreSQL technologies. Whether you're a developer or a non-technical user, Liberty Framework empowers you to build robust applications with zero coding skills required.</p> <p>Go to Demo</p> <pre><code>Login = demo\nPassword = demo\nAppplication = LIBERTY, NOMASX-1 and NOMAJDE\n</code></pre>"},{"location":"liberty/getting-started/#documentation","title":"Documentation","text":"<p>Download the complete Liberty Framework User Guide in PDF format:</p> <p>Download Liberty Framework User Guide</p>"},{"location":"liberty/release-notes/","title":"Release Notes","text":""},{"location":"liberty/api/liberty-api/","title":"Liberty API","text":"<p>Description: Liberty API provides a powerful and scalable backend for managing authentication,  database operations, and framework functionalities in the Liberty Framework. </p>"},{"location":"liberty/api/liberty-api/#key-features","title":"\ud83d\udd39 Key Features:","text":"<ul> <li>Authentication &amp; Authorization: Secure endpoints with JWT tokens and OAuth2.</li> <li>Database Management: Query, insert, update, and delete records across multiple pools.</li> <li>Framework Controls: Manage modules, applications, themes, and logs.</li> <li>Security &amp; Encryption: Encrypt data and ensure safe database access.</li> <li>Logging &amp; Auditing: Retrieve and analyze logs for security and debugging.</li> </ul>"},{"location":"liberty/api/liberty-api/#authentication","title":"\ud83d\udd39 Authentication","text":"<ul> <li><code>/api/auth/token</code> - Generate a JWT token for authentication.</li> <li><code>/api/auth/user</code> - Retrieve authenticated user details.</li> </ul>"},{"location":"liberty/api/liberty-api/#database-operations","title":"\ud83d\udd39 Database Operations","text":"<ul> <li><code>/api/db/check</code> - Validate database connection.</li> <li><code>/api/db/query</code> - Retrieve, insert, update, or delete records.</li> <li><code>/api/db/audit/{table}/{user}</code> - Audit changes on a specific table.</li> </ul>"},{"location":"liberty/api/liberty-api/#framework-features","title":"\ud83d\udd39 Framework Features","text":"<ul> <li><code>/api/fmw/modules</code> - Retrieve framework modules.</li> <li><code>/api/fmw/applications</code> - Retrieve available applications.</li> <li><code>/api/fmw/themes</code> - Manage application themes.</li> </ul> <p>\ud83d\udd17 Explore the API using Swagger UI (<code>/api/test</code>) or Redoc (<code>/api</code>).</p> <p>Version: 1.0.0</p>"},{"location":"liberty/api/liberty-api/#authentication_1","title":"Authentication","text":""},{"location":"liberty/api/liberty-api/#auth-user","title":"AUTH - User","text":"<p>Retrieve user information.</p> <p>GET <code>/api/auth/user</code></p> <p>Query Parameters</p> <ul> <li><code>user</code> (in query): User ID.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the user. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get user information <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"USR_ID\": \"demo\",\n            \"USR_PASSWORD\": \"ENC:...\",\n            \"USR_NAME\": \"Demo User\",\n            \"USR_EMAIL\": \"demo@liberty.fr\",\n            \"USR_STATUS\": \"Y\",\n            \"USR_ADMIN\": \"N\",\n            \"USR_LANGUAGE\": \"fr\",\n            \"USR_MODE\": \"light\",\n            \"USR_READONLY\": \"Y\",\n            \"USR_DASHBOARD\": 1,\n            \"USR_THEME\": \"liberty\"\n        }\n    ],\n    \"status\": \"success\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Unprocessable Entity <ul> <li>Content-Type: <code>application/json</code></li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#auth-token","title":"AUTH - Token","text":"<p>Generate a JWT token for the user.</p> <p>POST <code>/api/auth/token</code></p> <p>Query Parameters</p> <ul> <li><code>pool</code> (in query): The database pool alias to retrieve the user. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>type</code> (in query): Authentication type, from database or using OIDC. Valid values: <code>database</code>, <code>oidc</code></li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"properties\": {\n        \"user\": {\n            \"type\": \"string\",\n            \"title\": \"User\"\n        },\n        \"password\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Password\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"user\",\n        \"password\"\n    ],\n    \"title\": \"LoginRequest\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Authentication successful, JWT token generated <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"access_token\": \"....\",\n    \"token_type\": \"bearer\",\n    \"status\": \"success\",\n    \"message\": \"Authentication successful\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Authentication failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#framework","title":"Framework","text":""},{"location":"liberty/api/liberty-api/#fmw-applications","title":"FMW - Applications","text":"<p>Retrieve Applications.</p> <p>GET <code>/api/fmw/applications</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get Applications Available <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"pool\": \"default\",\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"APPS_ID\": 1,\n            \"APPS_NAME\": \"LIBERTY\",\n            \"APPS_DESCRIPTION\": \"Framework Liberty\",\n            \"APPS_POOL\": \"default\",\n            \"APPS_OFFSET\": 5000,\n            \"APPS_LIMIT\": 10000,\n            \"APPS_VERSION\": 500,\n            \"APPS_DASHBOARD\": 1,\n            \"APPS_THEME\": \"liberty\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"APPS_ID\": 2,\n            \"APPS_NAME\": \"NOMASX1\",\n            \"APPS_DESCRIPTION\": \"Rights, licenses and SOD\",\n            \"APPS_POOL\": \"default\",\n            \"APPS_OFFSET\": 5000,\n            \"APPS_LIMIT\": 10000,\n            \"APPS_VERSION\": 500,\n            \"APPS_DASHBOARD\": 1,\n            \"APPS_THEME\": \"modernBluePurple\"\n        }\n    ],\n    \"rowCount\": 2,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"MODULE_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_DESCRIPTION\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_ENABLED\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_PARAMS\",\n            \"type\": \"UNKNOWN\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-modules","title":"FMW - Modules","text":"<p>Retrieve Modules.</p> <p>GET <code>/api/fmw/modules</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get Modules Details <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"pool\": \"default\",\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"MODULE_ID\": \"menus\",\n            \"MODULE_DESCRIPTION\": \"Enable Drawer Menus\",\n            \"MODULE_ENABLED\": \"Y\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"MODULE_ID\": \"grafana\",\n            \"MODULE_DESCRIPTION\": \"Enable Grafana Dashboard\",\n            \"MODULE_ENABLED\": \"N\"\n        },\n        {\n            \"ROW_ID\": 3,\n            \"MODULE_ID\": \"dev\",\n            \"MODULE_DESCRIPTION\": \"Enable Development Mode\",\n            \"MODULE_ENABLED\": \"Y\"\n        },\n        {\n            \"ROW_ID\": 4,\n            \"MODULE_ID\": \"sentry\",\n            \"MODULE_DESCRIPTION\": \"Enable Sentry\",\n            \"MODULE_ENABLED\": \"N\",\n            \"MODULE_PARAMS\": {\n                \"url\": \"https://sentry.io\",\n                \"replay\": \"false\",\n                \"clientid\": \"nomana\",\n                \"platform\": \"dev\"\n            }\n        },\n        {\n            \"ROW_ID\": 5,\n            \"MODULE_ID\": \"debug\",\n            \"MODULE_DESCRIPTION\": \"Enable Debug\",\n            \"MODULE_ENABLED\": \"N\"\n        },\n        {\n            \"ROW_ID\": 6,\n            \"MODULE_ID\": \"login\",\n            \"MODULE_DESCRIPTION\": \"Enable Embedded Login\",\n            \"MODULE_ENABLED\": \"Y\"\n        }\n    ],\n    \"rowCount\": 6,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"MODULE_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_DESCRIPTION\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_ENABLED\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_PARAMS\",\n            \"type\": \"UNKNOWN\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-themes","title":"FMW - Themes","text":"<p>Retrieve Themes Definition.</p> <p>GET <code>/api/fmw/themes</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Get Themes Details <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"pool\": \"default\",\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"THM_NAME\": \"modernBluePurple\",\n            \"TCL_KEY\": \"primary\",\n            \"TCL_LIGHT\": \"#3f51b5\",\n            \"TCL_DARK\": \"#673ab7\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"THM_NAME\": \"luxuryDarkGold\",\n            \"TCL_KEY\": \"secondary\",\n            \"TCL_LIGHT\": \"#607d8b\",\n            \"TCL_DARK\": \"rgb(206, 203, 203)\"\n        }\n    ],\n    \"rowCount\": 2,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"MODULE_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_DESCRIPTION\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_ENABLED\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"MODULE_PARAMS\",\n            \"type\": \"UNKNOWN\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-get-logs","title":"FMW - Get logs","text":"<p>Get all current logs and upload to cache</p> <p>GET <code>/api/logs</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Successful Response <ul> <li>Content-Type: <code>application/json</code></li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-get-log-details","title":"FMW - Get log details","text":"<p>Get details for a log id from the cache</p> <p>GET <code>/api/logs/details</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Successful Response <ul> <li>Content-Type: <code>application/json</code></li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-encrypt","title":"FMW - Encrypt","text":"<p>Encrypt the input received</p> <p>POST <code>/api/fmw/encrypt</code></p> <p>Query Parameters</p> <ul> <li><code>plain_text</code> (in query): Text to be encrypted</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Encryption successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"encrypted\": \"ENC:wNMyALbXf.....\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Failed to encrypt data: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError)\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#fmw-push-logs","title":"FMW - Push logs","text":"<p>Push logs to files in json and plain text format</p> <p>POST <code>/api/logs</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Successful Response <ul> <li>Content-Type: <code>application/json</code></li> </ul>"},{"location":"liberty/api/liberty-api/#database","title":"Database","text":""},{"location":"liberty/api/liberty-api/#database-check","title":"DATABASE - Check","text":"<p>Performs a basic check to ensure the database connection is functional. Returns the current date if the connection is successful.</p> <p>GET <code>/api/db/check</code></p> <p>Query Parameters</p> <ul> <li><code>framework_pool</code> (in query): Pool alias to retrieve the database definition. (e.g., <code>default</code>, <code>libnsx1</code>). (Default: <code>default</code>)</li> <li><code>target_pool</code> (in query): Pool alias of the database to check. (e.g., <code>nomasx1</code>, <code>nomajde</code>). (Default: <code>default</code>)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Database connection is successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"rows\": [\n        {\n            \"ROW_ID\": 1,\n            \"CURRENT_DATE\": \"2025-01-27T08:14:13.809494+00:00\"\n        }\n    ],\n    \"rowCount\": 1,\n    \"meta_data\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"CURRENT_DATE\",\n            \"type\": \"datetime\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Query execution failed: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError)\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#database-close","title":"DATABASE - Close","text":"<p>Close all database connections for the specified pool alias.</p> <p>GET <code>/api/db/close</code></p> <p>Query Parameters</p> <ul> <li><code>pool</code> (in query): Pool alias for the database to close. (e.g., <code>default</code>, <code>libnsx1</code>). (Default: <code>default</code>)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Pool closed successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"disconnected\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Requested pool `alias` not found\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#database-open","title":"DATABASE - Open","text":"<p>Open a connection to the database using the specified pool alias.</p> <p>GET <code>/api/db/open</code></p> <p>Query Parameters</p> <ul> <li><code>framework_pool</code> (in query): Pool alias to retrieve the database definition. (e.g., <code>default</code>, <code>libnsx1</code>). (Default: <code>default</code>)</li> <li><code>target_pool</code> (in query): Pool alias of the database to open. (e.g., <code>libnsx1</code>, <code>nomasx1</code>, <code>nomajde</code>). (Default: <code>default</code>)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Pool opened successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"success\",\n    \"message\": \"connected\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Requested pool `alias` not found\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query","title":"Query","text":""},{"location":"liberty/api/liberty-api/#query-select","title":"QUERY - Select","text":"<p>Retrieve data or metadata from the database based on query parameters. Supports filtering, language and pagination.</p> <p>GET <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>q</code> (in query): Filters to apply to the query in JSON format (e.g., <code>[{'APPS_ID':{'=':10}, 'APPS_NAME':{'like':'LIBERTY%'} }]</code>).</li> <li><code>language</code> (in query): The language for query execution. (e.g., <code>en</code>, <code>fr</code>). (Default: <code>en</code>)</li> <li><code>offset</code> (in query): The number of rows to skip before starting to fetch. (Default: <code>0</code>)</li> <li><code>limit</code> (in query): The maximum number of rows to return. (Default: <code>1000</code>)</li> <li><code>params</code> (in query): Additional parameters in JSON format to replace variable in a query (e.g., <code>[{'APPS_ID': 10}]</code>).</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data retrieved successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [\n        {\n            \"ROW_ID\": 1,\n            \"DD_ID\": \"ACT_AUDIT_DATE\",\n            \"DD_LABEL\": \"Date (Audit)\"\n        },\n        {\n            \"ROW_ID\": 2,\n            \"DD_ID\": \"ACT_ID\",\n            \"DD_LABEL\": \"Action ID\"\n        }\n    ],\n    \"status\": \"success\",\n    \"metadata\": [\n        {\n            \"name\": \"ROW_ID\",\n            \"type\": \"int\"\n        },\n        {\n            \"name\": \"DD_ID\",\n            \"type\": \"str\"\n        },\n        {\n            \"name\": \"DD_LABEL\",\n            \"type\": \"str\"\n        }\n    ],\n    \"hasMore\": true,\n    \"limit\": 100,\n    \"offset\": 0,\n    \"count\": 2\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Invalid JSON format in request query.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Example error message\"\n            }\n        ],\n        \"status\": \"error\",\n        \"hasMore\": false,\n        \"limit\": 100,\n        \"offset\": 0,\n        \"count\": 0,\n        \"query\": \"SELECT * FROM table_name\"\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-audit","title":"QUERY - Audit","text":"<p>Audit user actions on a table.</p> <p>POST <code>/api/db/audit/{table}/{user}</code></p> <p>Query Parameters</p> <ul> <li><code>table</code> (in path): No description (Required)</li> <li><code>user</code> (in path): No description (Required)</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty. JSON object with key-value pairs is required.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-insert","title":"QUERY - Insert","text":"<p>Insert data into a table.</p> <p>POST <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"type\": \"object\",\n    \"description\": \"JSON object with key-value pairs is required.\",\n    \"title\": \"Body\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-update","title":"QUERY - Update","text":"<p>Update data into a table.</p> <p>PUT <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"type\": \"object\",\n    \"description\": \"JSON object with key-value pairs is required.\",\n    \"title\": \"Body\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty. JSON object with key-value pairs is required.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#query-delete","title":"QUERY - Delete","text":"<p>Delete data into a table.</p> <p>DELETE <code>/api/db/query</code></p> <p>Query Parameters</p> <ul> <li><code>source</code> (in query): The source to retrieve the query definition. Valid values: <code>framework</code>, <code>query</code></li> <li><code>type</code> (in query): The type of query, get data or metadata. Valid values: <code>table</code>, <code>columns</code>.</li> <li><code>pool</code> (in query): The database pool alias to retrieve the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> <li><code>mode</code> (in query): The session mode, retrieve data from framework table or pool. Valid values: <code>framework</code>, <code>session</code></li> <li><code>query</code> (in query): The query ID to execute. (e.g., <code>1</code>, <code>2</code>)</li> <li><code>override_pool</code> (in query): Override the default pool set in the query definition. (e.g., <code>default</code>, <code>libnsx1</code>)</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"type\": \"object\",\n    \"description\": \"JSON object with key-value pairs is required.\",\n    \"title\": \"Body\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Data inserted/updated successfully <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>400</code>: Bad Request <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Request body cannot be empty. JSON object with key-value pairs is required.\"\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": {\n        \"items\": [\n            {\n                \"message\": \"Error: Query execution failed: Query execution failed: INSERT INTO...\",\n                \"line\": {\n                    \"field1\": \"&lt;string&gt;\",\n                    \"field2\": \"&lt;string&gt;\"\n                }\n            }\n        ],\n        \"status\": \"error\",\n        \"count\": 0\n    }\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup","title":"Setup","text":""},{"location":"liberty/api/liberty-api/#setup-current","title":"SETUP - Current","text":"<p>Get the current version deployed</p> <p>GET <code>/api/setup/current</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-downgrade","title":"SETUP - Downgrade","text":"<p>Downgrade databases to a specific version</p> <p>POST <code>/api/setup/downgrade/{version}</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-installation","title":"SETUP - Installation","text":"<p>Configure the postgres database.</p> <p>POST <code>/api/setup/install</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>Request Body</p> <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"properties\": {\n        \"host\": {\n            \"type\": \"string\",\n            \"title\": \"Host\"\n        },\n        \"port\": {\n            \"type\": \"integer\",\n            \"title\": \"Port\"\n        },\n        \"database\": {\n            \"type\": \"string\",\n            \"title\": \"Database\"\n        },\n        \"user\": {\n            \"type\": \"string\",\n            \"title\": \"User\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"title\": \"Password\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ],\n    \"title\": \"SetupRequest\"\n}\n</code></pre> </li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-revision","title":"SETUP - Revision","text":"<p>Create a new revision for the database</p> <p>POST <code>/api/setup/revision</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#setup-upgrade","title":"SETUP - Upgrade","text":"<p>Upgrade databases to latest version</p> <p>POST <code>/api/setup/upgrade</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/api/liberty-api/#export","title":"Export","text":""},{"location":"liberty/api/liberty-api/#export-repository-for-deployment","title":"EXPORT - Repository for Deployment","text":"<p>Export all tables models and data.</p> <p>GET <code>/api/export/repository</code></p> <p>Query Parameters</p> <ul> <li>None</li> </ul> <p>\ud83d\udce5 Responses:</p> Response <code>200</code>: Installation successful <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"items\": [],\n    \"status\": \"success\",\n    \"count\": 0\n}\n</code></pre> </li> </ul> Response <code>422</code>: Validation Error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"quantity\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> </li> </ul> Response <code>500</code>: Internal server error <ul> <li>Content-Type: <code>application/json</code></li> <li> <p>Example:</p> <pre><code>{\n    \"status\": \"failed\",\n    \"message\": \"Setup failed\"\n}\n</code></pre> </li> </ul>"},{"location":"liberty/core/getting-started/","title":"Liberty Core","text":"<p>A modular, extensible framework for building modern applications with reusable UI components and application management tools.</p>"},{"location":"liberty/core/getting-started/#overview","title":"Overview","text":"<p>Liberty Core is a comprehensive framework that provides a robust set of UI components, application management tools, and context providers to streamline development.</p>"},{"location":"liberty/core/getting-started/#features","title":"Features","text":"<ul> <li>\ud83d\ude80 Prebuilt UI Components: Buttons, Dialogs, Alerts, Tables, and more.</li> <li>\u2699\ufe0f Context Providers: Manage applications, authentication, users, and modules.</li> <li>\ud83c\udfa8 Theming Support: Customizable styles for different UI needs.</li> <li>\ud83d\udd0c Extensibility: Easily add and configure new modules.</li> <li>\ud83c\udf10 Integrated State Management: Built-in context for handling global application state.</li> </ul>"},{"location":"liberty/core/getting-started/#backend-integration","title":"Backend Integration","text":"<p>Liberty Core is designed to seamlessly integrate with the Liberty Framework, which includes a FastAPI-based backend powered by PostgreSQL. This backend provides a preconfigured database and a complete set of ready-to-use APIs, allowing developers to focus on building applications without worrying about backend setup.</p> <ul> <li>\ud83d\udd17 Backend Repository: Liberty Framework</li> </ul>"},{"location":"liberty/core/getting-started/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is divided into the following categories:</p>"},{"location":"liberty/core/getting-started/#application-management","title":"Application Management","text":"<ul> <li>\ud83d\udd39 [AppProvider] - Provides global application state.</li> <li>\ud83d\udd39 [Modules] - Handles feature activation.</li> <li>\ud83d\udd39 [Applications] - Manages multiple application instances.</li> <li>\ud83d\udd39 [Users] - User authentication and profiles.</li> <li>\ud83d\udd39 [Authentication] - Token-based authentication system.</li> <li>\ud83d\udd39 [Use Media Query] - Responsive design utilities.</li> </ul>"},{"location":"liberty/core/getting-started/#ui-components","title":"UI Components","text":"<ul> <li>\ud83c\udfaf Alerts &amp; Messages - Alert, AlertMessage, SnackMessage.</li> <li>\ud83c\udf9b Buttons &amp; Toggles - Button, IconButton, Toggle.</li> <li>\ud83d\uddd4 Dialogs &amp; Overlays - Dialog, ConfirmationDialog, DialogExport, Popper, Tooltip.</li> <li>\u270d\ufe0f Inputs &amp; Forms - Input, Checkbox, Select.</li> <li>\ud83d\udcc2 Navigation - Menu, Tabs.</li> <li>\ud83d\udcca Data Display - Table, List, Grid, Typography.</li> </ul>"},{"location":"liberty/core/getting-started/#getting-started","title":"Getting Started","text":"<p>To use Liberty Core, install it via npm: ```sh npm install @nomana-it/liberty-core ```</p> <p>Then import the necessary components: ```tsx import { AppProvider, Button, Dialog } from \"@nomana-it/liberty-core\";</p> <p>export const MyApp = () =&gt; (    Click Me  ); ```</p>"},{"location":"liberty/core/getting-started/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/new-project/","title":"Creating a New React App with Liberty Core","text":""},{"location":"liberty/core/new-project/#description","title":"Description","text":"<p>Liberty Core provides a modular and extensible foundation for building modern web applications. This guide explains how to create a new React app using Liberty Core, set up authentication with OIDC, and configure translations and error handling.</p>"},{"location":"liberty/core/new-project/#step-1-initialize-a-new-react-project","title":"Step 1: Initialize a New React Project","text":"<p>Create a new React project using Vite (recommended for performance):</p> <pre><code>npm create vite@latest my-liberty-app --template react-ts\ncd my-liberty-app\n</code></pre> <p>Then, install the required dependencies:</p> <pre><code>npm install liberty-core react-oidc-context @mui/material @emotion/react @emotion/styled\n</code></pre>"},{"location":"liberty/core/new-project/#step-2-create-the-application-entry-point","title":"Step 2: Create the Application Entry Point","text":"<p>Create a new file called `main.tsx` inside `src/` with the following setup:</p> <pre><code>import React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport { App } from \"./App\" \nimport { AppProvider, Div, ErrorBoundary, TranslationProvider } from \"@nomana-it/liberty-core\"\nimport { AuthProvider, useAuth as oidcUseAuth } from \"react-oidc-context\";\n\n// OIDC Configuration\nconst oidcConfig = {\n  authority: window.location.origin + \"/oidc/realms/Liberty\",\n  client_id: \"liberty-framework\",\n  redirect_uri: window.location.origin,\n};\n\n// Render the app inside ReactDOM with the required providers\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  &lt;React.StrictMode&gt;\n    &lt;AuthProvider {...oidcConfig}&gt;\n      &lt;AppProvider useAuth={oidcUseAuth}&gt;\n        &lt;ErrorBoundary fallback={&lt;Div&gt;An error has occurred&lt;/Div&gt;}&gt;\n          &lt;TranslationProvider&gt;\n            &lt;App /&gt;\n          &lt;/TranslationProvider&gt;\n        &lt;/ErrorBoundary&gt;\n      &lt;/AppProvider&gt;\n    &lt;/AuthProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre>"},{"location":"liberty/core/new-project/#step-3-create-the-app-component","title":"Step 3: Create the App Component","text":"<p>Now, create a file named `App.tsx` inside `src/` and add:</p> <pre><code>import { AppsContent, LYThemeProvider, useAppContext } from \"@nomana-it/liberty-core\"\n\nexport function App() {\n  const { userProperties, appsProperties, modulesProperties } = useAppContext();\n\n  return (\n    &lt;LYThemeProvider&gt;\n      &lt;AppsContent /&gt;\n    &lt;/LYThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"liberty/core/new-project/#step-4-run-the-application","title":"Step 4: Run the Application","text":"<p>Start the development server:</p> <pre><code>npm run dev\n</code></pre> <p>Your Liberty Core app is now running! \ud83c\udf89</p>"},{"location":"liberty/core/new-project/#customization","title":"Customization","text":""},{"location":"liberty/core/new-project/#1-customize-the-theme","title":"1. Customize the Theme","text":"<p>Modify the theme inside `App.tsx`:</p> <pre><code>import { AppsContent, LYThemeProvider } from \"@nomana-it/liberty-core\"\nimport { theme } from './theme';  // Create a theme file\n\nexport function App() {\n  return (\n    &lt;LYThemeProvider customTheme={theme}&gt;\n      &lt;AppsContent /&gt;\n    &lt;/LYThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"liberty/core/new-project/#2-customize-menus","title":"2. Customize Menus","text":"<p>To override the default menus, use `getMenus` in `AppProvider`:</p> <pre><code>const getMenus = async () =&gt; {\n  return {\n    items: [\n      {\n        MENU_LABEL: \"Dashboard\",\n        MENU_COMPONENT: \"FormsDashboard\",\n        MENU_COMPONENT_ID: 1,\n      },\n      {\n        MENU_LABEL: \"Settings\",\n        MENU_COMPONENT: \"FormsContent\",\n        MENU_COMPONENT_ID: 2,\n      },\n    ],\n  };\n};\n\n// Wrap AppProvider with custom menus\n&lt;AppProvider getMenus={getMenus}&gt;\n</code></pre>"},{"location":"liberty/core/new-project/#conclusion","title":"Conclusion","text":"<p>You have now set up a React application using Liberty Core with authentication, error handling, translation, and theming. \ud83c\udfaf </p>"},{"location":"liberty/core/new-project/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/charts/bar/","title":"BarChart Component","text":""},{"location":"liberty/core/components/charts/bar/#description","title":"Description","text":"<p>The <code>BarChart</code> component is a customizable bar chart using Chart.js. It supports: - Dynamic datasets - Custom colors - Grid configuration - X and Y axis customization - Multiple series support</p>"},{"location":"liberty/core/components/charts/bar/#props","title":"Props","text":"Prop Type Default Description <code>dataset</code> <code>Record&lt;string, any&gt;[]</code> - Data source for the chart. <code>colors</code> <code>string[]</code> - Colors for each data series. <code>grid</code> <code>{ horizontal: boolean; vertical: boolean }</code> <code>{ horizontal: true, vertical: true }</code> Toggles grid lines. <code>xAxis</code> <code>{ scaleType: string; data: string[]; label: string }[]</code> - X-axis configuration. <code>yAxis</code> <code>{ label: string }[]</code> - Y-axis configuration. <code>series</code> <code>{ dataKey: string; label: string }[]</code> - Defines the data series to be plotted."},{"location":"liberty/core/components/charts/bar/#example-usage","title":"Example Usage","text":"<pre><code>import { BarChart } from \"@nomana-it/liberty-core\"\n\nconst dataset = [\n  { month: \"Jan\", revenue: 10000, profit: 3000 },\n  { month: \"Feb\", revenue: 12000, profit: 4000 },\n  { month: \"Mar\", revenue: 15000, profit: 5000 },\n];\n\nexport const BarChartExample = () =&gt; {\n  return (\n    &lt;BarChart\n      dataset={dataset}\n      colors={[\"#1976d2\", \"#ff9800\"]}\n      grid={{ horizontal: true, vertical: false }}\n      xAxis={[{ scaleType: \"category\", data: [\"Jan\", \"Feb\", \"Mar\"], label: \"Month\" }]}\n      yAxis={[{ label: \"Amount ($)\" }]}\n      series={[\n        { dataKey: \"revenue\", label: \"Revenue\" },\n        { dataKey: \"profit\", label: \"Profit\" },\n      ]}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/charts/bar/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/charts/line/","title":"LineChart Component","text":""},{"location":"liberty/core/components/charts/line/#description","title":"Description","text":"<p>The <code>LineChart</code> component provides a customizable line chart using Chart.js. It supports: - Multiple datasets - Custom colors and grid configuration - Smooth line interpolation - Dual Y-axis support - Tooltip and legend customization</p>"},{"location":"liberty/core/components/charts/line/#props","title":"Props","text":"Prop Type Default Description <code>dataset</code> <code>Record&lt;string, any&gt;[]</code> - Data source for the chart. <code>colors</code> <code>string[]</code> - Colors for each data series. <code>grid</code> <code>{ horizontal: boolean; vertical: boolean }</code> <code>{ horizontal: true, vertical: true }</code> Toggles grid lines. <code>xAxis</code> <code>{ scaleType: string; data: string[]; label: string }[]</code> - X-axis configuration. <code>yAxis</code> <code>{ id: string; label: string }[]</code> - Y-axis configuration. <code>series</code> <code>{ dataKey: string; label: string; yAxisKey?: string }[]</code> - Defines the data series to be plotted."},{"location":"liberty/core/components/charts/line/#example-usage","title":"Example Usage","text":"<pre><code>import { LineChart } from \"@nomana-it/liberty-core\"\n\nconst dataset = [\n  { month: \"Jan\", sales: 100, revenue: 200 },\n  { month: \"Feb\", sales: 150, revenue: 250 },\n  { month: \"Mar\", sales: 200, revenue: 300 },\n];\n\nexport const LineChartExample = () =&gt; {\n  return (\n    &lt;LineChart\n      dataset={dataset}\n      colors={[\"#1976d2\", \"#ff9800\"]}\n      grid={{ horizontal: true, vertical: false }}\n      xAxis={[{ scaleType: \"category\", data: [\"Jan\", \"Feb\", \"Mar\"], label: \"Month\" }]}\n      yAxis={[{ id: \"salesAxis\", label: \"Sales\" }, { id: \"revenueAxis\", label: \"Revenue\" }]}\n      series={[\n        { dataKey: \"sales\", label: \"Sales\", yAxisKey: \"salesAxis\" },\n        { dataKey: \"revenue\", label: \"Revenue\", yAxisKey: \"revenueAxis\" },\n      ]}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/charts/line/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/charts/pie/","title":"PieChart Component","text":""},{"location":"liberty/core/components/charts/pie/#description","title":"Description","text":"<p>The <code>PieChart</code> component provides a customizable Doughnut/Pie Chart using Chart.js. It supports: - Custom colors - Tooltip with percentage display - Legend positioning - Adaptive theming for light/dark modes</p>"},{"location":"liberty/core/components/charts/pie/#props","title":"Props","text":"Prop Type Default Description <code>data</code> <code>{ value: number; label: string }[]</code> - The data to be displayed. <code>colors</code> <code>string[]</code> Default colors Custom colors for segments."},{"location":"liberty/core/components/charts/pie/#example-usage","title":"Example Usage","text":"<pre><code>import { PieChart } from \"@nomana-it/liberty-core\"\n\nconst chartData = [\n  { value: 40, label: \"Product A\" },\n  { value: 25, label: \"Product B\" },\n  { value: 20, label: \"Product C\" },\n  { value: 15, label: \"Product D\" },\n];\n\nexport const PieChartExample = () =&gt; {\n  return (\n    &lt;PieChart \n      data={chartData} \n      colors={[\"#1976d2\", \"#ff9800\", \"#4CAF50\", \"#E91E63\"]}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/charts/pie/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/dialogs-overlays/confirmation/","title":"ConfirmationDialog Component","text":""},{"location":"liberty/core/components/dialogs-overlays/confirmation/#description","title":"Description","text":"<p>The <code>ConfirmationDialog</code> component provides a standard confirmation popup with customizable actions.</p>"},{"location":"liberty/core/components/dialogs-overlays/confirmation/#props","title":"Props","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls whether the dialog is visible. <code>title</code> <code>string</code> <code>\"\"</code> The title of the confirmation dialog. <code>content</code> <code>string</code> <code>\"\"</code> The content message of the dialog. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback function when the dialog is closed. <code>onAccept</code> <code>() =&gt; void</code> <code>undefined</code> Callback function when the \"Yes\" button is clicked. <code>onDecline</code> <code>() =&gt; void</code> <code>undefined</code> Callback function when the \"No\" button is clicked."},{"location":"liberty/core/components/dialogs-overlays/confirmation/#example-usage","title":"Example Usage","text":"<pre><code>import { ConfirmationDialog, Button } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const ConfirmationDialogExample = () =&gt; {\n  const [open, setOpen] = useState(false);\n\n  return (\n    &lt;div&gt;\n      &lt;Button onClick={() =&gt; setOpen(true)}&gt;Open Confirmation Dialog&lt;/Button&gt;\n      &lt;ConfirmationDialog\n        open={open}\n        title=\"Confirm Action\"\n        content=\"Are you sure you want to proceed?\"\n        onClose={() =&gt; setOpen(false)}\n        onAccept={() =&gt; {\n          alert(\"Accepted\");\n          setOpen(false);\n        }}\n        onDecline={() =&gt; {\n          alert(\"Declined\");\n          setOpen(false);\n        }}\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/dialogs-overlays/confirmation/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/dialogs-overlays/dialog/","title":"Dialog Component","text":""},{"location":"liberty/core/components/dialogs-overlays/dialog/#description","title":"Description","text":"<p>The <code>Dialog</code> component is a modal dialog that appears over the main content. It supports customizable backdrop behavior, ESC key closing, and scroll options.</p>"},{"location":"liberty/core/components/dialogs-overlays/dialog/#styled-subcomponents","title":"Styled Subcomponents","text":"Component Description <code>Dialog_Title</code> The title of the dialog. <code>Dialog_Content</code> The main content area of the dialog. <code>Dialog_Actions</code> A section for placing action buttons."},{"location":"liberty/core/components/dialogs-overlays/dialog/#props","title":"Props","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls whether the dialog is visible. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback function when the dialog is closed. <code>maxWidth</code> <code>string</code> <code>\"600px\"</code> The maximum width of the dialog. <code>disableBackdropClick</code> <code>boolean</code> <code>false</code> Prevents closing when clicking the backdrop. <code>closeOnEsc</code> <code>boolean</code> <code>true</code> Allows closing the dialog by pressing ESC. <code>scroll</code> <code>\"paper\" , \"body\"</code> <code>\"paper\"</code> Controls the scrolling behavior inside the dialog."},{"location":"liberty/core/components/dialogs-overlays/dialog/#example-usage","title":"Example Usage","text":"<pre><code>import { Dialog, Button, Dialog_Title, Dialog_Content, Dialog_Actions } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\nimport { t } from \"i18next\";\nimport { LYCancelIcon } from \"@ly_styles/icons\";\n\nexport const DialogExample = () =&gt; {\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () =&gt; {\n    setOpen(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;Button onClick={() =&gt; setOpen(true)}&gt;Open Dialog&lt;/Button&gt;\n      &lt;Dialog open={open} onClose={handleClose} maxWidth=\"500px\" closeOnEsc&gt;\n        &lt;Paper_Popup&gt;\n            &lt;Dialog_Title&gt;Dialog Title&lt;/Dialog_Title&gt;\n            &lt;Dialog_Content&gt;\n            This is a simple dialog content area.\n            &lt;/Dialog_Content&gt;\n            &lt;Dialog_Actions&gt;\n            &lt;Button variant=\"outlined\" onClick={handleClose} startIcon={LYCancelIcon}&gt;\n                {t('button.close')}\n            &lt;/Button&gt;\n            &lt;/Dialog_Actions&gt;\n        &lt;/Paper_Popup&gt;\n      &lt;/Dialog&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/dialogs-overlays/dialog/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/dialogs-overlays/export/","title":"Dialog Export Component","text":""},{"location":"liberty/core/components/dialogs-overlays/export/#description","title":"Description","text":"<p>The <code>DialogExport</code> component provides a modal dialog to select export options before exporting data. It allows users to configure: - Headers: Column name vs. column ID - Columns: Export all or only visible columns - Rows: Export all, visible, or selected rows</p>"},{"location":"liberty/core/components/dialogs-overlays/export/#styled-subcomponents","title":"Styled Subcomponents","text":"Component Description <code>ExportContent</code> Provides the UI for export configuration. <code>Dialog_Title</code> Displays the export dialog title. <code>Dialog_Content</code> Holds the export configuration options. <code>Dialog_Actions</code> Contains the accept and decline buttons."},{"location":"liberty/core/components/dialogs-overlays/export/#props","title":"Props","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls whether the dialog is visible. <code>exportType</code> <code>EExportType</code> <code>\"\"</code> Type of export (e.g., CSV, Excel, etc.). <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback for closing the dialog. <code>onAccept</code> <code>() =&gt; void</code> <code>undefined</code> Callback for accepting export settings. <code>onDecline</code> <code>() =&gt; void</code> <code>undefined</code> Callback for canceling export. <code>exportOptions</code> <code>IExportOptions</code> <code>{}</code> Object containing export preferences. <code>setExportOptions</code> <code>React.Dispatch&lt;SetStateAction&lt;IExportOptions&gt;&gt;</code> <code>undefined</code> Function to update export preferences."},{"location":"liberty/core/components/dialogs-overlays/export/#example-usage","title":"Example Usage","text":"<pre><code>import { DialogExport, Button } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\nimport { EExportType, IExportOptions } from \"@ly_utils/commonUtils\";\n\nexport const DialogExportExample = () =&gt; {\n  const [open, setOpen] = useState(false);\n  const [exportOptions, setExportOptions] = useState&lt;IExportOptions&gt;({\n    header: \"columnName\",\n    columns: \"allColumns\",\n    rows: \"allRows\",\n  });\n\n  const handleOpen = () =&gt; setOpen(true);\n  const handleClose = () =&gt; setOpen(false);\n  const handleAccept = () =&gt; {\n    alert(\"Export confirmed!\");\n    setOpen(false);\n  };\n  const handleDecline = () =&gt; {\n    alert(\"Export canceled!\");\n    setOpen(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;Button onClick={handleOpen}&gt;Open Export Dialog&lt;/Button&gt;\n      &lt;DialogExport \n        open={open} \n        exportType={EExportType.EXCEL} \n        onClose={handleClose} \n        onAccept={handleAccept} \n        onDecline={handleDecline} \n        exportOptions={exportOptions} \n        setExportOptions={setExportOptions} \n      /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/dialogs-overlays/export/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/dialogs-overlays/popper/","title":"Popper Component","text":""},{"location":"liberty/core/components/dialogs-overlays/popper/#description","title":"Description","text":"<p>The <code>Popper</code> component provides a floating UI container that appears next to an anchor element. It supports various placements and can be configured as a modal.</p>"},{"location":"liberty/core/components/dialogs-overlays/popper/#props","title":"Props","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls the visibility of the popper. <code>anchorEl</code> <code>HTMLElement | null | undefined</code> <code>undefined</code> The element that the popper is anchored to. <code>placement</code> <code>\"top\" | \"bottom\" | \"left\" | \"right\" | \"bottom-start\" | \"bottom-end\"</code> <code>\"bottom-start\"</code> The position of the popper relative to the anchor. <code>disablePortal</code> <code>boolean</code> <code>false</code> If true, the popper will not be rendered inside a portal. <code>modal</code> <code>boolean</code> <code>false</code> If true, a backdrop is shown behind the popper, making it act like a modal. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback triggered when the popper is closed."},{"location":"liberty/core/components/dialogs-overlays/popper/#example-usage","title":"Example Usage","text":"<pre><code>import { useState } from \"react\";\nimport { Popper, Button } from \"@nomana-it/liberty-core\"\n\nexport const PopperExample = () =&gt; {\n  const [anchorEl, setAnchorEl] = useState&lt;HTMLElement | null&gt;(null);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = (event: React.MouseEvent&lt;HTMLElement&gt;) =&gt; {\n    setAnchorEl(event.currentTarget);\n    setOpen(true);\n  };\n\n  const handleClose = () =&gt; {\n    setOpen(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;Button onClick={handleOpen}&gt;Open Popper&lt;/Button&gt;\n\n      &lt;Popper open={open} anchorEl={anchorEl} onClose={handleClose} placement=\"bottom-start\"&gt;\n        &lt;div style={{ padding: \"10px\", background: \"#fff\", boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.1)\", borderRadius: \"8px\" }}&gt;\n          This is a popper content.\n          &lt;Button onClick={handleClose}&gt;Close&lt;/Button&gt;\n        &lt;/div&gt;\n      &lt;/Popper&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/dialogs-overlays/popper/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/dialogs-overlays/tabs/","title":"Tabs Component","text":""},{"location":"liberty/core/components/dialogs-overlays/tabs/#description","title":"Description","text":"<p>The <code>Tabs</code> and <code>Tab</code> components allow navigation between different views or settings. It supports standard and scrollable variants.</p>"},{"location":"liberty/core/components/dialogs-overlays/tabs/#props-tabs","title":"Props - Tabs","text":"Prop Type Default Description <code>value</code> <code>string</code> - The currently selected tab value. <code>onChange</code> <code>(event, newValue: string) =&gt; void</code> - Callback function triggered when a tab is clicked. <code>variant</code> <code>\"standard\" | \"scrollable\"</code> <code>\"standard\"</code> Defines if the tabs are standard or scrollable. <code>scrollButtons</code> <code>boolean</code> <code>false</code> Enables scroll buttons for overflow tabs."},{"location":"liberty/core/components/dialogs-overlays/tabs/#props-tab","title":"Props - Tab","text":"Prop Type Default Description <code>id</code> <code>string</code> - Unique identifier for the tab. <code>label</code> <code>string | ReactNode</code> - Label displayed inside the tab. <code>value</code> <code>string</code> - The value of the tab, used for selection. <code>isActive</code> <code>boolean</code> <code>false</code> Determines if the tab is currently active. <code>onClick</code> <code>(event) =&gt; void</code> - Event triggered when the tab is clicked."},{"location":"liberty/core/components/dialogs-overlays/tabs/#example-usage","title":"Example Usage","text":"<pre><code>import { Tab, Tabs } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const TabsExample = () =&gt; {\n  const [selectedTab, setSelectedTab] = useState(\"general\");\n\n  const handleTabChange = (_event, newValue) =&gt; {\n    setSelectedTab(newValue);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;Tabs value={selectedTab} onChange={handleTabChange}&gt;\n        &lt;Tab id=\"general\" label=\"General\" value=\"general\" /&gt;\n        &lt;Tab id=\"advanced\" label=\"Advanced\" value=\"advanced\" /&gt;\n        &lt;Tab id=\"settings\" label=\"Settings\" value=\"settings\" /&gt;\n      &lt;/Tabs&gt;\n\n      &lt;div style={{ marginTop: \"16px\", padding: \"8px\", border: \"1px solid #ddd\" }}&gt;\n        {selectedTab === \"general\" &amp;&amp; &lt;p&gt;General Settings Content&lt;/p&gt;}\n        {selectedTab === \"advanced\" &amp;&amp; &lt;p&gt;Advanced Settings Content&lt;/p&gt;}\n        {selectedTab === \"settings\" &amp;&amp; &lt;p&gt;Settings Panel Content&lt;/p&gt;}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/dialogs-overlays/tabs/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/forms-components/advanced-grid/","title":"FormsTable Component","text":""},{"location":"liberty/core/components/forms-components/advanced-grid/#description","title":"Description","text":"<p>The <code>FormsTable</code> component is a fully featured table system designed for complex enterprise applications. It provides:</p> <ul> <li>Editable rows with validation</li> <li>Dynamic context menus</li> <li>Column visibility toggles</li> <li>Filtering, sorting, and searching</li> <li>Batch selection and clipboard integration</li> <li>Exporting, importing, and inline editing</li> </ul>"},{"location":"liberty/core/components/forms-components/advanced-grid/#props","title":"Props","text":"Prop Type Default Description <code>componentProperties</code> <code>ComponentProperties</code> <code>-</code> Configuration object defining table structure, filters, and behavior. <code>displayMode</code> <code>LYComponentDisplayMode</code> <code>\"component\"</code> Determines how the table is displayed. <code>viewGrid</code> <code>boolean</code> <code>true</code> Enables or disables the table grid view. <code>viewMode</code> <code>LYComponentViewMode</code> <code>\"table\"</code> Defines the layout mode (tree, list, grid, etc.). <code>onSelectRow</code> <code>(row: ITableRow) =&gt; void</code> <code>undefined</code> Callback when a row is selected. <code>readonly</code> <code>boolean</code> <code>false</code> If true, disables row editing."},{"location":"liberty/core/components/forms-components/advanced-grid/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/forms-components/advanced-grid/#using-static-data","title":"Using Static Data","text":"<p><code>FormsTable</code> can be used with static configuration as shown below:</p> <pre><code>import { FormsTable } from '@nomana-it/liberty-core';\nimport { LYComponentDisplayMode, LYComponentViewMode } from '@nomana-it/liberty-core';\n\nexport const FormsTableExample = () =&gt; {\nreturn (\n    &lt;FormsTable\n    componentProperties={{\n        id: 1,\n        label: \"User Data\",\n        filters: [],\n        componentMode: \"edit\",\n    }}\n    displayMode={LYComponentDisplayMode.component}\n    viewGrid={true}\n    viewMode={LYComponentViewMode.table}\n    readonly={false}\n    /&gt;\n);\n};\n</code></pre>"},{"location":"liberty/core/components/forms-components/advanced-grid/#using-data-from-a-provider","title":"Using Data from a Provider","text":"<p>The <code>FormsTable</code> component can also dynamically receive data from a provider.</p>"},{"location":"liberty/core/components/forms-components/advanced-grid/#example-data-provider","title":"Example Data Provider","text":"<pre><code>export async function getTableProperties() {\n    return tableProperties;\n}\n\nexport async function getTableData() {\n    return tableData;\n}\n</code></pre>"},{"location":"liberty/core/components/forms-components/advanced-grid/#integrating-with-appprovider","title":"Integrating with <code>AppProvider</code>","text":"<pre><code>&lt;AppProvider\ngetModules={getModules}\ngetApplications={getApplications}\ngetToken={getToken}\ngetUser={getUser}\ngetMenus={getMenus}\ngetDashboard={getDashboard}\ngetTables={{\n    getProperties: getTableProperties,\n    getData: getTableData\n}}\n&gt;\n</code></pre> <p>This ensures that the <code>FormsTable</code> dynamically receives its configuration and data.</p>"},{"location":"liberty/core/components/forms-components/advanced-grid/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/forms-components/dashboard/","title":"Dashboard Configuration","text":""},{"location":"liberty/core/components/forms-components/dashboard/#description","title":"Description","text":"<p>The Dashboard Configuration defines the structure and content of dashboards within the Liberty Core framework. A dashboard consists of header metadata and content components that can be dynamically rendered.</p>"},{"location":"liberty/core/components/forms-components/dashboard/#header-fields","title":"Header Fields","text":"Field Name Type Description <code>DSH_ID</code> Number Unique identifier for the dashboard. <code>DSH_LABEL</code> String Name of the dashboard. <code>DSH_ROW</code> Number Number of rows in the layout. <code>DSH_COLUMN</code> Number Number of columns in the layout."},{"location":"liberty/core/components/forms-components/dashboard/#content-fields","title":"Content Fields","text":"Field Name Type Description <code>DSH_ID</code> Number Dashboard ID it belongs to. <code>DSH_COL_ID</code> Number Column identifier. <code>DSH_DISPLAY_TITLE</code> String Whether to display the title (\"Y\" or \"N\"). <code>DSH_TITLE</code> String Title of the dashboard component. <code>DSH_ROW</code> Number Row position in the layout. <code>DSH_COLUMN</code> Number Column position in the layout. <code>DSH_COMPONENT</code> Enum Component type (e.g., <code>FormsContent</code>). <code>DSH_CONTENT</code> JSX The actual component to be displayed."},{"location":"liberty/core/components/forms-components/dashboard/#example-usage","title":"Example Usage","text":"<pre><code>import { getDashboard } from \"@nomana-it/liberty-core\"\n\nexport const DashboardExample = async () =&gt; {\n  const dashboard = await getDashboard(1);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{dashboard?.header.DSH_LABEL}&lt;/h2&gt;\n      &lt;ul&gt;\n        {dashboard?.content.map((item, index) =&gt; (\n          &lt;li key={index}&gt;\n            &lt;strong&gt;{item.DSH_TITLE}&lt;/strong&gt; (Row: {item.DSH_ROW}, Column: {item.DSH_COLUMN})\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/forms-components/dashboard/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/inputs-forms/checkbox/","title":"InputCheckbox Component","text":""},{"location":"liberty/core/components/inputs-forms/checkbox/#description","title":"Description","text":"<p>The <code>InputCheckbox</code> component is a reusable checkbox input with built-in state management. It supports: - Custom labels - Controlled &amp; uncontrolled behavior - Disabled state - Callback on change events</p>"},{"location":"liberty/core/components/inputs-forms/checkbox/#props","title":"Props","text":"Prop Type Default Description <code>id</code> <code>string</code> - Unique identifier for the checkbox. <code>label</code> <code>string</code> - Label displayed next to the checkbox. <code>onChange</code> <code>(data: { id: string, value: boolean }) =&gt; void</code> - Callback function triggered on change. <code>defaultValue</code> <code>boolean</code> <code>false</code> Initial checked state. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the checkbox input."},{"location":"liberty/core/components/inputs-forms/checkbox/#example-usage","title":"Example Usage","text":"<pre><code>import { InputCheckbox } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const InputCheckboxExample = () =&gt; {\n  const [isChecked, setIsChecked] = useState(false);\n\n  const handleCheckboxChange = (data: { id: string; value: boolean }) =&gt; {\n    setIsChecked(data.value);\n  };\n\n  return (\n    &lt;InputCheckbox\n      id=\"custom-checkbox\"\n      label=\"Enable Feature\"\n      defaultValue={isChecked}\n      onChange={handleCheckboxChange}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/inputs-forms/checkbox/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/inputs-forms/color-picker/","title":"InputColor Component","text":""},{"location":"liberty/core/components/inputs-forms/color-picker/#description","title":"Description","text":"<p>The <code>InputColor</code> component allows users to select colors using an interactive color picker. It supports: - Customizable color selection. - Fullscreen mode for small screens. - Draggable &amp; resizable dialogs for desktop users. - Real-time preview of selected color.</p>"},{"location":"liberty/core/components/inputs-forms/color-picker/#props","title":"Props","text":"Prop Type Default Description <code>id</code> <code>string</code> - Unique identifier for the input field. <code>label</code> <code>string</code> - Label displayed above the input field. <code>onChange</code> <code>(e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</code> - Callback triggered when the color changes. <code>value</code> <code>string</code> <code>\"\"</code> Initial selected color in HEX format. <code>disabled</code> <code>boolean</code> <code>false</code> Disables color selection."},{"location":"liberty/core/components/inputs-forms/color-picker/#example-usage","title":"Example Usage","text":"<pre><code>import { InputColor } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const InputColorExample = () =&gt; {\n  const [color, setColor] = useState(\"#ff0000\");\n\n  const handleColorChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setColor(e.target.value);\n  };\n\n  return (\n    &lt;InputColor\n      id=\"custom-color-picker\"\n      label=\"Select a Color\"\n      value={color}\n      onChange={handleColorChange}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/inputs-forms/color-picker/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/inputs-forms/date-picker/","title":"DatePicker Component","text":""},{"location":"liberty/core/components/inputs-forms/date-picker/#description","title":"Description","text":"<p>The <code>DatePicker</code> component is a styled date selection field that allows users to pick a date from a calendar popup.</p> <p>It supports: - Manual input and selection via a pop-up calendar. - Month and year navigation. - Custom labels and full-width option. - Disabled state handling.</p>"},{"location":"liberty/core/components/inputs-forms/date-picker/#props","title":"Props","text":"Prop Type Default Description <code>id</code> <code>string</code> - Unique identifier for the input. <code>value</code> <code>Dayjs | null</code> <code>null</code> The selected date. <code>onChange</code> <code>(date: Dayjs | null) =&gt; void</code> - Callback triggered when a date is selected. <code>disabled</code> <code>boolean</code> <code>false</code> Disables date selection. <code>fullWidth</code> <code>boolean</code> <code>true</code> Expands input width to 100%. <code>label</code> <code>string</code> - Label for the date input."},{"location":"liberty/core/components/inputs-forms/date-picker/#example-usage","title":"Example Usage","text":"<pre><code>import { DatePicker } from \"@nomana-it/liberty-core\"\nimport dayjs, { Dayjs } from \"dayjs\";\nimport { useState } from \"react\";\n\nexport const DatePickerExample = () =&gt; {\n  const [selectedDate, setSelectedDate] = useState&lt;Dayjs | null&gt;(null);\n\n  return (\n    &lt;DatePicker\n      id=\"example-date-picker\"\n      label=\"Select a date\"\n      value={selectedDate}\n      onChange={setSelectedDate}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/inputs-forms/date-picker/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/inputs-forms/enum/","title":"InputEnum Component","text":""},{"location":"liberty/core/components/inputs-forms/enum/#description","title":"Description","text":"<p>The <code>InputEnum</code> component is an advanced dropdown that retrieves values dynamically from an enumeration source. It supports: - Dynamic data fetching - Filtering by labels or values - Customization through parameters - Free solo input (custom values)</p>"},{"location":"liberty/core/components/inputs-forms/enum/#props","title":"Props","text":"Prop Type Default Description <code>id</code> <code>string</code> - Unique identifier for the input. <code>enumID</code> <code>number</code> - ID of the enumeration source. <code>label</code> <code>string</code> - Label for the input. <code>defaultValue</code> <code>string</code> <code>\"\"</code> Initial selected value. <code>onChange</code> <code>(data: { id: string, value: string }) =&gt; void</code> - Callback when selection changes. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the input. <code>variant</code> <code>\"standard\" | \"outlined\" | \"filled\"</code> <code>\"standard\"</code> Input style variant. <code>freeSolo</code> <code>boolean</code> <code>false</code> Allows custom values to be typed. <code>searchByLabel</code> <code>boolean</code> <code>false</code> Enables searching by label instead of value. <code>data</code> <code>IColumnsFilter | ITransformedObject</code> <code>undefined</code> Custom data for options. <code>dynamic_params</code> <code>string</code> <code>undefined</code> Dynamic parameters for filtering results. <code>fixed_params</code> <code>string</code> <code>undefined</code> Fixed parameters for filtering results. <code>sessionMode</code> <code>ESessionMode</code> <code>undefined</code> Defines session-based filtering. <code>overrideQueryPool</code> <code>string</code> <code>undefined</code> Overrides the default query pool for fetching data. <code>callFromTable</code> <code>boolean</code> <code>false</code> Optimizes fetching when used in table cells. <code>hideButton</code> <code>boolean</code> <code>false</code> Hides the dropdown button if needed."},{"location":"liberty/core/components/inputs-forms/enum/#example-usage","title":"Example Usage","text":"<pre><code>import { InputEnum } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const InputEnumExample = () =&gt; {\n  const [selectedValue, setSelectedValue] = useState(\"\");\n\n  const handleEnumChange = (data: { id: string; value: string }) =&gt; {\n    setSelectedValue(data.value);\n  };\n\n  return (\n    &lt;InputEnum\n      id=\"input-enum-1\"\n      enumID={0}\n      label=\"Dictionary Rules\"\n      defaultValue=\"\"\n      disabled={false}\n      onChange={handleEnumChange}\n      variant=\"standard\"\n      freeSolo={true}\n      searchByLabel={false}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/inputs-forms/enum/#overriding-the-default-api","title":"Overriding the Default API","text":"<p>You can override the default API and set custom content: <pre><code>import { setCustomGetEnums } from \"@nomana-it/liberty-core\"\n\nconst customEnumData = [{\n  columns: [\n    { header: \"Enum ID\", field: \"ENUM_ID\" },\n    { header: \"Value\", field: \"VAL_ENUM\" },\n    { header: \"Description\", field: \"VAL_LABEL\" }\n  ],\n  data: [\n    { VAL_ENUM: \"CUSTOM1\", VAL_LABEL: \"Custom Option 1\" },\n    { VAL_ENUM: \"CUSTOM2\", VAL_LABEL: \"Custom Option 2\" },\n    { VAL_ENUM: \"CUSTOM3\", VAL_LABEL: \"Custom Option 3\" }\n  ],\n  header: {\n    ENUM_LABEL: \"Custom Dictionary\",\n    ENUM_DISPLAY_ADD: \"Y\"\n  },\n  status: \"success\"\n}];\n\nexport const setCustomGetEnums = () =&gt; {\n  ToolsDictionary.setCustomGetEnums(async (props) =&gt; {\n    return customEnumData[props?.[EEnumHeader.id]];\n  });\n};\n</code></pre></p>"},{"location":"liberty/core/components/inputs-forms/enum/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/inputs-forms/file-upload/","title":"InputFile Component","text":""},{"location":"liberty/core/components/inputs-forms/file-upload/#description","title":"Description","text":"<p>The <code>InputFile</code> component allows users to upload files via a button-based interface. It supports: - File type validation (MIME types and extensions). - File size limit enforcement (default: 5MB). - Custom file input handling with a hidden input field. - Snackbar messages for validation feedback.</p>"},{"location":"liberty/core/components/inputs-forms/file-upload/#props","title":"Props","text":"Prop Type Default Description <code>onFileChange</code> <code>(e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</code> - Callback triggered when a file is selected. <code>fileInputRef</code> <code>React.RefObject&lt;HTMLInputElement | null&gt;</code> - Ref to access the file input element. <code>disabled</code> <code>boolean</code> <code>false</code> Disables file selection. <code>accept</code> <code>string</code> <code>\"\"</code> Specifies accepted file types (e.g., \".png,.jpg\")."},{"location":"liberty/core/components/inputs-forms/file-upload/#example-usage","title":"Example Usage","text":"<pre><code>import { InputFile } from \"@nomana-it/liberty-core\"\nimport { useRef } from \"react\";\n\nexport const InputFileExample = () =&gt; {\n  const fileInputRef = useRef&lt;HTMLInputElement | null&gt;(null);\n\n  const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    const file = e.target.files?.[0];\n    if (file) {\n      alert(`Selected file: \\${file.name}`);\n    }\n  };\n\n  return (\n    &lt;InputFile\n      onFileChange={handleFileChange}\n      fileInputRef={fileInputRef}\n      disabled={false}\n      accept=\".png,.jpg,.pdf\"\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/inputs-forms/file-upload/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/inputs-forms/input/","title":"Input Component","text":""},{"location":"liberty/core/components/inputs-forms/input/#description","title":"Description","text":"<p>The <code>Input</code> component is a reusable text input field supporting: - Multiple variants: <code>outlined</code>, <code>filled</code>, and <code>standard</code> - Error handling and helper text - Start and end adornments - Multiline text area support - Clear button functionality</p>"},{"location":"liberty/core/components/inputs-forms/input/#props","title":"Props","text":"Prop Type Default Description <code>id</code> <code>string</code> <code>-</code> Unique identifier for the input. <code>label</code> <code>string</code> <code>-</code> The label for the input field. <code>variant</code> <code>\"outlined\" , \"filled\" , \"standard\"</code> <code>\"outlined\"</code> Defines the input style. <code>fullWidth</code> <code>boolean</code> <code>false</code> Expands input width to 100%. <code>error</code> <code>boolean</code> <code>false</code> Highlights input as an error. <code>helperText</code> <code>string</code> <code>-</code> Additional message under the input. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the input. <code>multiline</code> <code>boolean</code> <code>false</code> Enables textarea mode. <code>rows</code> <code>number</code> <code>1</code> Number of rows for multiline. <code>startAdornment</code> <code>ReactNode</code> <code>-</code> Component before the input. <code>endAdornment</code> <code>ReactNode</code> <code>-</code> Component after the input. <code>onClear</code> <code>() =&gt; void</code> <code>-</code> Callback when clear button is clicked. <code>showClearButton</code> <code>boolean</code> <code>false</code> Shows clear button if input has value."},{"location":"liberty/core/components/inputs-forms/input/#example-usage","title":"Example Usage","text":"<pre><code>import { Input } from \"@nomana-it/liberty-core\"\n\nexport const InputExample = () =&gt; {\n  const [text, setText] = useState(\"\");\n\n  return (\n    &lt;div style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}&gt;\n      &lt;Input id=\"outlined\" label=\"Outlined Input\" variant=\"outlined\" /&gt;\n      &lt;Input id=\"filled\" label=\"Filled Input\" variant=\"filled\" /&gt;\n      &lt;Input id=\"standard\" label=\"Standard Input\" variant=\"standard\" /&gt;\n      &lt;Input \n        id=\"with-clear\" \n        label=\"Clearable Input\" \n        variant=\"outlined\" \n        value={text} \n        showClearButton \n        onClear={() =&gt; setText(\"\")} \n        onChange={(e) =&gt; setText(e.target.value)} \n      /&gt;\n      &lt;Input id=\"error\" label=\"Error Input\" variant=\"outlined\" error helperText=\"This field is required\" /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/inputs-forms/input/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/inputs-forms/select/","title":"Select Component","text":""},{"location":"liberty/core/components/inputs-forms/select/#description","title":"Description","text":"<p>The <code>Select</code> component provides a dropdown for selecting options, with support for filtering, free text input, and clearing the selected value.</p>"},{"location":"liberty/core/components/inputs-forms/select/#props","title":"Props","text":"Prop Type Default Description <code>id</code> <code>string</code> - Unique identifier for the input. <code>label</code> <code>string</code> - Label for the input field. <code>options</code> <code>any[]</code> <code>[]</code> Array of options for selection. <code>loading</code> <code>boolean</code> <code>false</code> Displays a loading indicator if true. <code>freeSolo</code> <code>boolean</code> <code>false</code> Allows free text input. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the select input. <code>fullWidth</code> <code>boolean</code> <code>false</code> If true, the input takes up the full width of its container. <code>value</code> <code>any</code> - The current selected value. <code>onChange</code> <code>(event, value) =&gt; void</code> - Callback when an option is selected. <code>onInputChange</code> <code>(event, value, reason) =&gt; void</code> - Callback when the input value changes. <code>getOptionLabel</code> <code>(option: any) =&gt; string</code> Extracts label from option Function to determine how options are displayed. <code>onOpen</code> <code>() =&gt; void</code> - Callback when the dropdown opens. <code>onBlur</code> <code>(event) =&gt; void</code> - Callback when the input loses focus. <code>onFocus</code> <code>(event) =&gt; void</code> - Callback when the input gains focus. <code>variant</code> <code>\"outlined\" | \"filled\" | \"standard\"</code> <code>\"outlined\"</code> Defines the visual style of the input. <code>disablePortal</code> <code>boolean</code> <code>false</code> Renders the dropdown inline instead of inside a portal. <code>showClearButton</code> <code>boolean</code> <code>true</code> Displays a button to clear the selection. <code>selectOnly</code> <code>boolean</code> <code>false</code> Disables typing and allows selection only."},{"location":"liberty/core/components/inputs-forms/select/#example-usage","title":"Example Usage","text":"<pre><code>import { useState } from \"react\";\nimport { Select, MenuItem } from \"@nomana-it/liberty-core\"\n\nexport const SelectExample = () =&gt; {\n  const [value, setValue] = useState(null);\n\n  const options = [\n    { value: 1, label: \"Option 1\" },\n    { value: 2, label: \"Option 2\" },\n    { value: 3, label: \"Option 3\" }\n  ];\n\n  return (\n    &lt;Select\n      id=\"example-select\"\n      label=\"Select an Option\"\n      options={options}\n      value={value}\n      onChange={(event, newValue) =&gt; setValue(newValue)}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/inputs-forms/select/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/main-components/content/","title":"AppsContent Component","text":""},{"location":"liberty/core/components/main-components/content/#description","title":"Description","text":"<p>The <code>AppsContent</code> component is the core layout container for Liberty Core applications. It handles:</p> <ul> <li>User Authentication: Displays login screen if the user is not authenticated.</li> <li>Navigation &amp; Menu System: Integrates <code>AppsMenus</code> for managing available application modules.</li> <li>Tab Management: Supports opening multiple application modules in tabs.</li> <li>Dark Mode &amp; Theme Switching: Allows toggling between dark and light themes.</li> <li>User Profile &amp; Settings: Opens user settings panel for profile modifications.</li> <li>WebSocket Chat Integration: Provides in-app chat functionalities.</li> <li>Application Header: Includes navigation buttons, logout options, and menu toggle.</li> </ul>"},{"location":"liberty/core/components/main-components/content/#features","title":"Features","text":"<ul> <li>Dynamic Tab Management: Open, close, and switch between multiple application views.</li> <li>Dashboard Support: Automatically loads the user's default dashboard.</li> <li>State Persistence: Restores tabs after login/logout.</li> <li>Event-Driven UI Updates: Uses hooks to track user authentication and session changes.</li> </ul>"},{"location":"liberty/core/components/main-components/content/#example-usage","title":"Example Usage","text":"<pre><code>import { AppProvider, AppsContent } from \"@nomana-it/liberty-core\"\n\nexport const MyApp = () =&gt; {\n  return (\n    &lt;AppProvider&gt;\n      &lt;AppsContent /&gt;\n    &lt;/AppProvider&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/main-components/content/#props","title":"Props","text":"Prop Type Default Description <code>onToggleMenusDrawer</code> <code>() =&gt; void</code> - Opens/closes the application side menu. <code>onToggleDarkMode</code> <code>() =&gt; void</code> - Toggles dark/light mode. <code>onToggleUserSettings</code> <code>() =&gt; void</code> - Opens/closes the user settings dialog. <code>onToggleChat</code> <code>() =&gt; void</code> - Opens/closes the WebSocket chat interface. <code>onSignout</code> <code>() =&gt; void</code> - Logs out the current user."},{"location":"liberty/core/components/main-components/content/#navigation","title":"Navigation","text":"<p>The AppsContent component is designed to work seamlessly with Liberty Core's navigation system. It relies on: - <code>AppsMenus</code> for sidebar navigation. - <code>AppsHeader</code> for top navigation controls. - <code>TabContainer</code> for managing multiple open views.</p>"},{"location":"liberty/core/components/main-components/content/#default-behavior","title":"Default Behavior","text":"<p>When a user logs in: 1. Checks for a default dashboard (either from user settings or app settings). 2. Loads the dashboard automatically if available. 3. Displays dynamic tabs as the user navigates through the application.</p> <p>If the user logs out: 1. All tabs are cleared. 2. Login screen is displayed until the user re-authenticates.</p>"},{"location":"liberty/core/components/main-components/content/#extensibility","title":"Extensibility","text":"<p>Developers can override default behavior by modifying the <code>useAppContext</code> provider functions.</p>"},{"location":"liberty/core/components/main-components/content/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/main-components/header/","title":"AppsHeader Component","text":""},{"location":"liberty/core/components/main-components/header/#description","title":"Description","text":"<p>The <code>AppsHeader</code> component provides a standard header with multiple actions such as: - Opening a menu drawer - Toggling dark mode - Opening user settings - Opening chat - Signing out</p>"},{"location":"liberty/core/components/main-components/header/#props","title":"Props","text":"Prop Type Description <code>onToggleMenusDrawer</code> <code>() =&gt; void</code> Callback for opening the menu drawer <code>onToggleDarkMode</code> <code>() =&gt; void</code> Callback for toggling dark mode <code>onToggleUserSettings</code> <code>() =&gt; void</code> Callback for user settings <code>onToggleChat</code> <code>() =&gt; void</code> Callback for opening chat <code>onSignout</code> <code>() =&gt; void</code> Callback for signing out"},{"location":"liberty/core/components/main-components/header/#example-usage","title":"Example Usage","text":"<pre><code>import { AppsHeader } from \"@nomana-it/liberty-core\"\n\nexport const AppHeaderExample = () =&gt; {\n  const onToggleMenusDrawer = () =&gt; {\n    alert(\"Open Menu\");\n  };\n\n  const onToggleDarkMode = () =&gt; {\n    alert(\"Toggle Dark Mode\");\n  };\n\n  const onToggleUserSettings = () =&gt; {\n    alert(\"Open User Settings\");\n  };\n\n  const onToggleChat = () =&gt; {\n    alert(\"Open Chat\");\n  };\n\n  const onSignout = () =&gt; {\n    alert(\"Signout\");\n  };\n\n  return (\n    &lt;AppsHeader\n      onToggleMenusDrawer={onToggleMenusDrawer}\n      onToggleDarkMode={onToggleDarkMode}\n      onToggleChat={onToggleChat}\n      onToggleUserSettings={onToggleUserSettings}\n      onSignout={onSignout}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/main-components/header/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/main-components/login/","title":"AppsLogin Component","text":""},{"location":"liberty/core/components/main-components/login/#description","title":"Description","text":"<p>The <code>AppsLogin</code> component provides the authentication interface for Liberty Core applications. It supports: - Database &amp; OIDC Authentication: Works with both standard database login and OpenID Connect. - Multi-Application Selection: Users can choose from available applications. - Session Management: Automatically saves and restores the last used application. - Secure Authentication: Uses encrypted passwords and token-based authentication.</p>"},{"location":"liberty/core/components/main-components/login/#features","title":"Features","text":"<ul> <li>User Credential Validation: Authenticates users against the backend API.</li> <li>Application Selection: Displays available applications for login.</li> <li>Persistent Sessions: Stores last-used application in cookies for auto-selection.</li> <li>Error Handling: Displays error messages for login failures.</li> <li>Loading State Management: Shows loading indicator while fetching data.</li> </ul>"},{"location":"liberty/core/components/main-components/login/#example-usage","title":"Example Usage","text":"<pre><code>import { AppProvider, AppsLogin } from \"@nomana-it/liberty-core\"\n\nexport const MyApp = () =&gt; {\n  return (\n    &lt;AppProvider&gt;\n      &lt;AppsLogin /&gt;\n    &lt;/AppProvider&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/main-components/login/#props","title":"Props","text":"Prop Type Default Description <code>auth</code> <code>AuthContext</code> - Handles authentication state and login methods. <code>modulesProperties</code> <code>ModulesProps</code> - Configuration for authentication and login mechanisms. <code>getApplications</code> <code>() =&gt; Promise&lt;IAppsProps&gt;</code> - Function to fetch available applications. <code>getToken</code> <code>() =&gt; Promise&lt;TokenProps&gt;</code> - Function to retrieve authentication token. <code>getUser</code> <code>() =&gt; Promise&lt;UserProps&gt;</code> - Function to fetch user details after authentication."},{"location":"liberty/core/components/main-components/login/#login-process","title":"Login Process","text":"<ol> <li>Fetch Available Applications: Calls <code>getApplications</code> to retrieve available apps.</li> <li>Validate User Credentials: Checks username/password against the authentication provider.</li> <li>Retrieve Authentication Token: Uses <code>getToken</code> for secure token-based authentication.</li> <li>Fetch User Information: Calls <code>getUser</code> to load user profile details.</li> <li>Connect to Selected Application: Sets up session, WebSocket connection, and user permissions.</li> </ol>"},{"location":"liberty/core/components/main-components/login/#error-handling","title":"Error Handling","text":"<p>The <code>AppsLogin</code> component provides built-in error messages for: - Invalid Credentials: Displays \"Incorrect username or password.\" - Missing Application Selection: Prompts users to select an application. - Unexpected Errors: Logs exceptions and displays a generic error message.</p>"},{"location":"liberty/core/components/main-components/login/#extensibility","title":"Extensibility","text":"<p>Developers can override the default authentication functions in the AppProvider to integrate with custom backends.</p>"},{"location":"liberty/core/components/main-components/login/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/main-components/menus/","title":"AppsMenus Component","text":"<p>The AppsMenus component provides a dynamic, customizable menu system for Liberty Core applications. It allows defining nested menu structures that can be overridden using the <code>getMenus</code> function in <code>AppProvider</code>.</p>"},{"location":"liberty/core/components/main-components/menus/#overview","title":"Overview","text":"<p><code>AppsMenus</code> is the main navigation system for applications built with Liberty Core. It provides: - Multi-level navigation for organizing modules and features. - Dynamic content based on user roles and permissions. - Overridable API to fully customize the menu structure.</p>"},{"location":"liberty/core/components/main-components/menus/#props","title":"Props","text":"Prop Type Description <code>isOpen</code> <code>boolean</code> Controls whether the menu drawer is open. <code>onMenuSelect</code> <code>(component: ComponentProperties) =&gt; void</code> Callback triggered when a menu item is selected. <code>onToggleMenusDrawer</code> <code>() =&gt; void</code> Toggles the menu drawer open or closed."},{"location":"liberty/core/components/main-components/menus/#overriding-menu-content","title":"Overriding Menu Content","text":"<p>The menu system can be customized by passing a custom <code>getMenus</code> function to <code>AppProvider</code>.</p>"},{"location":"liberty/core/components/main-components/menus/#example-menu-structure","title":"Example Menu Structure","text":"<p>Menus follow a hierarchical structure, where each menu item can have: - Children (submenus) - Components assigned for navigation - Attributes controlling behavior</p> <pre><code>export const menus = {\n    \"items\": [\n        {\n            \"LNG_ID\": \"en\",\n            \"MENU_LABEL\": \"Application\",\n            \"MENU_COMPONENT\": null,\n            \"MENU_COMPONENT_ID\": null,\n            \"KEY_ATTRIBUTES\": \"100001.\",\n            \"MENU_PARENT_ID\": \"0\",\n            \"MENU_CHILD_ID\": \"100001.\",\n            \"MENU_LEVEL\": 1,\n            \"AUT_RUN\": \"Y\",\n            \"children\": [\n                {\n                    \"MENU_LABEL\": \"AppProvider\",\n                    \"MENU_COMPONENT\": LYComponentType.FormsContent,\n                    \"MENU_COMPONENT_ID\": 100001,\n                    \"KEY_ATTRIBUTES\": \"100001.100001.\",\n                    \"MENU_PARENT_ID\": \"100001.\",\n                    \"MENU_CHILD_ID\": \"100001.100001.\",\n                    \"MENU_LEVEL\": 2,\n                    \"AUT_RUN\": \"Y\",\n                    \"MENU_CONTENT\": &lt;Core_AppProvider /&gt;\n                },\n                {\n                    \"MENU_LABEL\": \"Modules\",\n                    \"MENU_COMPONENT\": LYComponentType.FormsContent,\n                    \"MENU_COMPONENT_ID\": 100002,\n                    \"KEY_ATTRIBUTES\": \"100001.100002.\",\n                    \"MENU_PARENT_ID\": \"100001.\",\n                    \"MENU_CHILD_ID\": \"100001.100002.\",\n                    \"MENU_LEVEL\": 2,\n                    \"AUT_RUN\": \"Y\",\n                    \"MENU_CONTENT\": &lt;Core_Modules /&gt;\n                },                                                         \n            ]\n        }\n    ],\n    \"status\": \"success\"\n};\n</code></pre>"},{"location":"liberty/core/components/main-components/menus/#how-to-override-in-appprovider","title":"How to Override in <code>AppProvider</code>","text":"<p>To override the default menu, pass the function when setting up <code>AppProvider</code>:</p> <pre><code>&lt;AppProvider\n    getModules={getModules}\n    getApplications={getApplications}\n    getToken={getToken}\n    getUser={getUser}\n    getMenus={async () =&gt; menus}  // Override default menus\n    getDashboard={getDashboard}\n&gt;\n    &lt;AppsContent /&gt;\n&lt;/AppProvider&gt;\n</code></pre> <p>By overriding <code>getMenus</code>, you can customize navigation dynamically based on: - User roles (e.g., different menus for admin and users). - Feature availability (e.g., show or hide based on permissions). - Application state (e.g., load menus dynamically from an API).</p>"},{"location":"liberty/core/components/main-components/menus/#example-usage","title":"Example Usage","text":"<pre><code>import { AppsMenus } from \"@nomana-it/liberty-core\"\n\n&lt;AppsMenus \n    isOpen={true} \n    onMenuSelect={(component) =&gt; console.log(component)} \n    onToggleMenusDrawer={() =&gt; console.log(\"Toggle drawer\")} \n/&gt;\n</code></pre>"},{"location":"liberty/core/components/main-components/menus/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/main-components/users/","title":"AppsUser Component","text":""},{"location":"liberty/core/components/main-components/users/#overview","title":"Overview","text":"<p>The AppsUser component is a user settings dialog in Liberty Core. It allows users to manage personal settings such as themes, notifications, UI display mode, and authentication.  This component is integrated within the <code>AppProvider</code> and can be overridden by defining a custom <code>getUser</code> function.</p> <p>It supports: - Authentication &amp; User Roles - Personalization (theme, language, dashboard) - Dark Mode &amp; UI Preferences - Notification Settings - Overridable API for custom user data</p>"},{"location":"liberty/core/components/main-components/users/#props","title":"Props","text":"Prop Type Description <code>openDialog</code> <code>boolean</code> Controls whether the settings dialog is open. <code>setOpenDialog</code> <code>(state: boolean) =&gt; void</code> Function to toggle the settings dialog. <code>onToggleDarkMode</code> <code>() =&gt; void</code> Toggles between light and dark modes."},{"location":"liberty/core/components/main-components/users/#example-usage","title":"Example Usage","text":"<pre><code>import React, { useState } from \"react\";\nimport { AppsUser } from \"@nomana-it/liberty-core\"\nimport { Button } from \"@ly_common/Button\";\n\nexport const UserSettingsDialogExample = () =&gt; {\n  const [isUserDialogOpen, setUserDialogOpen] = useState(false);\n\n  return (\n    &lt;&gt;\n      &lt;Button onClick={() =&gt; setUserDialogOpen(true)}&gt;Open User Settings&lt;/Button&gt;\n      &lt;AppsUser \n        openDialog={isUserDialogOpen} \n        setOpenDialog={setUserDialogOpen} \n        onToggleDarkMode={() =&gt; console.log(\"Dark mode toggled\")} \n      /&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/main-components/users/#how-it-works","title":"How It Works","text":"<ol> <li>Clicking the \"Open User Settings\" button opens the AppsUser dialog.</li> <li>The user can modify their preferences inside the modal.</li> <li>The changes persist, and dark mode updates dynamically when toggled.</li> </ol>"},{"location":"liberty/core/components/main-components/users/#overriding-user-data","title":"Overriding User Data","text":"<p>By default, AppsUser retrieves user settings internally. However, you can override the user retrieval logic with a custom <code>getUser</code> function.</p>"},{"location":"liberty/core/components/main-components/users/#example-user-data","title":"Example User Data","text":"<pre><code>import { EUsers, IUsersProps, UIDisplayMode } from \"@nomana-it/liberty-core\"\n\nexport const user = [\n    {\n        \"USR_ID\": \"admin\",\n        \"USR_PASSWORD\": \"admin\",\n        \"USR_NAME\": \"Administrator\",\n        \"USR_EMAIL\": \"admin@liberty.fr\",\n        \"USR_STATUS\": \"Y\",\n        \"USR_ADMIN\": \"Y\",\n        \"USR_LANGUAGE\": \"en\",\n        \"USR_MODE\": \"dark\",\n        \"USR_READONLY\": \"N\",\n        \"USR_DASHBOARD\": 1,\n        \"USR_THEME\": \"liberty\"\n    },\n    {\n        \"USR_ID\": \"demo\",\n        \"USR_PASSWORD\": \"demo\",\n        \"USR_NAME\": \"Demo User\",\n        \"USR_EMAIL\": \"demo@liberty.fr\",\n        \"USR_STATUS\": \"Y\",\n        \"USR_ADMIN\": \"Y\",\n        \"USR_LANGUAGE\": \"en\",\n        \"USR_MODE\": \"dark\",\n        \"USR_READONLY\": \"N\",\n        \"USR_DASHBOARD\": 1,\n        \"USR_THEME\": \"liberty\"\n    }\n];\n\nexport const getUser = async (user_id: string) =&gt; {\n    const current_user = user.find((user: any) =&gt; user.USR_ID === user_id);\n    if (!current_user) {\n        return {\n            \"items\": [],\n            \"status\": \"failed\",\n        };\n    }\n    return {\n        \"items\": [current_user],\n        \"status\": \"success\",\n    };\n};\n\nexport const currentUser: IUsersProps = {\n    [EUsers.status]: true,\n    [EUsers.id]: \"demo\",\n    [EUsers.name]: \"Demo User\",\n    [EUsers.email]: \"demo@liberty.fr\",\n    [EUsers.password]: \"\",\n    [EUsers.admin]: \"Y\",\n    [EUsers.language]: \"en\",\n    [EUsers.displayMode]: UIDisplayMode.dark,\n    [EUsers.darkMode]: true,\n    [EUsers.readonly]: \"N\",\n    [EUsers.dashboard]: undefined,\n    [EUsers.theme]: \"liberty\"\n};\n</code></pre>"},{"location":"liberty/core/components/main-components/users/#how-to-override-in-appprovider","title":"How to Override in <code>AppProvider</code>","text":"<p>To override the default user data, pass the function when setting up <code>AppProvider</code>:</p> <pre><code>&lt;AppProvider\n    getModules={getModules}\n    getApplications={getApplications}\n    getToken={getToken}\n    getUser={async () =&gt; getUser}  // Override default user retrieval\n    getMenus={getMenus}\n    getDashboard={getDashboard}\n&gt;\n    &lt;AppsContent /&gt;\n&lt;/AppProvider&gt;\n</code></pre> <p>By overriding <code>getUser</code>, you can: - Customize authentication logic (e.g., external APIs, LDAP, etc.). - Implement different role-based configurations. - Dynamically fetch user preferences from external services.</p>"},{"location":"liberty/core/components/main-components/users/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/button/","title":"Styled Button Components","text":""},{"location":"liberty/core/components/styled-elements/button/#description","title":"Description","text":"<p>The <code>Button</code> component in Liberty Core is a styled button that provides consistent theming and behavior across applications. The framework also includes multiple predefined <code>Button</code> components for specific use cases.</p>"},{"location":"liberty/core/components/styled-elements/button/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>\"text\", \"contained\", \"outlined\"</code> <code>\"text\"</code> Defines the button's appearance. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the button when set to true. <code>size</code> <code>\"small\", \"medium\", \"large\"</code>, <code>\"medium\"</code> Defines the size of the button. <code>onClick</code> <code>() =&gt; void</code> <code>undefined</code> Callback function triggered when clicked."},{"location":"liberty/core/components/styled-elements/button/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/button/#basic-styled-button","title":"Basic Styled Button","text":"<pre><code>import { Button } from '@nomana-it/liberty-core';\n\nexport const StyledButtonExample = () =&gt; {\n  return (\n    &lt;Button variant=\"contained\"&gt;\n      Click Me\n    &lt;/Button&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/button/#predefined-styled-buttons","title":"Predefined Styled Buttons","text":"<p>Liberty Core provides a collection of predefined styled <code>Button</code> components to simplify UI development.</p>"},{"location":"liberty/core/components/styled-elements/button/#general-styled-buttons","title":"General Styled Buttons","text":"<ul> <li><code>Button_Login</code></li> <li><code>Button_UISettings</code></li> <li><code>Button_TableImport</code></li> <li><code>Button_Tools</code></li> <li><code>Button_Popper</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/button/#detailed-predefined-buttons","title":"Detailed Predefined Buttons","text":""},{"location":"liberty/core/components/styled-elements/button/#button_login","title":"Button_Login","text":"<p>Used for login forms with hover effects and scaling.</p> <pre><code>import { Button_Login } from '@nomana-it/liberty-core';\n\n&lt;Button_Login variant=\"contained\"&gt;\n  Login\n&lt;/Button_Login&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/button/#button_uisettings","title":"Button_UISettings","text":"<p>Styled button for user interface settings.</p> <pre><code>import { Button_UISettings } from '@nomana-it/liberty-core';\n\n&lt;Button_UISettings variant=\"outlined\"&gt;\n  Settings\n&lt;/Button_UISettings&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/button/#button_tableimport","title":"Button_TableImport","text":"<p>A button designed for importing data into tables.</p> <pre><code>import { Button_TableImport } from '@nomana-it/liberty-core';\n\n&lt;Button_TableImport variant=\"contained\"&gt;\n  Import Data\n&lt;/Button_TableImport&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/button/#button_tools","title":"Button_Tools","text":"<p>A prominent button for tool-related actions with custom padding and border-radius.</p> <pre><code>import { Button_Tools } from '@nomana-it/liberty-core';\n\n&lt;Button_Tools variant=\"contained\"&gt;\n  Tools\n&lt;/Button_Tools&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/button/#button_popper","title":"Button_Popper","text":"<p>A floating button positioned at the bottom-right corner of the UI.</p> <pre><code>import { Button_Popper } from '@nomana-it/liberty-core';\n\n&lt;Button_Popper variant=\"contained\"&gt;\n  Popper Action\n&lt;/Button_Popper&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/button/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/card/","title":"Styled Card Components","text":""},{"location":"liberty/core/components/styled-elements/card/#description","title":"Description","text":"<p>The <code>Card</code> component in Liberty Core provides a customizable UI container with support for elevation, transitions, and interactions. The framework also includes multiple predefined <code>Card</code> components designed for specific use cases.</p>"},{"location":"liberty/core/components/styled-elements/card/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>\"outlined\", \"elevated\"</code> <code>\"outlined\"</code> Defines the card's border and elevation. <code>isSelected</code> <code>boolean</code> <code>false</code> Highlights the card when selected. <code>elevation</code> <code>number</code> <code>1</code> Applies Material-like shadow elevation. <code>onClick</code> <code>() =&gt; void</code> <code>undefined</code> Callback function triggered when clicked."},{"location":"liberty/core/components/styled-elements/card/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/card/#basic-styled-card","title":"Basic Styled Card","text":"<pre><code>import { Card } from '@nomana-it/liberty-core';\n\nexport const StyledCardExample = () =&gt; {\n  return (\n    &lt;Card elevation={2}&gt;\n      &lt;CardContent&gt;\n        This is a styled card with elevation.\n      &lt;/CardContent&gt;\n    &lt;/Card&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/card/#predefined-styled-cards","title":"Predefined Styled Cards","text":"<p>Liberty Core provides a collection of predefined styled <code>Card</code> components to simplify UI development.</p>"},{"location":"liberty/core/components/styled-elements/card/#general-styled-cards","title":"General Styled Cards","text":"<ul> <li><code>Card_AppsLogin</code></li> <li><code>Card_Dashboard</code></li> <li><code>CardActionArea_FormsTools</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/card/#detailed-predefined-cards","title":"Detailed Predefined Cards","text":""},{"location":"liberty/core/components/styled-elements/card/#card_appslogin","title":"Card_AppsLogin","text":"<p>A login card with a hover effect and primary color selection.</p> <pre><code>import { Card_AppsLogin } from '@nomana-it/liberty-core';\n\n&lt;Card_AppsLogin isSelected={true}&gt;\n  &lt;CardContent&gt;Login Card&lt;/CardContent&gt;\n&lt;/Card_AppsLogin&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/card/#card_dashboard","title":"Card_Dashboard","text":"<p>A styled dashboard card with a border and flex support.</p> <pre><code>import { Card_Dashboard } from '@nomana-it/liberty-core';\n\n&lt;Card_Dashboard&gt;\n  &lt;CardContent&gt;Dashboard Content&lt;/CardContent&gt;\n&lt;/Card_Dashboard&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/card/#cardactionarea_formstools","title":"CardActionArea_FormsTools","text":"<p>An interactive card action area for form tools.</p> <pre><code>import { CardActionArea_FormsTools } from '@nomana-it/liberty-core';\n\n&lt;CardActionArea_FormsTools&gt;\n  &lt;CardContent&gt;Click Me&lt;/CardContent&gt;\n&lt;/CardActionArea_FormsTools&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/card/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/dialog/","title":"Styled Dialog Components","text":""},{"location":"liberty/core/components/styled-elements/dialog/#description","title":"Description","text":"<p>The <code>Dialog</code> components provide structured elements for building modal dialogs with proper styling, responsiveness, and accessibility.</p>"},{"location":"liberty/core/components/styled-elements/dialog/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>\"primary\", \"secondary\"</code> <code>\"primary\"</code> Defines the typography variant for the title. <code>fontSize</code> <code>string, number</code> <code>18px</code> Defines the font size of the title. <code>fontWeight</code> <code>string, number</code> <code>bold</code> Sets the font weight of the title. <code>background</code> <code>string</code> <code>theme.background.default</code> Background color of the dialog content or actions. <code>padding</code> <code>string, number</code> <code>theme.spacing(2)</code> Defines padding for dialog components. <code>borderTop</code> <code>string</code> <code>theme.palette.divider</code> Adds a separator on top of the actions container. <code>overflowY</code> <code>string</code> <code>auto</code> Enables vertical scrolling for long content."},{"location":"liberty/core/components/styled-elements/dialog/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/dialog/#basic-dialog-title","title":"Basic Dialog Title","text":"<pre><code>import { Dialog_Title } from '@nomana-it/liberty-core';\n\nexport const DialogTitleExample = () =&gt; {\n  return (\n    &lt;Dialog_Title&gt;\n      Dialog Header\n    &lt;/Dialog_Title&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/dialog/#predefined-styled-dialog-components","title":"Predefined Styled Dialog Components","text":"<p>Liberty Core provides a collection of predefined styled <code>Dialog</code> components to simplify modal UI development.</p>"},{"location":"liberty/core/components/styled-elements/dialog/#general-styled-dialog-components","title":"General Styled Dialog Components","text":"<ul> <li><code>Dialog_Title</code></li> <li><code>Dialog_Content</code></li> <li><code>Dialog_Actions</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/dialog/#detailed-predefined-components","title":"Detailed Predefined Components","text":""},{"location":"liberty/core/components/styled-elements/dialog/#dialog_title","title":"Dialog_Title","text":"<p>A styled typography component for dialog headers.</p> <pre><code>import { Dialog_Title } from '@nomana-it/liberty-core';\n\n&lt;Dialog_Title&gt;\n  Dialog Header\n&lt;/Dialog_Title&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/dialog/#dialog_content","title":"Dialog_Content","text":"<p>A scrollable container for dialog content.</p> <pre><code>import { Dialog_Content } from '@nomana-it/liberty-core';\n\n&lt;Dialog_Content&gt;\n  This is the content inside a dialog.\n&lt;/Dialog_Content&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/dialog/#dialog_actions","title":"Dialog_Actions","text":"<p>A flex container for dialog action buttons.</p> <pre><code>import { Dialog_Actions } from '@nomana-it/liberty-core';\nimport { Button } from '@nomana-it/liberty-core';\n\n&lt;Dialog_Actions&gt;\n  &lt;Button variant=\"outlined\"&gt;Cancel&lt;/Button&gt;\n  &lt;Button variant=\"contained\"&gt;Confirm&lt;/Button&gt;\n&lt;/Dialog_Actions&gt;\n</code></pre>"},{"location":"liberty/core/components/styled-elements/dialog/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/div/","title":"Styled Div Components","text":""},{"location":"liberty/core/components/styled-elements/div/#description","title":"Description","text":"<p>The <code>Div</code> component is a styled wrapper based on <code>styled.div</code> from Emotion. It provides a flexible and reusable way to apply styles consistently across different UI elements. The library also includes multiple predefined <code>Div</code> components for various use cases.</p>"},{"location":"liberty/core/components/styled-elements/div/#props","title":"Props","text":"Prop Type Default Description <code>display</code> <code>string</code> <code>block</code> Defines the CSS display property. Supports 'flex', 'grid', etc. <code>flexDirection</code> <code>'row' | 'row-reverse' | 'column' | 'column-reverse'</code> <code>undefined</code> Sets the flex direction when using flexbox. <code>justifyContent</code> <code>string</code> <code>undefined</code> Aligns children within the div along the main axis. <code>alignItems</code> <code>string</code> <code>undefined</code> Aligns children within the div along the cross-axis. <code>gap</code> <code>string, number</code> <code>undefined</code> Specifies the spacing between child elements. <code>padding</code> <code>string, number</code> <code>undefined</code> Defines padding inside the div. <code>margin</code> <code>string, number</code> <code>undefined</code> Defines margin outside the div. <code>position</code> <code>'static', 'relative', 'absolute', 'fixed', 'sticky'</code> <code>undefined</code> Sets the CSS positioning of the div. <code>width</code> <code>string, number</code> <code>undefined</code> Defines the width of the div. <code>elevation</code> <code>number</code> <code>0</code> Applies Material-like shadow elevation to the div (0-5 levels supported)."},{"location":"liberty/core/components/styled-elements/div/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/div/#basic-styled-div","title":"Basic Styled Div","text":"<pre><code>import { Div } from '@nomana-it/liberty-core';\n\nexport const StyledDivExample = () =&gt; {\n  return (\n    &lt;Div display=\"flex\" justifyContent=\"center\" alignItems=\"center\" padding=\"16px\" background=\"#f0f0f0\"&gt;\n      This is a styled div with flexbox properties.\n    &lt;/Div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/div/#predefined-styled-components","title":"Predefined Styled Components","text":"<p>Liberty Core provides a collection of predefined styled <code>Div</code> components to simplify UI development.</p>"},{"location":"liberty/core/components/styled-elements/div/#general-styled-divs","title":"General Styled Divs","text":"<ul> <li><code>Div</code></li> <li><code>Div_Users</code></li> <li><code>Div_UISettings</code></li> <li><code>Div_AppsLogin</code></li> <li><code>Div_ColumnsFilter</code></li> <li><code>Div_Export</code></li> <li><code>Div_Loading</code></li> <li><code>Div_Login</code></li> <li><code>Div_AutoComplete</code></li> <li><code>Div_AutoCompleteInput</code></li> <li><code>Div_FormsToolsCard</code></li> <li><code>Div_ContentWrapper</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/div/#dialog-and-widget-components","title":"Dialog and Widget Components","text":"<ul> <li><code>Div_DialogToolbar</code></li> <li><code>Div_DialogToolbarButtons</code></li> <li><code>Div_DialogToolbarButtonsEnd</code></li> <li><code>Div_DialogWidget</code></li> <li><code>Div_DialogWidgetTitle</code></li> <li><code>Div_DialogWidgetTitleButtons</code></li> <li><code>Div_DialogWidgetContent</code></li> <li><code>Div_DialogWidgetButtons</code></li> <li><code>Div_DialogTabPanel</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/div/#table-and-grid-components","title":"Table and Grid Components","text":"<ul> <li><code>Div_TableToolbar</code></li> <li><code>Div_TableToolbarButtons</code></li> <li><code>Div_TableProgress</code></li> <li><code>Div_TableHeaderContent</code></li> <li><code>Div_TableHeaderButtons</code></li> <li><code>Div_TableHeaderReisze</code></li> <li><code>Div_TableResultsOverlay</code></li> <li><code>Div_TableFooter</code></li> <li><code>Div_TableFooterContent</code></li> <li><code>Div_TableCell</code></li> <li><code>Div_TableGrid</code></li> <li><code>Div_TableGridContent</code></li> <li><code>Div_TableTreeTitle</code></li> <li><code>Div_TableList</code></li> <li><code>Div_TableFilters</code></li> <li><code>Div_TableToolbarButtons</code></li> <li><code>Div_TableExpander</code></li> <li><code>Div_TableSearch</code></li> <li><code>Div_TableColumnsChooser</code></li> <li><code>Div_TableAllColumnsChooser</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/div/#chat-and-ai-components","title":"Chat and AI Components","text":"<ul> <li><code>Div_ChatContent</code></li> <li><code>Div_ChatActions</code></li> <li><code>Div_ChatScrollButtons</code></li> <li><code>Div_FormsChat</code></li> <li><code>Div_InputChat</code></li> <li><code>Div_AIProgress</code></li> <li><code>Div_AIError</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/div/#header-and-navigation-components","title":"Header and Navigation Components","text":"<ul> <li><code>Div_Header</code></li> <li><code>Div_HeaderDrawer</code></li> <li><code>Div_HeaderIcons</code></li> <li><code>Div_HeaderToolbar</code></li> <li><code>Div_HeaderAppBar</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/div/#drawer-components","title":"Drawer Components","text":"<ul> <li><code>Div_DrawerOverlay</code></li> <li><code>Div_DrawerContainer</code></li> <li><code>Div_DrawerContent</code></li> <li><code>Div_DrawerHeader</code></li> <li><code>Div_DrawerPanel</code></li> <li><code>Div_DrawerPanelDynamic</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/div/#specialized-ui-components","title":"Specialized UI Components","text":"<ul> <li><code>Div_ExportGroup</code></li> <li><code>Div_Markdown</code></li> <li><code>Div_Inline</code></li> <li><code>Div_TableFab</code></li> <li><code>Div_ResizeBox</code></li> <li><code>Div_ColorPicker</code></li> <li><code>Div_ColorPickerPreview</code></li> <li><code>Div_InputColor</code></li> <li><code>Div_ListItem</code></li> <li><code>Div_ListItemText</code></li> <li><code>Div_FormsListView</code></li> <li><code>Div_StyledGridOverlay</code></li> <li><code>Div_ChatTitle</code></li> <li><code>Div_DialogWidgetTitle</code></li> <li><code>Div_DialogWidgetButtons</code></li> <li><code>Div_TabPanelContent</code></li> <li><code>Div_AppsLayout</code></li> <li><code>Div_AppsTabsHeader</code></li> <li><code>Div_AppsDialogTabPanel</code> ```</li> </ul>"},{"location":"liberty/core/components/styled-elements/div/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/form/","title":"Styled Form Components","text":""},{"location":"liberty/core/components/styled-elements/form/#description","title":"Description","text":"<p>The <code>Form</code> components provide styled wrappers for HTML forms, ensuring consistent spacing and layout in authentication pages and user input sections.</p>"},{"location":"liberty/core/components/styled-elements/form/#props","title":"Props","text":"Prop Type Default Description <code>width</code> <code>string | number</code> <code>100%</code> Defines the form width to ensure proper responsiveness. <code>marginTop</code> <code>string | number</code> <code>theme.spacing(1)</code> Sets the top margin for spacing and alignment."},{"location":"liberty/core/components/styled-elements/form/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/form/#basic-login-form","title":"Basic Login Form","text":"<pre><code>import { Form_Login } from '@nomana-it/liberty-core';\n\nexport const LoginFormExample = () =&gt; {\n  return (\n    &lt;Form_Login&gt;\n        &lt;Div_AppsLogin&gt;\n            &lt;Input_White\n                variant=\"standard\"\n                required\n                fullWidth\n                id=\"userid\"\n                label={t(\"login.userid\")}\n                name=\"user\"\n                autoComplete=\"user\"\n                autoFocus\n            /&gt;\n        &lt;/Div_AppsLogin&gt;\n        &lt;Div_AppsLogin&gt;\n            &lt;Input_White\n                variant=\"standard\"\n                required\n                fullWidth\n                name=\"password\"\n                label={t(\"login.password\")}\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"off\"\n            /&gt;\n        &lt;/Div_AppsLogin&gt;\n        &lt;Button_Login type=\"submit\" fullWidth variant=\"contained\"&gt;\n            {t(\"login.loginButton\")}\n        &lt;/Button_Login&gt;\n    &lt;/Form_Login&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/form/#predefined-styled-form-components","title":"Predefined Styled Form Components","text":"<p>Liberty Core provides predefined styled <code>form</code> components to simplify UI development.</p>"},{"location":"liberty/core/components/styled-elements/form/#general-styled-forms","title":"General Styled Forms","text":"<ul> <li><code>Form_Login</code></li> </ul> <p>```</p>"},{"location":"liberty/core/components/styled-elements/form/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/global-styles/","title":"Global Styles","text":""},{"location":"liberty/core/components/styled-elements/global-styles/#description","title":"Description","text":"<p>The <code>GlobalStyles</code> component applies system-wide styles using <code>@emotion/react</code>'s <code>Global</code> API. These styles ensure consistent typography, spacing, and UI appearance across the application.</p>"},{"location":"liberty/core/components/styled-elements/global-styles/#features","title":"Features","text":"<ul> <li>Box-Sizing Normalization: Ensures that all elements respect the <code>border-box</code> model.</li> <li>Scrollbar Customization: Modifies the appearance of scrollbars for a more modern look.</li> <li>Typography and Layout: Applies a consistent font, line-height, and color scheme.</li> <li>Global Reset: Removes default margin, padding, and styles from common HTML elements.</li> <li>Accessibility Improvements: Ensures proper text contrast and smooth font rendering.</li> </ul>"},{"location":"liberty/core/components/styled-elements/global-styles/#applied-styles","title":"Applied Styles","text":""},{"location":"liberty/core/components/styled-elements/global-styles/#box-sizing","title":"Box-Sizing","text":"<p>All elements, including <code>::before</code> and <code>::after</code>, inherit the <code>border-box</code> model for better layout consistency.</p>"},{"location":"liberty/core/components/styled-elements/global-styles/#scrollbar-customization","title":"Scrollbar Customization","text":"<ul> <li>Width and height adjustments for both vertical and horizontal scrollbars.</li> <li>Styled scrollbar track, thumb, and corner to match the theme.</li> <li>Firefox-specific styles using <code>scrollbar-width</code> and <code>scrollbar-color</code>.</li> </ul>"},{"location":"liberty/core/components/styled-elements/global-styles/#typography-layout","title":"Typography &amp; Layout","text":"<ul> <li>Applies a default font stack: <code>Roboto, Helvetica, Arial, sans-serif</code>.</li> <li>Uses a dynamic color scheme based on the theme (light/dark mode).</li> <li>Enhances font rendering for better readability.</li> </ul>"},{"location":"liberty/core/components/styled-elements/global-styles/#element-reset","title":"Element Reset","text":"<ul> <li>Removes default padding and margin from key HTML elements.</li> <li>Normalizes list styles, anchor tags, tables, and headers.</li> </ul>"},{"location":"liberty/core/components/styled-elements/global-styles/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/global-styles/#applying-global-styles-in-the-application","title":"Applying Global Styles in the Application","text":"<pre><code>import GlobalStyles from \"@nomana-it/liberty-core/styles/GlobalStyles\";\n\nexport const App = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;GlobalStyles /&gt;\n      &lt;div&gt;\n        &lt;h1&gt;Welcome to Liberty Core&lt;/h1&gt;\n        &lt;p&gt;This app uses global styles for consistency.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/global-styles/#styling-details","title":"Styling Details","text":"CSS Property Purpose <code>box-sizing: border-box;</code> Ensures consistent sizing across all elements. <code>scrollbar-width: thin;</code> Reduces scrollbar thickness for better UX. <code>font-family: Roboto, Helvetica, Arial;</code> Standardizes typography. <code>color-scheme: dark, light;</code> Adjusts color contrast for accessibility. <code>th, td border-bottom</code> Improves table appearance. <code>html, body { overflow-x: hidden; }</code> Prevents unwanted horizontal scrolling."},{"location":"liberty/core/components/styled-elements/global-styles/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/icon-button/","title":"Styled Icon Button Components","text":""},{"location":"liberty/core/components/styled-elements/icon-button/#description","title":"Description","text":"<p>The <code>IconButton</code> components are predefined styled buttons built on top of the <code>IconButton</code> from Liberty Core. These buttons are customized for various use cases in UI interactions.</p>"},{"location":"liberty/core/components/styled-elements/icon-button/#props","title":"Props","text":"<p>The following <code>IconButton</code> variants are available:</p> Component Name Description <code>IconButton_Contrast</code> A high-contrast icon button that scales on hover. <code>IconButton_Menus</code> Positioned for menu interactions with hover effects. <code>IconButton_ListBottom</code> A floating button at the bottom-right of the page. <code>IconButton_TabClose</code> A circular button for closing tabs with hover effects. <code>IconButton_Alert</code> A minimal button for alerts with centered alignment."},{"location":"liberty/core/components/styled-elements/icon-button/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/icon-button/#basic-styled-icon-buttons","title":"Basic Styled Icon Buttons","text":"<pre><code>import { IconButton_Contrast, IconButton_Menus, IconButton_ListBottom } from '@nomana-it/liberty-core';\n\nexport const IconButtonExample = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;IconButton_Contrast&gt;\ud83d\udd0d&lt;/IconButton_Contrast&gt;\n      &lt;IconButton_Menus&gt;\ud83d\udccb&lt;/IconButton_Menus&gt;\n      &lt;IconButton_ListBottom&gt;\u2b07\ufe0f&lt;/IconButton_ListBottom&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/icon-button/#styled-icon-button-components_1","title":"Styled Icon Button Components","text":"<ul> <li><code>IconButton_Contrast</code></li> <li><code>IconButton_Menus</code></li> <li><code>IconButton_ListBottom</code></li> <li><code>IconButton_TabClose</code></li> <li><code>IconButton_Alert</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/icon-button/#notes","title":"Notes","text":"<ul> <li>These components ensure consistent styling for icon buttons across the UI.</li> <li>They inherit all behaviors from the standard <code>IconButton</code> component.</li> <li>The hover effects enhance usability with scaling and color transitions.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icon-button/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/icons/","title":"Icon Components","text":""},{"location":"liberty/core/components/styled-elements/icons/#description","title":"Description","text":"<p>The Liberty Core Icon Set provides a predefined collection of Material Icons and Font Awesome Icons wrapped in a standardized interface for easier integration. The components are categorized for UI consistency and accessibility.</p>"},{"location":"liberty/core/components/styled-elements/icons/#features","title":"Features","text":"<p>\u2705 Pre-styled Material and Font Awesome Icons \u2705 Easy to use with standard React components \u2705 Support for color themes and custom sizes </p>"},{"location":"liberty/core/components/styled-elements/icons/#usage","title":"Usage","text":""},{"location":"liberty/core/components/styled-elements/icons/#example-usage","title":"Example Usage:","text":"<pre><code>import { LYSearchIcon } from '@nomana-it/liberty-core';\n\nexport const IconExample = () =&gt; {\n  return &lt;LYSearchIcon size=\"24px\" color=\"primary\" /&gt;;\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/icons/#predefined-icon-components","title":"Predefined Icon Components","text":""},{"location":"liberty/core/components/styled-elements/icons/#general-ui-icons","title":"General UI Icons","text":"<ul> <li><code>LYMenuIcon</code> \u2014 Navigation menu icon.</li> <li><code>LYMenuOpenIcon</code> \u2014 Expanded menu icon.</li> <li><code>LYDashboardIcon</code> \u2014 Dashboard navigation.</li> <li><code>LYLightModeIcon</code> \u2014 Light mode theme toggle.</li> <li><code>LYDarkModeIcon</code> \u2014 Dark mode theme toggle.</li> <li><code>LYNotificationsIcon</code> \u2014 Notifications indicator.</li> <li><code>LYLogoutIcon</code> \u2014 Logout action.</li> <li><code>LYAccountCircleIcon</code> \u2014 User profile icon.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icons/#action-icons","title":"Action Icons","text":"<ul> <li><code>LYCloseIcon</code> \u2014 Close dialogs or modals.</li> <li><code>LYCheckIcon</code> \u2014 Success confirmation.</li> <li><code>LYClearIcon</code> \u2014 Clear input fields or selections.</li> <li><code>LYSaveIcon</code> \u2014 Save or confirm actions.</li> <li><code>LYCancelIcon</code> \u2014 Cancel or dismiss actions.</li> <li><code>LYEditIcon</code> \u2014 Edit or modify content.</li> <li><code>LYDeleteIcon</code> \u2014 Delete an item.</li> <li><code>LYHelpIcon</code> \u2014 Information or help icon.</li> <li><code>LYSettingsIcon</code> \u2014 Settings or configurations.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icons/#navigation-direction-icons","title":"Navigation &amp; Direction Icons","text":"<ul> <li><code>LYArrowDownwardIcon</code> \u2014 Downward navigation.</li> <li><code>LYArrowUpwardIcon</code> \u2014 Upward navigation.</li> <li><code>LYArrowRightIcon</code> \u2014 Move forward.</li> <li><code>LYArrowLeftIcon</code> \u2014 Move backward.</li> <li><code>LYArrowCircleUpIcon</code> \u2014 Emphasized upward action.</li> <li><code>LYArrowCircleDownIcon</code> \u2014 Emphasized downward action.</li> <li><code>LYArrowCircleRightIcon</code> \u2014 Emphasized rightward action.</li> <li><code>LYExpandLessIcon</code> \u2014 Collapse UI elements.</li> <li><code>LYExpandMoreIcon</code> \u2014 Expand UI elements.</li> <li><code>LYUnfoldMoreIcon</code> \u2014 Toggle expanded state.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icons/#file-media-icons","title":"File &amp; Media Icons","text":"<ul> <li><code>LYContentCopyIcon</code> \u2014 Copy content.</li> <li><code>LYContentPasteIcon</code> \u2014 Paste copied content.</li> <li><code>LYAttachFileIcon</code> \u2014 Attach a document.</li> <li><code>LYCloudUploadIcon</code> \u2014 Upload files.</li> <li><code>LYDownloadIcon</code> \u2014 Download files.</li> <li><code>LYUploadIcon</code> \u2014 Upload to the server.</li> <li><code>LYSaveIcon</code> \u2014 Save data.</li> <li><code>LYDeleteIcon</code> \u2014 Remove files or content.</li> <li><code>LYFileIcon</code> \u2014 General file representation.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icons/#database-developer-icons","title":"Database &amp; Developer Icons","text":"<ul> <li><code>LYDatabaseIcon</code> \u2014 Represents database-related actions.</li> <li><code>LYGitIcon</code> \u2014 Git version control.</li> <li><code>LYPortainerIcon</code> \u2014 Docker Portainer icon.</li> <li><code>LYSocketIcon</code> \u2014 Network-related operations.</li> <li><code>LYLogsIcon</code> \u2014 System logs or debugging.</li> <li><code>LYChartIcon</code> \u2014 Data analytics or reports.</li> <li><code>LYBugIcon</code> \u2014 Bug tracking or error handling.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icons/#table-grid-icons","title":"Table &amp; Grid Icons","text":"<ul> <li><code>LYViewColumnIcon</code> \u2014 View columns in tables.</li> <li><code>LYFilterListIcon</code> \u2014 Filter settings.</li> <li><code>LYFilterAltIcon</code> \u2014 Advanced filtering options.</li> <li><code>LYTableViewIcon</code> \u2014 View data in table format.</li> <li><code>LYFormatListBulletedIcon</code> \u2014 List representation.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icons/#accessibility-ui-enhancements","title":"Accessibility &amp; UI Enhancements","text":"<ul> <li><code>LYVisibilityOffIcon</code> \u2014 Hide content visibility.</li> <li><code>LYPushPinIcon</code> \u2014 Pin important items.</li> <li><code>LYMinimizeIcon</code> \u2014 Minimize elements.</li> <li><code>LYMaximizeIcon</code> \u2014 Maximize elements.</li> <li><code>LYDensitySmallIcon</code> \u2014 Compact UI view.</li> <li><code>LYDensityMediumIcon</code> \u2014 Medium UI density.</li> <li><code>LYDensityLargeIcon</code> \u2014 Expanded UI density.</li> </ul>"},{"location":"liberty/core/components/styled-elements/icons/#variant-icons","title":"Variant Icons","text":"<p>The following icons are dynamically assigned based on UI context:</p> Variant Icon Success \u2705 <code>LYSuccessIcon</code> Error \u274c <code>LYErrorIcon</code> Warning \u26a0\ufe0f <code>LYWarningIcon</code> Info \u2139\ufe0f <code>LYInfoIcon</code>"},{"location":"liberty/core/components/styled-elements/icons/#custom-themed-icons","title":"Custom Themed Icons","text":"<pre><code>import { LYReactIcon, LYSuccessIcon } from '@nomana-it/liberty-core';\n\nexport const CustomIconExample = () =&gt; {\n  return &lt;LYReactIcon icon={LYSuccessIcon} size=\"32px\" color=\"success\" /&gt;;\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/icons/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/input/","title":"Styled Input Components","text":""},{"location":"liberty/core/components/styled-elements/input/#description","title":"Description","text":"<p>The <code>Input_White</code> component is a predefined styled input field that ensures consistent text and label colors across different themes.</p> <ul> <li>This input field inherits from <code>Input</code> in Liberty Core and is styled to always display white text and labels, making it ideal for dark-themed interfaces.</li> </ul>"},{"location":"liberty/core/components/styled-elements/input/#props","title":"Props","text":"<p>The <code>Input_White</code> component inherits all the default props from the standard <code>Input</code> component in Liberty Core.</p>"},{"location":"liberty/core/components/styled-elements/input/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/input/#basic-styled-input","title":"Basic Styled Input","text":"<pre><code>import { Input_White } from '@nomana-it/liberty-core';\n\nexport const InputExample = () =&gt; {\n  return (\n    &lt;Input_White placeholder=\"Enter text here\" /&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/input/#styled-input-components_1","title":"Styled Input Components","text":"<ul> <li><code>Input_White</code>: A text input field with enforced white text and label colors.</li> </ul>"},{"location":"liberty/core/components/styled-elements/input/#notes","title":"Notes","text":"<ul> <li><code>Input_White</code> ensures high contrast for readability on dark backgrounds.</li> <li>It inherits all behaviors from the default <code>Input</code> component.</li> </ul>"},{"location":"liberty/core/components/styled-elements/input/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/list/","title":"Styled List Components","text":""},{"location":"liberty/core/components/styled-elements/list/#description","title":"Description","text":"<p>Liberty Core provides predefined styled list components to enhance UI consistency and usability.</p> <ul> <li><code>List_StaticMenus</code> is a styled version of the standard <code>List</code>, ensuring that the content does not overflow.</li> <li><code>ListItemButton_DynamicMenus</code> is an enhanced <code>ListItemButton</code> that dynamically adjusts its background when opened.</li> </ul>"},{"location":"liberty/core/components/styled-elements/list/#props","title":"Props","text":""},{"location":"liberty/core/components/styled-elements/list/#listitembutton_dynamicmenus","title":"ListItemButton_DynamicMenus","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls the background change when expanded."},{"location":"liberty/core/components/styled-elements/list/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/list/#basic-styled-list","title":"Basic Styled List","text":"<pre><code>import { List_StaticMenus, ListItemButton_DynamicMenus } from '@nomana-it/liberty-core';\n\nexport const ListExample = () =&gt; {\n  return (\n    &lt;List_StaticMenus&gt;\n      &lt;ListItemButton_DynamicMenus open={true}&gt;\n        Dynamic List Item\n      &lt;/ListItemButton_DynamicMenus&gt;\n    &lt;/List_StaticMenus&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/list/#styled-list-components_1","title":"Styled List Components","text":"<ul> <li><code>List_StaticMenus</code>: A non-overflowing styled list.</li> <li><code>ListItemButton_DynamicMenus</code>: A dynamic list item button with background changes.</li> </ul>"},{"location":"liberty/core/components/styled-elements/list/#notes","title":"Notes","text":"<ul> <li><code>ListItemButton_DynamicMenus</code> uses opacity-based background change when open.</li> <li><code>List_StaticMenus</code> ensures list content remains visually structured.</li> </ul>"},{"location":"liberty/core/components/styled-elements/list/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/main/","title":"Styled Main Components","text":""},{"location":"liberty/core/components/styled-elements/main/#description","title":"Description","text":"<p>The <code>Main</code> components are predefined styled main sections, providing a structured layout for application content.</p>"},{"location":"liberty/core/components/styled-elements/main/#props","title":"Props","text":"<p>The following <code>Main</code> variants are available:</p> Component Name Description <code>Main_Content</code> The primary content wrapper that adapts when the drawer is open. <code>Main_Login</code> A flexible container designed for login-related views."},{"location":"liberty/core/components/styled-elements/main/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/main/#basic-styled-main-components","title":"Basic Styled Main Components","text":"<pre><code>import { Main_Content, Main_Login } from '@nomana-it/liberty-core';\n\nexport const MainExample = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Main_Content&gt;\n        &lt;h1&gt;Main Content Area&lt;/h1&gt;\n      &lt;/Main_Content&gt;\n\n      &lt;Main_Login&gt;\n        &lt;h2&gt;Login Section&lt;/h2&gt;\n      &lt;/Main_Login&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/main/#styled-main-components_1","title":"Styled Main Components","text":"<ul> <li><code>Main_Content</code></li> <li><code>Main_Login</code></li> </ul>"},{"location":"liberty/core/components/styled-elements/main/#notes","title":"Notes","text":"<ul> <li>These components ensure consistent layout structure across the application.</li> <li><code>Main_Content</code> is optimized for primary application views.</li> <li><code>Main_Login</code> provides a flexible structure for login pages.</li> </ul>"},{"location":"liberty/core/components/styled-elements/main/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/menus/","title":"Styled Menu Components","text":""},{"location":"liberty/core/components/styled-elements/menus/#description","title":"Description","text":"<p>The <code>Menu_Filters</code> component is a styled version of the <code>Menu</code> component from Liberty Core. It is designed specifically for filter menus with auto-scroll behavior when content exceeds a defined height.</p>"},{"location":"liberty/core/components/styled-elements/menus/#props","title":"Props","text":"Prop Type Default Description <code>zIndex</code> <code>number</code> <code>undefined</code> Defines the stacking order (z-index) for layering."},{"location":"liberty/core/components/styled-elements/menus/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/menus/#basic-styled-menu","title":"Basic Styled Menu","text":"<pre><code>import { Menu_Filters } from '@nomana-it/liberty-core';\n\nexport const FilterMenuExample = () =&gt; {\n  return (\n    &lt;Menu_Filters zIndex={1000}&gt;\n      {/* Menu items go here */}\n    &lt;/Menu_Filters&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/menus/#styled-menu-components_1","title":"Styled Menu Components","text":"<ul> <li><code>Menu_Filters</code>: A specialized menu with scrollable content.</li> </ul>"},{"location":"liberty/core/components/styled-elements/menus/#notes","title":"Notes","text":"<ul> <li>The menu automatically adds a scrollbar if content exceeds the defined height (<code>400px</code>).</li> <li>It inherits theme properties from the Liberty Core styling system.</li> </ul>"},{"location":"liberty/core/components/styled-elements/menus/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/paper/","title":"Styled Paper Components","text":""},{"location":"liberty/core/components/styled-elements/paper/#description","title":"Description","text":"<p>The <code>Paper</code> components are predefined styled wrappers based on the <code>Div</code> component. They provide structured and reusable layouts for different UI sections, such as login forms, dashboards, and dialogs.</p>"},{"location":"liberty/core/components/styled-elements/paper/#styled-paper-components_1","title":"Styled Paper Components","text":"Component Name Description <code>Paper_Login</code> A styled paper container for login forms. <code>Paper_Table</code> A full-width, full-height wrapper for tables. <code>Paper_TableDialog</code> A paper container for table dialogs. <code>Paper_Dialogs</code> A flexible wrapper for dialog sections. <code>Paper_Dashboard</code> A structured container for dashboard sections. <code>Paper_UploadFile</code> A wrapper specifically for file upload areas. <code>Paper_FormsAI</code> A styled container for FormsAI interface. <code>Paper_TableToolbar</code> A sticky toolbar for tables. <code>Paper_DialogToolbar</code> A styled toolbar for dialogs. <code>Paper_FormsChart</code> A paper wrapper for charts. <code>Paper_Popup</code> A popup-style modal container. <code>Paper_FormsChat</code> A styled wrapper for FormsChat messages. <code>Paper_TableTree</code> A structured container for tree-like table structures."},{"location":"liberty/core/components/styled-elements/paper/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/paper/#basic-styled-paper-components","title":"Basic Styled Paper Components","text":"<pre><code>import { Paper_Login, Paper_Dashboard } from '@nomana-it/liberty-core';\n\nexport const PaperExample = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Paper_Login&gt;\n        &lt;h2&gt;Login Form&lt;/h2&gt;\n      &lt;/Paper_Login&gt;\n\n      &lt;Paper_Dashboard&gt;\n        &lt;h1&gt;Dashboard Content&lt;/h1&gt;\n      &lt;/Paper_Dashboard&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/paper/#notes","title":"Notes","text":"<ul> <li>These components ensure consistent layout structure across the application.</li> <li><code>Paper_Login</code> provides a semi-transparent background with adaptive styling.</li> <li><code>Paper_Table</code> and <code>Paper_TableDialog</code> are optimized for data tables.</li> <li><code>Paper_FormsAI</code> and <code>Paper_FormsChat</code> enable intelligent form processing and chat interactions.</li> </ul>"},{"location":"liberty/core/components/styled-elements/paper/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/stack/","title":"Styled Stack Components","text":""},{"location":"liberty/core/components/styled-elements/stack/#description","title":"Description","text":"<p>The <code>Stack</code> components are predefined styled wrappers based on the <code>Div</code> component. They provide structured and reusable layouts for arranging UI elements in a stack-like format.</p>"},{"location":"liberty/core/components/styled-elements/stack/#styled-stack-components_1","title":"Styled Stack Components","text":"Component Name Description <code>Stack_FormsTable</code> A structured stack container for FormsTable elements. <code>Stack_Table</code> A full-width, full-height container for tables. <code>Stack_Dialogs</code> A stack container for dialog sections. <code>Stack_FormsAI</code> A structured stack for FormsAI interface. <code>Stack_FormsChart</code> A stack container for chart layouts. <code>Stack_SnackMessage</code> A fixed-position stack for snack messages (notifications)."},{"location":"liberty/core/components/styled-elements/stack/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/stack/#basic-styled-stack-components","title":"Basic Styled Stack Components","text":"<pre><code>import { Stack_FormsTable, Stack_Dialogs } from '@nomana-it/liberty-core';\n\nexport const StackExample = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Stack_FormsTable&gt;\n        &lt;h2&gt;Forms Table Content&lt;/h2&gt;\n      &lt;/Stack_FormsTable&gt;\n\n      &lt;Stack_Dialogs&gt;\n        &lt;h1&gt;Dialog Content&lt;/h1&gt;\n      &lt;/Stack_Dialogs&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/stack/#notes","title":"Notes","text":"<ul> <li>These components ensure consistent stacking behavior across the application.</li> <li><code>Stack_FormsTable</code> and <code>Stack_Table</code> provide full-screen table support.</li> <li><code>Stack_FormsAI</code> and <code>Stack_FormsChart</code> enable AI-driven form processing and visualizations.</li> <li><code>Stack_SnackMessage</code> is positioned at the bottom right for displaying notification messages.</li> </ul>"},{"location":"liberty/core/components/styled-elements/stack/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/table/","title":"Styled Table Components","text":""},{"location":"liberty/core/components/styled-elements/table/#description","title":"Description","text":"<p>The <code>Table</code> components are predefined styled wrappers based on the <code>TableCell</code>, <code>TableRow</code>, and <code>Div</code> components. These components provide structured table layouts with enhanced styling for header rows, checkboxes, and row selection.</p>"},{"location":"liberty/core/components/styled-elements/table/#styled-table-components_1","title":"Styled Table Components","text":"Component Name Description <code>TableContainer</code> A styled container wrapping the table for proper layout and scrolling. <code>TableRow_Header</code> A header row with a styled background and color. <code>TableCell_HeaderCheckbox</code> A sticky checkbox cell for table headers. <code>TableCell_Checkbox</code> A sticky checkbox cell for table rows. <code>TableRow_Selected</code> A row component that highlights selection state. <code>TableCell_Tanstack</code> A styled table cell supporting TanStack Table."},{"location":"liberty/core/components/styled-elements/table/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/table/#basic-styled-table-components","title":"Basic Styled Table Components","text":"<pre><code>import { TableContainer, TableRow_Header, TableCell_Checkbox } from '@nomana-it/liberty-core';\n\nexport const TableExample = () =&gt; {\n  return (\n    &lt;TableContainer&gt;\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;TableRow_Header&gt;\n            &lt;TableCell_Checkbox&gt;\n              &lt;input type=\"checkbox\" /&gt;\n            &lt;/TableCell_Checkbox&gt;\n            &lt;th&gt;Column 1&lt;/th&gt;\n            &lt;th&gt;Column 2&lt;/th&gt;\n          &lt;/TableRow_Header&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;tr&gt;\n            &lt;TableCell_Checkbox&gt;\n              &lt;input type=\"checkbox\" /&gt;\n            &lt;/TableCell_Checkbox&gt;\n            &lt;td&gt;Data 1&lt;/td&gt;\n            &lt;td&gt;Data 2&lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/TableContainer&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/table/#notes","title":"Notes","text":"<ul> <li><code>TableContainer</code> ensures proper scrolling and layout.</li> <li><code>TableRow_Header</code> provides custom header row styling.</li> <li><code>TableCell_Checkbox</code> and <code>TableCell_HeaderCheckbox</code> are sticky for better usability.</li> <li><code>TableRow_Selected</code> helps indicate selected rows visually.</li> <li><code>TableCell_Tanstack</code> is optimized for TanStack Table column sizes and alignment.</li> </ul>"},{"location":"liberty/core/components/styled-elements/table/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/tabs/","title":"Styled Tabs Components","text":""},{"location":"liberty/core/components/styled-elements/tabs/#description","title":"Description","text":"<p>The <code>Tabs</code> and <code>Tab</code> components are predefined styled wrappers based on the <code>Tabs</code> and <code>Tab</code> components from Liberty Core. These components provide consistent styling for tabbed navigation in dialogs.</p>"},{"location":"liberty/core/components/styled-elements/tabs/#styled-tabs-components_1","title":"Styled Tabs Components","text":"Component Name Description <code>Tabs_Dialogs</code> A styled container for tabbed navigation inside dialogs. <code>Tab_Dialogs</code> A styled tab with enhanced styles for dialog interactions."},{"location":"liberty/core/components/styled-elements/tabs/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/tabs/#basic-styled-tabs","title":"Basic Styled Tabs","text":"<pre><code>import { Tabs_Dialogs, Tab_Dialogs } from '@nomana-it/liberty-core';\n\nexport const TabsExample = () =&gt; {\n  return (\n    &lt;Tabs_Dialogs&gt;\n      &lt;Tab_Dialogs label=\"Tab 1\" /&gt;\n      &lt;Tab_Dialogs label=\"Tab 2\" /&gt;\n      &lt;Tab_Dialogs label=\"Tab 3\" /&gt;\n    &lt;/Tabs_Dialogs&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/tabs/#notes","title":"Notes","text":"<ul> <li><code>Tabs_Dialogs</code> ensures consistent styling for dialog-based navigation.</li> <li><code>Tab_Dialogs</code> provides customized styling for tabs, including:</li> <li>Small Caps Font Variant</li> <li>Padding &amp; Border Radius</li> <li>Box Shadows for Hover Effects</li> </ul>"},{"location":"liberty/core/components/styled-elements/tabs/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/styled-elements/typography/","title":"Styled Typography Components","text":""},{"location":"liberty/core/components/styled-elements/typography/#description","title":"Description","text":"<p>The <code>Typography</code> components are predefined styled wrappers based on the <code>Typography</code> component from Liberty Core. These components provide consistent styling for displaying text across different UI elements.</p>"},{"location":"liberty/core/components/styled-elements/typography/#styled-typography-components_1","title":"Styled Typography Components","text":"Component Name Description <code>Typo_Loading</code> A styled text component for displaying loading messages. <code>Typo_ListItemText</code> A styled list item text with selection styles. <code>Typo_ExportTitle</code> A bold and stylized title for export sections. <code>Typo_AppsName</code> A styled application name with a custom font."},{"location":"liberty/core/components/styled-elements/typography/#props","title":"Props","text":""},{"location":"liberty/core/components/styled-elements/typography/#typo_loading","title":"Typo_Loading","text":"Prop Type Default Description <code>color</code> <code>EStandardColor | string</code> <code>inherit</code> Custom text color. <code>isThemeColor</code> <code>boolean</code> <code>false</code> If true, applies the theme's default color."},{"location":"liberty/core/components/styled-elements/typography/#example-usage","title":"Example Usage","text":""},{"location":"liberty/core/components/styled-elements/typography/#styled-loading-text","title":"Styled Loading Text","text":"<pre><code>import { Typo_Loading } from '@nomana-it/liberty-core';\n\nexport const LoadingExample = () =&gt; {\n  return (\n    &lt;Typo_Loading color=\"error\" isThemeColor={false}&gt;\n      Loading, please wait...\n    &lt;/Typo_Loading&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/typography/#styled-list-item-text","title":"Styled List Item Text","text":"<pre><code>import { Typo_ListItemText } from '@nomana-it/liberty-core';\n\nexport const ListItemExample = () =&gt; {\n  return (\n    &lt;Typo_ListItemText selected={true}&gt;\n      Selected List Item\n    &lt;/Typo_ListItemText&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/styled-elements/typography/#notes","title":"Notes","text":"<ul> <li><code>Typo_Loading</code> provides consistent text styling for loading indicators.</li> <li><code>Typo_ListItemText</code> styles list items with bold highlights when selected.</li> <li><code>Typo_ExportTitle</code> ensures consistent styling for export titles.</li> <li><code>Typo_AppsName</code> customizes application names with a unique font.</li> </ul>"},{"location":"liberty/core/components/styled-elements/typography/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/tables-lists/context-menus/","title":"Menu Component","text":""},{"location":"liberty/core/components/tables-lists/context-menus/#description","title":"Description","text":"<p>The <code>Menu</code> component is a floating menu that appears next to an anchor element. It supports different placements, can be used for contextual actions, and can be wrapped inside a <code>Popper</code>.</p>"},{"location":"liberty/core/components/tables-lists/context-menus/#props","title":"Props","text":""},{"location":"liberty/core/components/tables-lists/context-menus/#menu-props","title":"Menu Props","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls the visibility of the menu. <code>anchorEl</code> <code>HTMLElement | null | undefined</code> <code>undefined</code> The element that the menu is anchored to. <code>anchorPosition</code> <code>{ top: number; left: number }</code> <code>undefined</code> Manually position the menu. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback when the menu is closed. <code>placement</code> <code>\"bottom-start\" | \"bottom-end\" | \"top-start\" | \"top-end\"</code> <code>\"bottom-start\"</code> The position of the menu relative to the anchor. <code>zIndex</code> <code>number</code> <code>DefaultZIndex.Menus</code> Controls the stacking order. <code>preventBrowserContextMenu</code> <code>boolean</code> <code>false</code> Prevents the default browser context menu from appearing."},{"location":"liberty/core/components/tables-lists/context-menus/#menuitem-props","title":"MenuItem Props","text":"Prop Type Default Description <code>onClick</code> <code>() =&gt; void</code> <code>undefined</code> Function triggered when the item is clicked. <code>startIcon</code> <code>ReactNode | React.ElementType</code> <code>undefined</code> Icon to be displayed before the text."},{"location":"liberty/core/components/tables-lists/context-menus/#submenu-props","title":"SubMenu Props","text":"Prop Type Default Description <code>label</code> <code>string</code> Required The text displayed on the submenu item. <code>startIcon</code> <code>ReactNode | React.ElementType</code> <code>undefined</code> Icon to be displayed before the text. <code>children</code> <code>ReactNode</code> Required The submenu content."},{"location":"liberty/core/components/tables-lists/context-menus/#example-usage","title":"Example Usage","text":"<pre><code>import { useState } from \"react\";\nimport { Menu, MenuItem, SubMenu, Popper, Divider, Button } from \"@nomana-it/liberty-core\"\n\nexport const MenuExample = () =&gt; {\n  const [anchorEl, setAnchorEl] = useState&lt;HTMLElement | null&gt;(null);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = (event: React.MouseEvent&lt;HTMLElement&gt;) =&gt; {\n    setAnchorEl(event.currentTarget);\n    setOpen(true);\n  };\n\n  const handleClose = () =&gt; {\n    setOpen(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;Button onClick={handleOpen}&gt;Open Context Menu&lt;/Button&gt;\n\n      &lt;Popper open={open} anchorEl={anchorEl} onClose={handleClose} placement=\"bottom-end\"&gt;\n        &lt;Menu anchorEl={anchorEl} open={open} onClose={handleClose} placement=\"bottom-end\"&gt;\n          &lt;MenuItem onClick={() =&gt; alert(\"Action 1 clicked\")}&gt;Action 1&lt;/MenuItem&gt;\n          &lt;MenuItem onClick={() =&gt; alert(\"Action 2 clicked\")}&gt;Action 2&lt;/MenuItem&gt;\n          &lt;Divider /&gt;\n          &lt;SubMenu label=\"More Options\"&gt;\n            &lt;MenuItem onClick={() =&gt; alert(\"Sub Action 1 clicked\")}&gt;Sub Action 1&lt;/MenuItem&gt;\n            &lt;MenuItem onClick={() =&gt; alert(\"Sub Action 2 clicked\")}&gt;Sub Action 2&lt;/MenuItem&gt;\n          &lt;/SubMenu&gt;\n          &lt;Divider /&gt;\n          &lt;MenuItem onClick={() =&gt; alert(\"Closing menu\")} onClose={handleClose}&gt;Close&lt;/MenuItem&gt;\n        &lt;/Menu&gt;\n      &lt;/Popper&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/tables-lists/context-menus/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/tables-lists/grid/","title":"Grid Components","text":""},{"location":"liberty/core/components/tables-lists/grid/#description","title":"Description","text":"<p>The <code>GridContainer</code> and <code>GridItem</code> components provide a flexible grid layout system that supports: - Dynamic column count based on screen size - Responsive design adjustments - Flexible row and column spacing</p>"},{"location":"liberty/core/components/tables-lists/grid/#props","title":"Props","text":""},{"location":"liberty/core/components/tables-lists/grid/#gridcontainer-props","title":"GridContainer Props","text":"Prop Type Default Description <code>spacing</code> <code>number</code> <code>2</code> Defines the gap between grid items (in multiples of 8px). <code>columns</code> <code>number | { xs, sm, md, lg }</code> <code>1</code> Number of columns, can be responsive. <code>py</code> <code>number</code> <code>0</code> Vertical padding (in multiples of 8px). <code>px</code> <code>number</code> <code>0</code> Horizontal padding (in multiples of 8px)."},{"location":"liberty/core/components/tables-lists/grid/#griditem-props","title":"GridItem Props","text":"Prop Type Default Description <code>size</code> <code>number | { xs, sm, md, lg }</code> <code>12</code> Column span of the grid item, can be responsive. <code>columnSpan</code> <code>number | { xs, sm, md, lg }</code> <code>-</code> Allows setting span dynamically."},{"location":"liberty/core/components/tables-lists/grid/#example-usage","title":"Example Usage","text":"<pre><code>import { GridContainer, GridItem } from \"@nomana-it/liberty-core\"\n\nexport const GridExample = () =&gt; {\n  return (\n    &lt;GridContainer spacing={2} columns={{ xs: 1, sm: 2, md: 3, lg: 4 }}&gt;\n      &lt;GridItem size={{ xs: 12, sm: 6, md: 4, lg: 3 }} style={{ background: \"#0044cc\", color: \"white\", padding: \"20px\", borderRadius: \"8px\" }}&gt;\n        Item 1\n      &lt;/GridItem&gt;\n      &lt;GridItem size={{ xs: 12, sm: 6, md: 4, lg: 3 }} style={{ background: \"#3366ff\", color: \"white\", padding: \"20px\", borderRadius: \"8px\" }}&gt;\n        Item 2\n      &lt;/GridItem&gt;\n      &lt;GridItem size={{ xs: 12, sm: 6, md: 4, lg: 3 }} style={{ background: \"#5588ff\", color: \"white\", padding: \"20px\", borderRadius: \"8px\" }}&gt;\n        Item 3\n      &lt;/GridItem&gt;\n    &lt;/GridContainer&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/tables-lists/grid/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/tables-lists/list/","title":"List Component","text":""},{"location":"liberty/core/components/tables-lists/list/#description","title":"Description","text":"<p>The <code>List</code> component provides a structured way to display lists of items, supporting: - Customizable list density and padding - Selectable, disabled, and clickable items - Icons and text combinations - Collapsible sub-menus for hierarchical navigation</p>"},{"location":"liberty/core/components/tables-lists/list/#props","title":"Props","text":""},{"location":"liberty/core/components/tables-lists/list/#list","title":"List","text":"Prop Type Default Description <code>dense</code> <code>boolean</code> <code>false</code> Reduces padding between items. <code>padding</code> <code>boolean</code> <code>true</code> Enables padding inside the list."},{"location":"liberty/core/components/tables-lists/list/#listitem","title":"ListItem","text":"Prop Type Default Description <code>selected</code> <code>boolean</code> <code>false</code> Highlights the selected item. <code>disabled</code> <code>boolean</code> <code>false</code> Disables interaction with the item. <code>onClick</code> <code>() =&gt; void</code> <code>-</code> Callback for when item is clicked."},{"location":"liberty/core/components/tables-lists/list/#listitembutton","title":"ListItemButton","text":"Prop Type Default Description <code>variant</code> <code>\"contained\" , \"outlined\" , \"text\"</code> <code>\"text\"</code> Defines the button style. <code>fullWidth</code> <code>boolean</code> <code>false</code> Expands button to full width. <code>disabled</code> <code>boolean</code> <code>false</code> Disables button interaction. <code>selected</code> <code>boolean</code> <code>false</code> Highlights the selected button. <code>startIcon</code> <code>ReactNode</code> <code>-</code> Icon before the text. <code>endIcon</code> <code>ReactNode</code> <code>-</code> Icon after the text."},{"location":"liberty/core/components/tables-lists/list/#collapse","title":"Collapse","text":"Prop Type Default Description <code>in</code> <code>boolean</code> <code>false</code> Controls visibility of child components."},{"location":"liberty/core/components/tables-lists/list/#example-usage","title":"Example Usage","text":"<pre><code>import { \nList, \nListItem, \nListItemButton, \nListItemIcon, \nListItemText, \nCollapse \n} from \"@nomana-it/liberty-core\"\nimport { LYReactIcon } from \"@ly_styles/icons\";\nimport { LYHomeIcon, LYSettingsIcon, LYMenusExpandMoreIcon, LYMenusExpandLessIcon } from \"@ly_styles/icons\";\nimport { useState, Fragment } from \"react\";\n\nexport const ListExample = () =&gt; {\nconst [open, setOpen] = useState(false);\n\nreturn (\n    &lt;List&gt;\n    &lt;Fragment&gt;\n        &lt;ListItem&gt;\n        &lt;ListItemButton\n            variant=\"text\"\n            fullWidth\n            onClick={() =&gt; setOpen(!open)}\n            startIcon={LYHomeIcon}\n            endIcon={open ? LYMenusExpandLessIcon : LYMenusExpandMoreIcon}\n        &gt;\n            &lt;ListItemText primary=\"Home\" /&gt;\n        &lt;/ListItemButton&gt;\n        &lt;/ListItem&gt;\n\n        &lt;Collapse in={open}&gt;\n        &lt;List padding={false}&gt;\n            &lt;ListItem&gt;\n            &lt;ListItemButton variant=\"text\" fullWidth startIcon={LYSettingsIcon}&gt;\n                &lt;ListItemText primary=\"Settings\" /&gt;\n            &lt;/ListItemButton&gt;\n            &lt;/ListItem&gt;\n        &lt;/List&gt;\n        &lt;/Collapse&gt;\n    &lt;/Fragment&gt;\n    &lt;/List&gt;\n);\n};\n</code></pre>"},{"location":"liberty/core/components/tables-lists/list/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/tables-lists/table/","title":"Table Component","text":""},{"location":"liberty/core/components/tables-lists/table/#description","title":"Description","text":"<p>The <code>Table</code> component provides a structured way to display data in rows and columns. It supports sorting and different row states.</p>"},{"location":"liberty/core/components/tables-lists/table/#props-table","title":"Props - Table","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - The table content (rows and cells)."},{"location":"liberty/core/components/tables-lists/table/#props-tablehead-tablebody","title":"Props - TableHead &amp; TableBody","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - The table head or body content."},{"location":"liberty/core/components/tables-lists/table/#props-tablerow","title":"Props - TableRow","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - The table row content (cells). <code>isSelected</code> <code>boolean</code> <code>false</code> Determines if the row is selected. <code>status</code> <code>\"removed\" | \"edited\" | \"error\"</code> - Sets a special row status (e.g., removed, edited, error)."},{"location":"liberty/core/components/tables-lists/table/#props-tablecell","title":"Props - TableCell","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - The cell content. <code>align</code> <code>\"left\" | \"center\" | \"right\"</code> <code>\"left\"</code> Alignment of the cell content. <code>colSpan</code> <code>number</code> - Number of columns the cell should span. <code>rowSpan</code> <code>number</code> - Number of rows the cell should span."},{"location":"liberty/core/components/tables-lists/table/#props-tablesortlabel","title":"Props - TableSortLabel","text":"Prop Type Default Description <code>active</code> <code>boolean</code> <code>false</code> Determines if sorting is active. <code>direction</code> <code>\"asc\" | \"desc\"</code> - Sorting direction (ascending or descending). <code>onClick</code> <code>(event) =&gt; void</code> - Event triggered when sorting is clicked."},{"location":"liberty/core/components/tables-lists/table/#example-usage","title":"Example Usage","text":"<pre><code>import { Table, TableHead, TableBody, TableRow, TableCell, TableSortLabel } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const TableExample = () =&gt; {\n  const [sortDirection, setSortDirection] = useState&lt;\"asc\" | \"desc\"&gt;(\"asc\");\n\n  const handleSort = () =&gt; {\n    setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n  };\n\n  return (\n    &lt;Table&gt;\n      &lt;TableHead&gt;\n        &lt;TableRow&gt;\n          &lt;TableCell&gt;\n            &lt;TableSortLabel active direction={sortDirection} onClick={handleSort}&gt;\n              Name\n            &lt;/TableSortLabel&gt;\n          &lt;/TableCell&gt;\n          &lt;TableCell align=\"center\"&gt;Age&lt;/TableCell&gt;\n          &lt;TableCell align=\"right\"&gt;City&lt;/TableCell&gt;\n        &lt;/TableRow&gt;\n      &lt;/TableHead&gt;\n      &lt;TableBody&gt;\n        &lt;TableRow&gt;\n          &lt;TableCell&gt;John Doe&lt;/TableCell&gt;\n          &lt;TableCell align=\"center\"&gt;30&lt;/TableCell&gt;\n          &lt;TableCell align=\"right\"&gt;New York&lt;/TableCell&gt;\n        &lt;/TableRow&gt;\n        &lt;TableRow&gt;\n          &lt;TableCell&gt;Jane Smith&lt;/TableCell&gt;\n          &lt;TableCell align=\"center\"&gt;28&lt;/TableCell&gt;\n          &lt;TableCell align=\"right\"&gt;San Francisco&lt;/TableCell&gt;\n        &lt;/TableRow&gt;\n      &lt;/TableBody&gt;\n    &lt;/Table&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/tables-lists/table/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/tables-lists/tree/","title":"Tree Component","text":""},{"location":"liberty/core/components/tables-lists/tree/#description","title":"Description","text":"<p>The <code>Tree</code> component is used to display hierarchical data in an expandable and collapsible format.</p>"},{"location":"liberty/core/components/tables-lists/tree/#props","title":"Props","text":"Prop Type Default Description <code>nodes</code> <code>TreeNode[]</code> <code>[]</code> Array of tree nodes to display. <code>onDoubleClick</code> <code>(event, node) =&gt; void</code> <code>undefined</code> Callback triggered on double-clicking a node. <code>onMouseDown</code> <code>(event, node) =&gt; void</code> <code>undefined</code> Callback triggered when mouse is pressed. <code>onTouchStart</code> <code>(event, node) =&gt; void</code> <code>undefined</code> Callback triggered when touch starts on a node. <code>onTouchEnd</code> <code>() =&gt; void</code> <code>undefined</code> Callback triggered when touch ends."},{"location":"liberty/core/components/tables-lists/tree/#example-usage","title":"Example Usage","text":"<pre><code>import { Tree } from \"@nomana-it/liberty-core\"\n\nconst treeData = [\n  { id: \"1\", label: \"Root\", children: [\n      { id: \"1-1\", label: \"Child 1\" },\n      { id: \"1-2\", label: \"Child 2\", children: [\n          { id: \"1-2-1\", label: \"Grandchild 1\" },\n      ]},\n  ]},\n];\n\nexport const TreeExample = () =&gt; {\n  return &lt;Tree nodes={treeData} /&gt;;\n};\n</code></pre>"},{"location":"liberty/core/components/tables-lists/tree/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/alert-message/","title":"AlertMessage Component","text":""},{"location":"liberty/core/components/ui-elements/alert-message/#description","title":"Description","text":"<p>The <code>AlertMessage</code> component is a wrapper around the <code>Alert</code> component that provides automatic dismissal for non-error messages.</p>"},{"location":"liberty/core/components/ui-elements/alert-message/#props","title":"Props","text":"Prop Type Default Description <code>open</code> <code>boolean</code> <code>false</code> Controls whether the alert is visible. <code>severity</code> <code>\"success\" , \"info\" , \"warning\" , \"error\"</code> <code>\"info\"</code> Defines the severity of the alert. <code>message</code> <code>string</code> <code>\"\"</code> The text displayed inside the alert. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback function triggered when the alert is closed."},{"location":"liberty/core/components/ui-elements/alert-message/#behavior","title":"Behavior","text":"<ul> <li>If the <code>severity</code> is not error, the alert will automatically close after 3 seconds.</li> <li>Clicking the close button will manually dismiss the alert.</li> </ul>"},{"location":"liberty/core/components/ui-elements/alert-message/#example-usage","title":"Example Usage","text":"<pre><code>import { AlertMessage } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const AlertMessageExample = () =&gt; {\n  const [open, setOpen] = useState(true);\n\n  return (\n    &lt;div&gt;\n      &lt;AlertMessage open={open} severity={ESeverity.success} message=\"This is a success alert!\" onClose={() =&gt; setOpen(false)} /&gt;\n      &lt;AlertMessage open={true} severity={ESeverity.info} message=\"This is an info alert!\" onClose={() =&gt; console.log(\"Closed\")} /&gt;\n      &lt;AlertMessage open={true} severity={ESeverity.warning} message=\"This is a warning alert!\" onClose={() =&gt; console.log(\"Closed\")} /&gt;\n      &lt;AlertMessage open={true} severity={ESeverity.error} message=\"This is an error alert!\" onClose={() =&gt; console.log(\"Closed\")} /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/alert-message/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/alert/","title":"Alert Component","text":""},{"location":"liberty/core/components/ui-elements/alert/#description","title":"Description","text":"<p>The <code>Alert</code> component provides a styled alert message with various severity levels. It can also be dismissible.</p>"},{"location":"liberty/core/components/ui-elements/alert/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>\"success\" , \"info\" , \"warning\" , \"error\"</code> <code>\"info\"</code> Defines the style and icon of the alert. <code>dismissible</code> <code>boolean</code> <code>false</code> Allows the alert to be dismissed. <code>onClose</code> <code>() =&gt; void</code> <code>undefined</code> Callback function when the alert is closed."},{"location":"liberty/core/components/ui-elements/alert/#example-usage","title":"Example Usage","text":"<pre><code>import { Alert } from \"@nomana-it/liberty-core\"\n\nexport const AlertExample = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;Alert variant=\"success\"&gt;This is a success alert!&lt;/Alert&gt;\n      &lt;Alert variant=\"info\"&gt;This is an info alert.&lt;/Alert&gt;\n      &lt;Alert variant=\"warning\" dismissible onClose={() =&gt; alert(\"Alert closed!\")}&gt;\n        This is a dismissible warning alert.\n      &lt;/Alert&gt;\n      &lt;Alert variant=\"error\"&gt;This is an error alert.&lt;/Alert&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/alert/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/button/","title":"Button Component","text":""},{"location":"liberty/core/components/ui-elements/button/#description","title":"Description","text":"<p>The <code>Button</code> component provides a customizable button with multiple variants and props. It supports different styles, icons, full-width mode, and disabled states.</p>"},{"location":"liberty/core/components/ui-elements/button/#props","title":"Props","text":"Prop Type Description <code>variant</code> <code>\"contained\", \"outlined\", \"text\"</code> Defines the button style <code>fullWidth</code> <code>boolean</code> If true, the button spans the full container width <code>disabled</code> <code>boolean</code> If true, the button is disabled <code>startIcon</code> <code>ReactNode, React.ElementType</code> Icon displayed before button text <code>endIcon</code> <code>ReactNode, React.ElementType</code> Icon displayed after button text <code>color</code> <code>string</code> Custom color for the button text <code>href</code> <code>string</code> If provided, renders the button as a link <code>target</code> <code>\"_blank\", \"_self\", \"_parent\", \"_top\"</code> Defines link target behavior <code>rel</code> <code>string</code> Specifies the relationship between the link and target <code>badgeContent</code> <code>ReactNode</code> Adds a small badge (for notifications, counts, etc.) <code>badgeColor</code> <code>string</code> Defines badge background color"},{"location":"liberty/core/components/ui-elements/button/#example-usage","title":"Example Usage","text":"<pre><code>import { Button } from \"@nomana-it/liberty-core\"\nimport { FaCheck } from \"react-icons/fa\";\n\nexport const ButtonExample = () =&gt; {\n  return (\n    &lt;&gt;\n      {/* Default Contained Button */}\n      &lt;Button variant=\"contained\" onClick={() =&gt; alert(\"Contained Button Clicked\")}&gt;\n        Contained Button\n      &lt;/Button&gt;\n\n      {/* Outlined Button */}\n      &lt;Button variant=\"outlined\" color=\"secondary\" onClick={() =&gt; alert(\"Outlined Button Clicked\")}&gt;\n        Outlined Button\n      &lt;/Button&gt;\n\n      {/* Button with Icon */}\n      &lt;Button startIcon={&lt;FaCheck /&gt;} variant=\"contained\"&gt;\n        With Icon\n      &lt;/Button&gt;\n\n      {/* Disabled Button */}\n      &lt;Button disabled&gt;Disabled Button&lt;/Button&gt;\n\n      {/* Full Width Button */}\n      &lt;Button fullWidth variant=\"contained\"&gt;Full Width Button&lt;/Button&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/button/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/card/","title":"Card Component","text":""},{"location":"liberty/core/components/ui-elements/card/#description","title":"Description","text":"<p>The <code>Card</code> component is a versatile container that can display structured content, such as headers, actions, and clickable areas.</p>"},{"location":"liberty/core/components/ui-elements/card/#props","title":"Props","text":""},{"location":"liberty/core/components/ui-elements/card/#card","title":"<code>Card</code>","text":"Prop Type Default Description <code>isSelected</code> <code>boolean</code> <code>false</code> Adds a selected state style to the card."},{"location":"liberty/core/components/ui-elements/card/#cardheader","title":"<code>CardHeader</code>","text":"Prop Type Default Description <code>title</code> <code>string</code> <code>\"\"</code> The title displayed at the top of the card. <code>action</code> <code>ReactNode</code> <code>null</code> Additional action elements (e.g., buttons)."},{"location":"liberty/core/components/ui-elements/card/#cardcontent","title":"<code>CardContent</code>","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> <code>null</code> Content inside the card body."},{"location":"liberty/core/components/ui-elements/card/#cardactionarea","title":"<code>CardActionArea</code>","text":"Prop Type Default Description <code>onClick</code> <code>() =&gt; void</code> <code>undefined</code> Callback when the area is clicked. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the action area. <code>href</code> <code>string</code> <code>\"\"</code> Optional link instead of a button. <code>target</code> <code>\"_blank\" , \"_self\" , \"_parent\" , \"_top\"</code> <code>undefined</code> Specifies how the link opens."},{"location":"liberty/core/components/ui-elements/card/#cardactions","title":"<code>CardActions</code>","text":"Prop Type Default Description <code>justifyContent</code> <code>\"flex-start\" , \"center\" , \"flex-end\" , \"space-between\"</code> <code>\"flex-end\"</code> Controls the alignment of action buttons."},{"location":"liberty/core/components/ui-elements/card/#example-usage","title":"Example Usage","text":"<pre><code>import { Card, CardHeader, CardContent, CardActionArea, CardActions, Button } from \"@nomana-it/liberty-core\"\n\nexport const CardExample = () =&gt; {\n  return (\n    &lt;Card isSelected={true}&gt;\n      &lt;CardHeader title=\"Card Title\" action={&lt;Button variant=\"text\"&gt;Edit&lt;/Button&gt;} /&gt;\n      &lt;CardContent&gt;\n        This is the content inside the card. You can add text, images, or other elements here.\n      &lt;/CardContent&gt;\n      &lt;CardActionArea onClick={() =&gt; alert(\"Card Clicked!\")}&gt;\n        Clickable Area\n      &lt;/CardActionArea&gt;\n      &lt;CardActions&gt;\n        &lt;Button variant=\"contained\" onClick={() =&gt; alert(\"Action Clicked!\")}&gt;Action&lt;/Button&gt;\n      &lt;/CardActions&gt;\n    &lt;/Card&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/card/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/checkbox/","title":"Checkbox Component","text":""},{"location":"liberty/core/components/ui-elements/checkbox/#description","title":"Description","text":"<p>The <code>Checkbox</code> component is a custom-styled checkbox that supports indeterminate states, labels, and various label placements.</p>"},{"location":"liberty/core/components/ui-elements/checkbox/#props","title":"Props","text":"Prop Type Default Description <code>checked</code> <code>boolean</code> <code>false</code> Whether the checkbox is checked. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the checkbox. <code>indeterminate</code> <code>boolean</code> <code>false</code> Displays an indeterminate (dash) state. <code>label</code> <code>string</code> <code>\"\"</code> Optional label displayed next to the checkbox. <code>labelPlacement</code> <code>\"start\" , \"end\" , \"top\" , \"bottom\"</code> <code>\"end\"</code> Defines where the label appears relative to the checkbox."},{"location":"liberty/core/components/ui-elements/checkbox/#example-usage","title":"Example Usage","text":"<pre><code>import { Checkbox } from \"@nomana-it/liberty-core\"\n\nexport const CheckboxExample = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;Checkbox checked={true} label=\"Checked\" /&gt;\n      &lt;Checkbox checked={false} label=\"Unchecked\" /&gt;\n      &lt;Checkbox indeterminate={true} label=\"Indeterminate\" /&gt;\n      &lt;Checkbox checked={true} disabled label=\"Disabled Checked\" /&gt;\n      &lt;Checkbox checked={false} disabled label=\"Disabled Unchecked\" /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/checkbox/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/circular-progress/","title":"CircularProgress Component","text":""},{"location":"liberty/core/components/ui-elements/circular-progress/#description","title":"Description","text":"<p>The <code>CircularProgress</code> component displays a rotating loader, commonly used to indicate an ongoing operation.</p>"},{"location":"liberty/core/components/ui-elements/circular-progress/#props","title":"Props","text":"Prop Type Default Description <code>size</code> <code>number</code> <code>40</code> Diameter of the spinner (in pixels). <code>thickness</code> <code>number</code> <code>4</code> Thickness of the circular border. <code>color</code> <code>string</code> <code>theme.palette.primary.main</code> Spinner color. <code>trackColor</code> <code>string</code> <code>theme.palette.text.primary</code> Background track color. <code>speed</code> <code>number</code> <code>1.2</code> Speed of rotation (in seconds per full spin)."},{"location":"liberty/core/components/ui-elements/circular-progress/#example-usage","title":"Example Usage","text":"<pre><code>import { CircularProgress } from \"@nomana-it/liberty-core\"\n\nexport const CircularProgressExample = () =&gt; {\n  return (\n    &lt;div style={{ display: \"flex\", gap: \"16px\" }}&gt;\n      &lt;CircularProgress size={40} /&gt;\n      &lt;CircularProgress size={50} thickness={5} color=\"#ff4081\" /&gt;\n      &lt;CircularProgress size={60} thickness={6} trackColor=\"gray\" speed={2} /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/circular-progress/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/collapse/","title":"Collapse Component","text":""},{"location":"liberty/core/components/ui-elements/collapse/#description","title":"Description","text":"<p>The <code>Collapse</code> component allows content to expand and collapse smoothly with an animation.</p>"},{"location":"liberty/core/components/ui-elements/collapse/#props","title":"Props","text":"Prop Type Default Description <code>in</code> <code>boolean</code> <code>false</code> Controls whether the content is expanded or collapsed. <code>timeout</code> <code>number</code> <code>0</code> Duration of the expand/collapse transition (in milliseconds). <code>collapsedHeight</code> <code>string</code> <code>\"0px\"</code> The height of the content when collapsed."},{"location":"liberty/core/components/ui-elements/collapse/#example-usage","title":"Example Usage","text":"<pre><code>import { Collapse, Button } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const CollapseExample = () =&gt; {\n  const [open, setOpen] = useState(false);\n\n  return (\n    &lt;div&gt;\n      &lt;Button onClick={() =&gt; setOpen((prev) =&gt; !prev)}&gt;\n        {open ? \"Collapse\" : \"Expand\"}\n      &lt;/Button&gt;\n      &lt;Collapse in={open} timeout={300} collapsedHeight=\"0px\"&gt;\n        &lt;div style={{ padding: \"10px\", backgroundColor: \"#f5f5f5\", borderRadius: \"8px\" }}&gt;\n          This content is collapsible.\n        &lt;/div&gt;\n      &lt;/Collapse&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/collapse/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/divider/","title":"Divider Component","text":""},{"location":"liberty/core/components/ui-elements/divider/#divider-component_1","title":"Divider Component","text":""},{"location":"liberty/core/components/ui-elements/divider/#description","title":"Description","text":"<p>The <code>Divider</code> component is used to separate content with a thin line. It can be displayed horizontally or vertically, and it adapts to dark mode automatically.</p>"},{"location":"liberty/core/components/ui-elements/divider/#props","title":"Props","text":"Prop Type Default Description <code>orientation</code> <code>\"horizontal\" , \"vertical\"</code> <code>\"horizontal\"</code> Defines the divider's orientation. <code>flexItem</code> <code>boolean</code> <code>false</code> Allows the divider to stretch when inside a flex container."},{"location":"liberty/core/components/ui-elements/divider/#example-usage","title":"Example Usage","text":"<pre><code>import { Divider } from \"@nomana-it/liberty-core\"\n\nexport const DividerExample = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Above the divider&lt;/p&gt;\n      &lt;Divider /&gt;\n      &lt;p&gt;Below the divider&lt;/p&gt;\n\n      &lt;div style={{ display: \"flex\", alignItems: \"center\", height: \"50px\", gap: \"10px\" }}&gt;\n        &lt;span&gt;Item 1&lt;/span&gt;\n        &lt;Divider orientation=\"vertical\" flexItem /&gt;\n        &lt;span&gt;Item 2&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/divider/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/flex-advanced/","title":"AdvancedFlexPanels Component","text":""},{"location":"liberty/core/components/ui-elements/flex-advanced/#description","title":"Description","text":"<p>The <code>AdvancedFlexPanels</code> component is a bi-dimensional, resizable layout system that allows for: - Dynamic resizing of both rows and columns - Drag-and-drop reordering of child elements - Smooth animations for user interactions</p>"},{"location":"liberty/core/components/ui-elements/flex-advanced/#props","title":"Props","text":"Prop Type Default Description <code>rows</code> <code>number</code> <code>2</code> Number of rows in the layout. <code>columns</code> <code>number</code> <code>2</code> Number of columns in each row. <code>children</code> <code>ReactNode[][]</code> <code>-</code> Bi-dimensional array of child components."},{"location":"liberty/core/components/ui-elements/flex-advanced/#example-usage","title":"Example Usage","text":"<pre><code>import { AdvancedFlexPanels } from \"@nomana-it/liberty-core\"\n\nexport const AdvancedFlexPanelsExample = () =&gt; {\n  return (\n    &lt;AdvancedFlexPanels rows={2} columns={2}&gt;\n      {[\n        [\n          &lt;div style={{ padding: \"20px\", background: \"#0044cc\", color: \"white\", borderRadius: \"8px\" }}&gt;Panel 1&lt;/div&gt;,\n          &lt;div style={{ padding: \"20px\", background: \"#3366ff\", color: \"white\", borderRadius: \"8px\" }}&gt;Panel 2&lt;/div&gt;,\n        ],\n        [\n          &lt;div style={{ padding: \"20px\", background: \"#5588ff\", color: \"white\", borderRadius: \"8px\" }}&gt;Panel 3&lt;/div&gt;,\n          &lt;div style={{ padding: \"20px\", background: \"#77aaff\", color: \"white\", borderRadius: \"8px\" }}&gt;Panel 4&lt;/div&gt;,\n        ],\n      ]}\n    &lt;/AdvancedFlexPanels&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/flex-advanced/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/flex/","title":"FlexPanels Component","text":""},{"location":"liberty/core/components/ui-elements/flex/#description","title":"Description","text":"<p>The <code>FlexPanels</code> component is a flexible, resizable layout container that allows dynamic panel resizing and optional drag-and-drop reordering.</p>"},{"location":"liberty/core/components/ui-elements/flex/#props","title":"Props","text":"Prop Type Default Description <code>panels</code> <code>number[]</code> <code>[1, 1]</code> Initial flex sizes for each panel. <code>children</code> <code>ReactNode[]</code> <code>-</code> Components to be placed inside the panels. <code>direction</code> <code>\"horizontal\" | \"vertical\"</code> <code>\"horizontal\"</code> Defines the layout direction. <code>dragEnabled</code> <code>boolean</code> <code>false</code> Enables drag-and-drop reordering."},{"location":"liberty/core/components/ui-elements/flex/#example-usage","title":"Example Usage","text":"<pre><code>import { FlexPanels } from \"@nomana-it/liberty-core\"\n\nexport const FlexPanelsExample = () =&gt; {\n  return (\n    &lt;FlexPanels panels={[2, 1]} direction=\"horizontal\" dragEnabled&gt;\n      &lt;div style={{ padding: \"20px\", background: \"#4c9aff\" }}&gt;Panel 1&lt;/div&gt;\n      &lt;div style={{ padding: \"20px\", background: \"#3366ff\" }}&gt;Panel 2&lt;/div&gt;\n    &lt;/FlexPanels&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/flex/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/icon-button/","title":"IconButton Component","text":""},{"location":"liberty/core/components/ui-elements/icon-button/#description","title":"Description","text":"<p>The <code>IconButton</code> component is a button wrapper specifically for icons, offering: - Customizable icon size - Disabled and selected states - Hover effects with scaling animation</p>"},{"location":"liberty/core/components/ui-elements/icon-button/#props","title":"Props","text":"Prop Type Default Description <code>icon</code> <code>React.ElementType</code> <code>-</code> Icon component to display inside the button. <code>isSelected</code> <code>boolean</code> <code>false</code> Determines if the button is selected. <code>size</code> <code>\"small\" , \"medium\" , \"large\"</code> <code>\"medium\"</code> Defines the icon size. <code>disabled</code> <code>boolean</code> <code>false</code> Disables the button when set to true. <code>component</code> <code>ElementType</code> <code>\"button\"</code> Allows rendering a different HTML element."},{"location":"liberty/core/components/ui-elements/icon-button/#example-usage","title":"Example Usage","text":"<pre><code>import { IconButton } from \"@nomana-it/liberty-core\"\nimport { LYThumbUpIcon, LYThumbDownOffIcon } from \"@ly_styles/icons\";\n\nexport const IconButtonExample = () =&gt; {\n  return (\n    &lt;div style={{ display: \"flex\", gap: \"16px\" }}&gt;\n      &lt;IconButton icon={LYThumbUpIcon} size=\"large\" /&gt;\n      &lt;IconButton icon={LYThumbDownOffIcon} /&gt;\n      &lt;IconButton icon={LYThumbUpIcon} isSelected /&gt;\n      &lt;IconButton icon={LYThumbDownOffIcon} disabled /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/icon-button/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/loading-indicator/","title":"LoadingIndicator Component","text":""},{"location":"liberty/core/components/ui-elements/loading-indicator/#description","title":"Description","text":"<p>The <code>LoadingIndicator</code> component provides a visual loading state indicator with a customizable message and color.</p>"},{"location":"liberty/core/components/ui-elements/loading-indicator/#props","title":"Props","text":"Prop Type Default Description <code>loadingMessage</code> <code>string</code> <code>t(\"loading\")</code> The message displayed below the loading spinner. Uses i18n by default. <code>color</code> <code>\"primary\" , \"secondary\" , \"textSecondary\" , \"error\" , \"info\" , \"success\" , \"warning\" , \"textPrimary\" , \"textDisabled\" , string</code> <code>\"primary\"</code> Defines the color of the loading message. Can be a theme color or a custom string."},{"location":"liberty/core/components/ui-elements/loading-indicator/#example-usage","title":"Example Usage","text":"<pre><code>import { LoadingIndicator } from \"@nomana-it/liberty-core\"\n\nexport const LoadingIndicatorExample = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;LoadingIndicator /&gt;\n      &lt;LoadingIndicator loadingMessage=\"Fetching data...\" color=\"success\" /&gt;\n      &lt;LoadingIndicator loadingMessage=\"Processing request...\" color=\"warning\" /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/loading-indicator/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/markdown/","title":"MarkDown Component","text":""},{"location":"liberty/core/components/ui-elements/markdown/#description","title":"Description","text":"<p>The <code>MarkDown</code> component renders markdown content and supports syntax highlighting for code blocks, tables, and links.</p>"},{"location":"liberty/core/components/ui-elements/markdown/#props","title":"Props","text":"Prop Type Description <code>markdown</code> <code>string</code> The markdown content to be rendered."},{"location":"liberty/core/components/ui-elements/markdown/#example-usage","title":"Example Usage","text":"<pre><code>import { MarkDown } from \"@nomana-it/liberty-core\"\n\nconst markdownText = `\n# Sample Markdown\nThis is an example of using the **MarkDown** component.\n\n## Features\n- Supports **bold** and *italic* text.\n- Syntax highlighting for code blocks.\n- Tables, lists, and links.\n\n### Code Block Example:\n```tsx\nconst example = \"Hello, Markdown!\";\nconsole.log(example);\n</code></pre>"},{"location":"liberty/core/components/ui-elements/markdown/#table-example","title":"Table Example:","text":"Column 1 Column 2 Data 1 Data 2 <p>Visit our website</p> <pre><code>export const MarkDownExample = () =&gt; {\n  return &lt;MarkDown markdown={markdownText} /&gt;;\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/markdown/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/snack-message/","title":"SnackMessage Component","text":""},{"location":"liberty/core/components/ui-elements/snack-message/#description","title":"Description","text":"<p>The <code>SnackMessage</code> component displays temporary alert messages (snack messages) that disappear after a set duration. These messages provide feedback for user actions and support different severity levels.</p>"},{"location":"liberty/core/components/ui-elements/snack-message/#usage","title":"Usage","text":"<p>The component is used globally and does not require props. It automatically retrieves and displays messages from the application's context.</p>"},{"location":"liberty/core/components/ui-elements/snack-message/#behavior","title":"Behavior","text":"<ul> <li>Displays messages from the application context.</li> <li>Automatically removes messages after 6 seconds.</li> <li>Supports different severity levels (info, success, warning, error).</li> <li>Can be dismissed manually.</li> </ul>"},{"location":"liberty/core/components/ui-elements/snack-message/#example-usage","title":"Example Usage","text":"<pre><code>import { SnackMessage } from \"@nomana-it/liberty-core\"\nimport { useAppContext } from \"@ly_context/AppProvider\";\nimport { ESeverity } from \"@ly_types/common\";\n\nexport const Example = () =&gt; {\n  const { addSnackMessage } = useAppContext();\n\n  useEffect(() =&gt; {\n    addSnackMessage(\"Export of table has started\", ESeverity.warning);\n  }, []);\n\n  return (\n    &lt;div&gt;\n      {/* This component should be placed at the root level to display messages globally */}\n      &lt;SnackMessage /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/snack-message/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/toggle-button/","title":"Toggle &amp; ToggleGroup Component","text":""},{"location":"liberty/core/components/ui-elements/toggle-button/#description","title":"Description","text":"<p>The <code>Toggle</code> component represents a selectable button that can be used alone or inside a <code>ToggleGroup</code> for grouped selection. It supports exclusive selection (single toggle active) and multiple selection modes.</p>"},{"location":"liberty/core/components/ui-elements/toggle-button/#props-toggle","title":"Props - Toggle","text":"Prop Type Default Description <code>value</code> <code>any</code> - Unique identifier for the toggle. <code>isActive</code> <code>boolean</code> <code>false</code> Defines whether the toggle is active. <code>disabled</code> <code>boolean</code> <code>false</code> Disables interaction with the toggle. <code>onClick</code> <code>(event) =&gt; void</code> - Click handler for the toggle."},{"location":"liberty/core/components/ui-elements/toggle-button/#props-togglegroup","title":"Props - ToggleGroup","text":"Prop Type Default Description <code>value</code> <code>string</code> - The currently selected value (for exclusive mode). <code>onChange</code> <code>(event, value) =&gt; void</code> - Handles toggle state changes. <code>exclusive</code> <code>boolean</code> <code>true</code> If true, allows only one toggle to be active at a time."},{"location":"liberty/core/components/ui-elements/toggle-button/#example-usage","title":"Example Usage","text":"<pre><code>import { Toggle, ToggleGroup } from \"@nomana-it/liberty-core\"\nimport { useState } from \"react\";\n\nexport const ToggleExample = () =&gt; {\n  const [selectedValue, setSelectedValue] = useState(\"option1\");\n\n  return (\n    &lt;ToggleGroup value={selectedValue} onChange={(e, value) =&gt; setSelectedValue(value)} exclusive&gt;\n      &lt;Toggle value=\"option1\"&gt;Option 1&lt;/Toggle&gt;\n      &lt;Toggle value=\"option2\"&gt;Option 2&lt;/Toggle&gt;\n      &lt;Toggle value=\"option3\"&gt;Option 3&lt;/Toggle&gt;\n    &lt;/ToggleGroup&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/toggle-button/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/tooltip/","title":"Tooltip Component","text":""},{"location":"liberty/core/components/ui-elements/tooltip/#description","title":"Description","text":"<p>The <code>Tooltip</code> component provides a simple way to display contextual hints when hovering over an element.</p>"},{"location":"liberty/core/components/ui-elements/tooltip/#props","title":"Props","text":"Prop Type Default Description <code>title</code> <code>string</code> <code>\"\"</code> The text content displayed inside the tooltip. <code>children</code> <code>ReactNode</code> - The element that triggers the tooltip on hover."},{"location":"liberty/core/components/ui-elements/tooltip/#example-usage","title":"Example Usage","text":"<pre><code>import { Tooltip, Button } from \"@nomana-it/liberty-core\"\n\nexport const TooltipExample = () =&gt; {\n  return (\n    &lt;Tooltip title=\"Click to submit\"&gt;\n      &lt;Button variant=\"contained\"&gt;Submit&lt;/Button&gt;\n    &lt;/Tooltip&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/tooltip/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/components/ui-elements/typography/","title":"Typography Component","text":""},{"location":"liberty/core/components/ui-elements/typography/#description","title":"Description","text":"<p>The <code>Typography</code> component is used for consistent text styling across the application.</p>"},{"location":"liberty/core/components/ui-elements/typography/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"subtitle1\" | \"subtitle2\" | \"body1\" | \"body2\" | \"caption\" | \"overline\"</code> <code>\"body1\"</code> Defines the text style. <code>color</code> <code>\"primary\" | \"secondary\" | \"textPrimary\" | \"textSecondary\" | \"inherit\"</code> <code>\"textPrimary\"</code> Sets the text color. <code>align</code> <code>\"left\" | \"center\" | \"right\" | \"justify\"</code> <code>\"left\"</code> Controls text alignment. <code>gutterBottom</code> <code>boolean</code> <code>false</code> Adds margin-bottom spacing. <code>noWrap</code> <code>boolean</code> <code>false</code> Prevents text wrapping. <code>paragraph</code> <code>boolean</code> <code>false</code> Determines if the text is treated as a paragraph. <code>fontWeight</code> <code>\"normal\" | \"bold\" | \"light\" | number</code> <code>\"normal\"</code> Sets the font weight. <code>fontStyle</code> <code>\"normal\" | \"italic\" | \"oblique\"</code> <code>\"normal\"</code> Sets the font style. <code>href</code> <code>string</code> <code>undefined</code> Converts text into a hyperlink. <code>target</code> <code>\"_blank\" | \"_self\" | \"_parent\" | \"_top\"</code> <code>undefined</code> Defines how links open. <code>rel</code> <code>string</code> <code>undefined</code> Specifies link relationship attributes."},{"location":"liberty/core/components/ui-elements/typography/#example-usage","title":"Example Usage","text":"<pre><code>import { Typography } from \"@nomana-it/liberty-core\"\n\nexport const TypographyExample = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;Typography variant=\"h1\" color=\"primary\"&gt;Heading 1&lt;/Typography&gt;\n      &lt;Typography variant=\"h2\" color=\"secondary\"&gt;Heading 2&lt;/Typography&gt;\n      &lt;Typography variant=\"body1\" gutterBottom&gt;\n        This is a body text with bottom margin.\n      &lt;/Typography&gt;\n      &lt;Typography variant=\"overline\" fontWeight=\"bold\"&gt;\n        Overline text in bold.\n      &lt;/Typography&gt;\n      &lt;Typography variant=\"body2\" fontStyle=\"italic\"&gt;\n        Italic body text.\n      &lt;/Typography&gt;\n      &lt;Typography variant=\"h6\" href=\"https://example.com\" target=\"_blank\"&gt;\n        Clickable heading\n      &lt;/Typography&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/components/ui-elements/typography/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/applications/","title":"Applications Configuration","text":""},{"location":"liberty/core/services/applications/#description","title":"Description","text":"<p>The <code>Applications Configuration</code> defines multiple applications within the Liberty Framework. Each application has specific settings such as offset, limit, version, dashboard, and theme.</p>"},{"location":"liberty/core/services/applications/#data-structure","title":"Data Structure","text":"Field Name Type Description <code>APPS_ID</code> <code>number</code> Unique application identifier. <code>APPS_NAME</code> <code>string</code> The name of the application. <code>APPS_DESCRIPTION</code> <code>string</code> Description of the application\u2019s purpose. <code>APPS_POOL</code> <code>string</code> The database connection pool used by the application. <code>APPS_OFFSET</code> <code>number</code> The default offset value for queries. <code>APPS_LIMIT</code> <code>number</code> The maximum number of records per query. <code>APPS_VERSION</code> <code>string</code> The current version of the application. <code>APPS_DASHBOARD</code> <code>number | undefined</code> The dashboard ID associated with the app. <code>APPS_THEME</code> <code>string</code> The theme applied to the application. <code>APPS_SESSION</code> <code>string</code> The session mode (e.g., <code>session</code>). <code>APPS_JWT_TOKEN</code> <code>string</code> JWT token for authentication (if applicable)."},{"location":"liberty/core/services/applications/#example-usage","title":"Example Usage","text":"<pre><code>import { useAppContext } from \"@nomana-it/liberty-core\"\n\nexport const ApplicationsExample = () =&gt; {\n  const { appsProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Available Applications&lt;/h2&gt;\n      &lt;ul&gt;\n        {Object.entries(appsProperties).map(([key, app]) =&gt; (\n          &lt;li key={key}&gt;\n            &lt;strong&gt;{app.name}&lt;/strong&gt; - {app.description} (Version: {app.version})\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/applications/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/appprovider/","title":"AppProvider Component","text":""},{"location":"liberty/core/services/appprovider/#description","title":"Description","text":"<p>The <code>AppProvider</code> is a context provider that manages global state for the Liberty Framework. It provides access to:</p> <ul> <li>Authentication state</li> <li>Application properties</li> <li>User properties</li> <li>Module configurations</li> <li>Snack messages</li> <li>WebSocket handling</li> </ul> <p>This provider allows injecting custom functions for retrieving data such as applications, users, tokens, and menus.</p>"},{"location":"liberty/core/services/appprovider/#props","title":"Props","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - Components wrapped by the provider. <code>useAuth</code> <code>() =&gt; AuthContextProps</code> - Custom authentication hook. <code>getModules</code> <code>() =&gt; Promise&lt;IModulesProps&gt;</code> - Fetch function for modules configuration. <code>getApplications</code> <code>() =&gt; Promise&lt;IAppsProps&gt;</code> - Fetch function for application settings. <code>getUser</code> <code>() =&gt; Promise&lt;IUsersProps&gt;</code> - Fetch function for user details. <code>getMenus</code> <code>() =&gt; Promise&lt;IMenusProps&gt;</code> - Fetch function for application menus."},{"location":"liberty/core/services/appprovider/#example-usage","title":"Example Usage","text":"<pre><code>import { AppProvider, useAppContext } from \"@nomana-it/liberty-core\"\n\nexport const AppProviderExample = () =&gt; {\n  return (\n    &lt;AppProvider&gt;\n      &lt;MyApp /&gt;\n    &lt;/AppProvider&gt;\n  );\n};\n\nconst MyApp = () =&gt; {\n  const { userProperties, modulesProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;User: {userProperties.name}&lt;/h2&gt;\n      &lt;p&gt;Debug Mode: {modulesProperties.debug.enabled ? \"Enabled\" : \"Disabled\"}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/appprovider/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/authentication/","title":"Authentication &amp; Token Management","text":""},{"location":"liberty/core/services/authentication/#description","title":"Description","text":"<p>The authentication system in Liberty Framework uses an access token mechanism. A user provides their credentials, and if authenticated, they receive an access token.</p>"},{"location":"liberty/core/services/authentication/#data-structure","title":"Data Structure","text":""},{"location":"liberty/core/services/authentication/#successful-response","title":"Successful Response","text":"Field Name Type Description <code>access_token</code> <code>string</code> The generated token for the session. <code>token_type</code> <code>string</code> Type of token, usually <code>\"bearer\"</code>. <code>status</code> <code>\"success\"</code> Indicates authentication was successful. <code>message</code> <code>string</code> Message confirming login success."},{"location":"liberty/core/services/authentication/#failed-response-login-error","title":"Failed Response (Login Error)","text":"Field Name Type Description <code>access_token</code> <code>string</code> Empty, as login failed. <code>token_type</code> <code>string</code> Type of token, usually <code>\"bearer\"</code>. <code>status</code> <code>\"failed\"</code> Indicates authentication failure. <code>message</code> <code>string</code> Error message <code>\"loginError\"</code>."},{"location":"liberty/core/services/authentication/#failed-response-password-error","title":"Failed Response (Password Error)","text":"Field Name Type Description <code>access_token</code> <code>string</code> Empty, as authentication failed. <code>token_type</code> <code>string</code> Type of token, usually <code>\"bearer\"</code>. <code>status</code> <code>\"failed\"</code> Indicates authentication failure. <code>message</code> <code>string</code> Error message <code>\"passwordError\"</code>."},{"location":"liberty/core/services/authentication/#example-usage","title":"Example Usage","text":"<pre><code>import { getToken } from \"@nomana-it/liberty-core\"\n\nexport const AuthenticationExample = async () =&gt; {\n  const response = await getToken(\"admin\", \"admin\");\n\n  if (response.status === \"success\") {\n    console.log(\"Access Token:\", response.access_token);\n  } else {\n    console.error(\"Authentication Failed:\", response.message);\n  }\n};\n</code></pre>"},{"location":"liberty/core/services/authentication/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/error-boundary/","title":"ErrorBoundary Component","text":""},{"location":"liberty/core/services/error-boundary/#description","title":"Description","text":"<p>The <code>ErrorBoundary</code> component is a React class component that catches JavaScript errors anywhere in its child component tree. It prevents the entire application from crashing by displaying a fallback UI and logging the error using Sentry.</p>"},{"location":"liberty/core/services/error-boundary/#features","title":"Features:","text":"<ul> <li>Catches errors in the component tree and prevents the app from breaking.</li> <li>Uses Sentry for error reporting when Sentry is available.</li> <li>Provides a customizable fallback UI.</li> <li>Supports React class component lifecycle methods for error handling.</li> </ul>"},{"location":"liberty/core/services/error-boundary/#props","title":"Props","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - Components wrapped inside the boundary. <code>fallback</code> <code>ReactNode</code> - Optional fallback UI when an error occurs."},{"location":"liberty/core/services/error-boundary/#example-usage","title":"Example Usage","text":"<pre><code>import { ErrorBoundary } from \"@nomana-it/liberty-core\"\nimport { MyComponent } from \"./MyComponent\";\n\nexport const MyApp = () =&gt; {\n  return (\n    &lt;ErrorBoundary fallback={&lt;div&gt;Something went wrong.&lt;/div&gt;}&gt;\n      &lt;MyComponent /&gt;\n    &lt;/ErrorBoundary&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/error-boundary/#implementation","title":"Implementation","text":"<p>The <code>ErrorBoundary</code> component utilizes React lifecycle methods to catch and handle errors. <pre><code>import { Component, ErrorInfo, ReactNode } from \"react\";\nimport { Div } from \"@ly_styles/Div\";\nimport * as Sentry from \"@sentry/react\";\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component&lt;ErrorBoundaryProps, ErrorBoundaryState&gt; {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_: Error): ErrorBoundaryState {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Error caught by ErrorBoundary:\", error, errorInfo);\n    if (Sentry.getClient()) {\n      Sentry.captureException(error);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || &lt;Div&gt;An unexpected error has occurred.&lt;/Div&gt;;\n    }\n    return this.props.children;\n  }\n}\n</code></pre></p>"},{"location":"liberty/core/services/error-boundary/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/modules/","title":"Modules Configuration","text":""},{"location":"liberty/core/services/modules/#description","title":"Description","text":"<p>The <code>Modules</code> configuration determines which application features are enabled or disabled.</p>"},{"location":"liberty/core/services/modules/#data-structure","title":"Data Structure","text":"Field Name Type Description <code>MODULE_ID</code> <code>string</code> Unique module identifier. <code>MODULE_DESCRIPTION</code> <code>string</code> Description of the module. <code>MODULE_ENABLED</code> <code>boolean</code> Indicates whether the module is active. <code>MODULE_PARAMS</code> <code>JSON</code> Additional configuration for the module."},{"location":"liberty/core/services/modules/#example-usage","title":"Example Usage","text":"<pre><code>import { useAppContext } from \"@nomana-it/liberty-core\"\n\nexport const ModulesExample = () =&gt; {\n  const { modulesProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Modules Status&lt;/h2&gt;\n      &lt;ul&gt;\n        {Object.entries(modulesProperties).map(([key, module]) =&gt; (\n          &lt;li key={key}&gt;\n            &lt;strong&gt;{key}&lt;/strong&gt;: {module.enabled ? \"Enabled \u2705\" : \"Disabled \u274c\"}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/modules/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/themes/","title":"Theme Configuration","text":""},{"location":"liberty/core/services/themes/#description","title":"Description","text":"<p>The Theme Configuration in Liberty Core defines the application's primary color scheme, typography, background styles, and dark mode behavior.</p> <p>It provides a dynamic way to override and customize themes using the AppProvider.</p>"},{"location":"liberty/core/services/themes/#theme-structure","title":"Theme Structure","text":""},{"location":"liberty/core/services/themes/#theme-colors","title":"Theme Colors","text":"Key Light Mode Value Dark Mode Value Description <code>primary</code> <code>#1976d2</code> <code>#607d8b</code> Primary brand color. <code>secondary</code> <code>#ff9800</code> <code>#ffc107</code> Secondary accent color. <code>background</code> Light gradient Dark gradient Defines the UI background. <code>color</code> <code>#333333</code> <code>#E1D9D1</code> Default text color."},{"location":"liberty/core/services/themes/#theme-fields","title":"Theme Fields","text":"Field Name Type Description <code>palette.mode</code> <code>\"light\" | \"dark\"</code> Determines the color scheme. <code>palette.primary.main</code> <code>string</code> Primary color. <code>palette.secondary.main</code> <code>string</code> Secondary color. <code>background.default</code> <code>string</code> Main background color. <code>background.loginPage</code> <code>string</code> Background gradient for login page. <code>spacing</code> <code>(factor: number) =&gt; string</code> Function to set spacing. <code>shadows</code> <code>string[]</code> Shadow presets for components."},{"location":"liberty/core/services/themes/#example-usage","title":"Example Usage","text":"<pre><code>import { AppProvider, LYThemeProvider } from \"@nomana-it/liberty-core\"\nimport { theme } from \"@nomana-it/liberty-core\"\n\nexport const ThemeExample = () =&gt; {\n  return (\n    &lt;AppProvider&gt;\n      &lt;LYThemeProvider customTheme={theme}&gt;\n        &lt;MyApp /&gt;\n      &lt;/LYThemeProvider&gt;\n    &lt;/AppProvider&gt;\n  );\n};\n\nconst MyApp = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Theming with Liberty Core&lt;/h2&gt;\n      &lt;p&gt;The theme is applied dynamically using the theme provider.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/themes/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/translations/","title":"TranslationProvider Component","text":""},{"location":"liberty/core/services/translations/#description","title":"Description","text":"<p>The <code>TranslationProvider</code> is a wrapper for internationalization (i18n) using i18next in the Liberty Framework. It ensures that translations are available across the application.</p>"},{"location":"liberty/core/services/translations/#features","title":"Features","text":"<ul> <li>Uses i18next for managing translations.</li> <li>Provides language switching support.</li> <li>Works seamlessly with the AppProvider.</li> </ul>"},{"location":"liberty/core/services/translations/#props","title":"Props","text":"Prop Type Default Description <code>children</code> <code>ReactNode</code> - Components wrapped by the translation provider."},{"location":"liberty/core/services/translations/#example-usage","title":"Example Usage","text":"<p>To use the <code>TranslationProvider</code>, wrap it around your application inside ReactDOM.createRoot:</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { AppProvider, TranslationProvider } from \"@nomana-it/liberty-core\"\nimport App from \"./App\";\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  &lt;React.StrictMode&gt;\n      &lt;AppProvider useAuth={oidcUseAuth}&gt;\n        &lt;TranslationProvider&gt;\n            &lt;App /&gt;\n        &lt;/TranslationProvider&gt;\n    &lt;/AppProvider&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"liberty/core/services/translations/#notes","title":"Notes","text":"<ul> <li>The <code>TranslationProvider</code> should always wrap the application inside the <code>AppProvider</code> to ensure translations are available globally.</li> <li>It integrates with i18next, and translations can be managed dynamically. `;</li> </ul>"},{"location":"liberty/core/services/translations/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/use-media-query/","title":"useMediaQuery &amp; useDeviceDetection","text":""},{"location":"liberty/core/services/use-media-query/#description","title":"Description","text":"<p>These hooks help in detecting screen sizes and device types for responsive UI design.</p>"},{"location":"liberty/core/services/use-media-query/#usemediaqueryquery-string","title":"<code>useMediaQuery(query: string)</code>","text":"<p>This hook listens to media queries and returns <code>true</code> or <code>false</code> based on the match.</p>"},{"location":"liberty/core/services/use-media-query/#usedevicedetection","title":"<code>useDeviceDetection()</code>","text":"<p>This hook detects if the user is on a mobile or tablet device.</p>"},{"location":"liberty/core/services/use-media-query/#example-usage","title":"Example Usage","text":"<pre><code>import { useMediaQuery, useDeviceDetection } from \"@ly_common/UseMediaQuery\";\nimport { Typography } from \"@nomana-it/liberty-core\"\n\nexport const MediaQueryExample = () =&gt; {\n  const isMobile = useMediaQuery(\"(max-width: 600px)\");\n  const isTablet = useMediaQuery(\"(max-width: 960px)\");\n  const isDeviceMobile = useDeviceDetection();\n\n  return (\n    &lt;div&gt;\n      &lt;Typography variant=\"body1\"&gt;\n        {isMobile ? \"\ud83d\udcf1 Mobile View\" : \"\ud83d\udcbb Desktop View\"}\n      &lt;/Typography&gt;\n      &lt;Typography variant=\"body1\"&gt;\n        {isTablet ? \"\ud83d\udcdf Tablet View\" : \"\ud83d\udda5\ufe0f Large Screen\"}\n      &lt;/Typography&gt;\n      &lt;Typography variant=\"body1\"&gt;\n        {isDeviceMobile ? \"\ud83d\udcf1 Mobile Device Detected\" : \"\ud83d\udcbb Not a Mobile Device\"}\n      &lt;/Typography&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/use-media-query/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/core/services/users/","title":"Users Configuration","text":""},{"location":"liberty/core/services/users/#description","title":"Description","text":"<p>The <code>Users Configuration</code> defines user profiles within the Liberty Framework. Each user has settings such as their role, status, language, theme, and permissions.</p>"},{"location":"liberty/core/services/users/#data-structure","title":"Data Structure","text":"Field Name Type Description <code>USR_ID</code> <code>string</code> Unique user identifier. <code>USR_PASSWORD</code> <code>string</code> User\u2019s password (hashed or stored securely). <code>USR_NAME</code> <code>string</code> The full name of the user. <code>USR_EMAIL</code> <code>string</code> The user\u2019s email address. <code>USR_STATUS</code> <code>\"Y\" | \"N\"</code> Indicates if the user is active. <code>USR_ADMIN</code> <code>\"Y\" | \"N\"</code> Defines if the user has admin privileges. <code>USR_LANGUAGE</code> <code>string</code> Preferred language of the user. <code>USR_MODE</code> <code>\"dark\" | \"light\"</code> UI theme preference (dark/light mode). <code>USR_READONLY</code> <code>\"Y\" | \"N\"</code> Determines if the user has read-only access. <code>USR_DASHBOARD</code> <code>number | undefined</code> The dashboard assigned to the user. <code>USR_THEME</code> <code>string</code> The theme applied to the user\u2019s UI."},{"location":"liberty/core/services/users/#example-usage","title":"Example Usage","text":"<pre><code>import { useAppContext } from \"@nomana-it/liberty-core\"\n\nexport const UsersExample = () =&gt; {\n  const { userProperties } = useAppContext();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Current User&lt;/h2&gt;\n      &lt;ul&gt;\n        &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; {userProperties.name}&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; {userProperties.email}&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; {userProperties.theme}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"liberty/core/services/users/#useful-links","title":"Useful Links","text":"<p>\ud83d\udd17 GitHub Repository (Core): Liberty Core \ud83d\udd17 GitHub Repository (Test Project): Liberty Test \ud83d\udcd6 Live Documentation: Liberty Core Docs \ud83d\udc96 Sponsor &amp; Support: Sponsor Liberty Core </p>"},{"location":"liberty/nomasx1/admin/global-settings/","title":"Global Settings","text":""},{"location":"liberty/nomasx1/admin/global-settings/#global-settings","title":"Global Settings","text":""},{"location":"liberty/nomasx1/admin/global-settings/#1-applications","title":"1. Applications","text":"<ul> <li>Native connector for JD Edwards (Oracle, DB2 or MS-SQL)</li> <li>Native connector for Oracle Database</li> <li>Native connector for Microsoft Active Directory</li> <li>All databases accessibles with jdbc can be set</li> </ul> <p>Click on add or edit to set a new datasource or modify an existing datasource and follow the wizard</p>"},{"location":"liberty/nomasx1/admin/global-settings/#11-global-settings","title":"1.1. Global Settings","text":"Parameter Description Comments Application ID Unique ID Automatic increment number used in all table joins Application Name Name of your application Application Type Native or custom connector JD Edwards, Database, LDAP, Weblogic, Custom Application Database Type of database Oracle, MySQL, IBM DB2, Microsoft SQL Server, LDAP"},{"location":"liberty/nomasx1/admin/global-settings/#12-connections","title":"1.2. Connections","text":"<p>Some parameters could be hidden depending on the type of the application</p> Parameter Description Comments Host Database server Port Database port Database Service Name Service Name and not SID for Oracle later than 12.2 User Login to database login could have read-only rights but with access to dictionary or catalog Password Password for the user"},{"location":"liberty/nomasx1/admin/global-settings/#13-options","title":"1.3. Options","text":"<p>Parameters differs depending on the type of the application</p>"},{"location":"liberty/nomasx1/admin/global-settings/#131-jd-edwards","title":"1.3.1. JD Edwards","text":"Parameter Description Comments JDE DTA Business Data PRODDTA JDE CTL Control Tables PRODCTL JDE CO Central Objects PD920 JDE SY System Tables SY920 JDE SVM Server Map SVM920 JDE OL Object Librarian OL920 F00950 Security table location (sometimes not in SYSTEM) SY920 Standard Menu (Y/N) Collect Tasks Menus E1 Pages (Y/N) Collect E1 Pages Before Tools Release 9.2 and E1 composite E1 Composite (Y/N) Collect E1 Composite Pages After Tools Release 9.2"},{"location":"liberty/nomasx1/admin/global-settings/#132-database-custom-application","title":"1.3.2. Database / Custom Application","text":"<p>NONE</p>"},{"location":"liberty/nomasx1/admin/global-settings/#133-ldap","title":"1.3.3. LDAP","text":"Parameter Description Comments LDAP Context Search OU=Utilisateurs,DC=nomana-it,DC=fr LDAP Filter Filtering type of object (&amp;(objectClass=user)) LDAP Exclude Exclude node OU=Applications,OU=Utilisateurs,DC=nomana-it,DC=fr"},{"location":"liberty/nomasx1/admin/global-settings/#2-users","title":"2. Users","text":""},{"location":"liberty/nomasx1/admin/global-settings/#3-query","title":"3. Query","text":""},{"location":"liberty/nomasx1/admin/global-settings/#4-dwh","title":"4. DWH","text":""},{"location":"liberty/technical/architecture/","title":"Architecture","text":"<p>This document provides an overview of the functionality and configuration of the services within the Liberty Framework, including Node.js, PostgreSQL, pgAdmin, Airflow, OIDC, and Gitea. These services are integrated with Traefik as a reverse proxy, enabling both HTTP and HTTPS access with automated routing. </p>"},{"location":"liberty/technical/architecture/#1-nodejs-service-liberty-node","title":"1. Node.js Service (<code>liberty-node</code>) \ud83d\udfe2","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-node:latest</code></li> <li>Command: Runs the Node.js app (<code>app.js</code>) on port <code>3002</code>.</li> <li>Security Options: </li> <li>\ud83d\udd12 <code>label:disable</code>: Disables SELinux labels.</li> <li>\u2699\ufe0f <code>cap_drop</code>: Removes unnecessary Linux capabilities like <code>MKNOD</code> and <code>AUDIT_WRITE</code>.</li> <li>Networks: Connected to the <code>liberty-network</code>.</li> <li>Working Directory: <code>/opt/liberty</code></li> <li>Depends on: PostgreSQL (<code>pg</code>) service.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 API Routing: HTTP and HTTPS routing for <code>/api</code> using <code>PathPrefix</code>.</li> <li>\ud83d\udce1 Socket Routing: HTTP and HTTPS routing for <code>/socket</code> and <code>/socket.io</code>.</li> <li>\u269b\ufe0f React Application: Handles HTTP and HTTPS routing for the React app with a middleware for error pages.</li> <li>\ud83d\ude80 Compression: <code>compress-middleware</code> applied to several routes for better performance.</li> <li>\ud83d\udd0c Port Configuration: Node.js runs on port <code>3002</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#2-postgresql-service-liberty-pg","title":"2. PostgreSQL Service (<code>liberty-pg</code>) \ud83d\udc18","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-pg:latest</code></li> <li>Command: Runs the PostgreSQL server with optimized settings for performance:</li> <li><code>shared_buffers=2GB</code></li> <li><code>track_activity_query_size=1MB</code></li> <li><code>work_mem=256MB</code></li> <li><code>maintenance_work_mem=128MB</code></li> <li>Other configurations to optimize WAL size, checkpoint timing, and costs.</li> <li>Volumes: Data stored in the <code>pg-data</code> volume.</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83d\udee0\ufe0f TCP Router: Routes PostgreSQL traffic via <code>db</code> entry point.</li> <li>\ud83d\udd0c Port: Exposed on port <code>5432</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#3-pgadmin-service-liberty-pgadmin","title":"3. pgAdmin Service (<code>liberty-pgadmin</code>) \ud83d\udda5\ufe0f","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-pgadmin:latest</code></li> <li>User: Root privileges enabled.</li> <li>Volumes: pgAdmin data stored in the <code>pgadmin-data</code> volume.</li> <li>Environment: Sets the <code>SCRIPT_NAME=/pgadmin</code> for pgAdmin web access.</li> <li>Depends on: PostgreSQL (<code>pg</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 HTTP Router: Routes requests for <code>/pgadmin</code>.</li> <li>\ud83d\udd0c Port: Exposed on port <code>3003</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#4-airflow-service-liberty-airflow","title":"4. Airflow Service (<code>liberty-airflow</code>) \ud83d\udee0\ufe0f","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-airflow:latest</code></li> <li>Security Options:</li> <li>\ud83d\udd12 Disables SELinux labels.</li> <li>\u2699\ufe0f Drops capabilities <code>MKNOD</code> and <code>AUDIT_WRITE</code>.</li> <li>Volumes: </li> <li>Logs stored in the <code>airflow-logs</code> volume.</li> <li>Depends on: PostgreSQL (<code>pg</code>), Gitea (<code>gitea</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 Routing: Handles HTTP and HTTPS requests for <code>/airflow/home</code>.</li> <li>\u26a0\ufe0f Error Pages Middleware: Applied to both HTTP and HTTPS routes.</li> <li>\ud83d\udd0c Port: Exposed on port <code>8080</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#5-oidc-service-liberty-keycloak","title":"5. OIDC Service (<code>liberty-keycloak</code>) \ud83d\udd10","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-keycloak:latest</code></li> <li>Command: Starts the Keycloak OIDC server with proxy headers and hostname settings.</li> <li>Environment Variables:</li> <li>\ud83d\udd04 <code>PROXY_ADDRESS_FORWARDING</code>: Enables proxy address forwarding.</li> <li>\ud83c\udf0d <code>KC_HOSTNAME_PATH</code> and <code>KC_HTTP_RELATIVE_PATH</code>: Configured to <code>/oidc</code>.</li> <li>Depends on: PostgreSQL (<code>pg</code>).</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 HTTP and HTTPS Routing: Routes <code>/oidc</code> requests.</li> <li>\ud83d\udd0c Port: OIDC runs on port <code>9000</code> (Keycloak internally uses port <code>8080</code>).</li> <li>\ud83c\udf0d CORS Middleware: Configures Cross-Origin Resource Sharing (CORS) for all origins and credentials.</li> </ul>"},{"location":"liberty/technical/architecture/#6-gitea-service-liberty-gitea","title":"6. Gitea Service (<code>liberty-gitea</code>) \ud83d\udcc2","text":"<ul> <li>Image: <code>ghcr.io/fblettner/liberty-gitea:latest</code></li> <li>Healthcheck: Ensures service health by checking <code>/</code> endpoint every 30 seconds.</li> <li>Volumes: </li> <li>Configuration and data in <code>liberty-gitea</code>.</li> <li>Restart Policy: Set to <code>unless-stopped</code>.</li> <li>Networks: Connected to <code>liberty-network</code>.</li> <li>Traefik Configuration:</li> <li>\ud83c\udf10 Routing: Routes HTTP requests to <code>/gitea</code>.</li> <li>\ud83d\udee0\ufe0f Middleware: Uses <code>stripprefix</code> to remove <code>/gitea</code> from the path for internal routing.</li> <li>\ud83d\udd0c Port: Exposed on port <code>3000</code>.</li> </ul>"},{"location":"liberty/technical/architecture/#volumes","title":"Volumes \ud83d\uddc3\ufe0f","text":"<ul> <li>node-logs: Stores Logs for backend and frontend.</li> <li>pg-data: Stores PostgreSQL data.</li> <li>pg-logs: Stores Logs for database.</li> <li>pgadmin-data: Stores pgAdmin data.</li> <li>liberty-gitea: Stores gitea config and data.</li> <li>airflow-logs: Stores logs for Airflow.</li> <li>airflow-dags: Stores Dags for Airflow.</li> <li>airflow-plugins: Stores Plugins for Airflow.</li> <li>traefik-certs: Stores Traefik certificates (external).</li> <li>traefik-config: Stores Traefik configuration (external).</li> <li>shared-data: Stores shared data (external).</li> </ul>"},{"location":"liberty/technical/architecture/#networks","title":"Networks \ud83c\udf10","text":"<ul> <li>liberty-network: External network for inter-service communication.</li> </ul> <p>This configuration enables a scalable, containerized microservice architecture with Node.js for application logic, PostgreSQL for database management, pgAdmin for database administration, Airflow for automation, Keycloak OIDC for authentication, and Gitea for file management and versioning. Traefik serves as the reverse proxy, handling routing and applying security middleware for all services.</p>"},{"location":"liberty/technical/installation/","title":"Docker Installation Guide","text":"<p>This guide covers the installation of Docker and Docker Compose on CentOS and Amazon Linux. Follow the respective instructions based on your environment.</p>"},{"location":"liberty/technical/installation/#docker-installation-for-centos","title":"Docker Installation for CentOS","text":""},{"location":"liberty/technical/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>CentOS 8 or higher</li> <li>Root or sudo access</li> <li>Minimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.</li> </ul>"},{"location":"liberty/technical/installation/#step-1-update-system-packages","title":"Step 1: Update System Packages","text":"<p>Before starting the installation, update your system to ensure all packages are up-to-date.</p> <pre><code>sudo yum update -y\n</code></pre> <p>if Podman is installed, remove all packages, artifacts and containers storage</p> <pre><code>yum remove buildah skopeo podman containers-common atomic-registries docker container-tools\nrm -rf /etc/containers/* /var/lib/containers/* /etc/docker /etc/subuid* /etc/subgid*\ncd ~ &amp;&amp; rm -rf /.local/share/containers/\n</code></pre>"},{"location":"liberty/technical/installation/#step-2-install-required-dependencies","title":"Step 2: Install Required Dependencies","text":"<p>Install the necessary packages required to set up the Docker repository.</p> <pre><code>sudo yum install -y yum-utils \n</code></pre>"},{"location":"liberty/technical/installation/#step-3-set-up-the-docker-repository","title":"Step 3: Set Up the Docker Repository","text":"<p>Add the Docker repository to your CentOS system.</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>"},{"location":"liberty/technical/installation/#step-4-install-docker","title":"Step 4: Install Docker","text":"<p>Install Docker Engine, CLI, and Containerd.</p> <pre><code>sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"liberty/technical/installation/#step-5-start-and-enable-docker","title":"Step 5: Start and Enable Docker","text":"<p>Start the Docker service and enable it to start on boot.</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"liberty/technical/installation/#step-6-verify-docker-installation","title":"Step 6: Verify Docker Installation","text":"<p>Verify the installation by running a test Docker container.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>If the container runs and displays a welcome message, Docker is installed correctly.</p>"},{"location":"liberty/technical/installation/#step-7-adding-your-user-to-the-docker-group-optional","title":"Step 7: Adding Your User to the Docker Group (Optional)","text":"<p>To run Docker commands without <code>sudo</code>, add your user to the Docker group.</p> <pre><code>sudo usermod -aG docker $(whoami)\n</code></pre> <p>Log out and log back in to apply the group changes.</p>"},{"location":"liberty/technical/installation/#uninstall-docker","title":"Uninstall Docker","text":"<p>To remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:</p> <pre><code>sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre>"},{"location":"liberty/technical/installation/#docker-installation-for-amazon-linux-os","title":"Docker Installation for Amazon Linux OS","text":""},{"location":"liberty/technical/installation/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Amazon Linux or Amazon Linux 2</li> <li>Root or sudo access</li> <li>Minimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.</li> </ul>"},{"location":"liberty/technical/installation/#step-1-update-system-packages_1","title":"Step 1: Update System Packages","text":"<p>Before starting the installation, update your system to ensure all packages are up-to-date.</p> <pre><code>sudo yum update -y\n</code></pre>"},{"location":"liberty/technical/installation/#step-2-install-docker","title":"Step 2: Install Docker","text":"<p>Install Docker using the Amazon Linux Extras &amp; yum package manager.</p> <pre><code>sudo amazon-linux-extras install docker -y\n</code></pre>"},{"location":"liberty/technical/installation/#step-3-start-and-enable-docker","title":"Step 3: Start and Enable Docker","text":"<p>Start the Docker service and enable it to start on boot.</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"liberty/technical/installation/#step-4-verify-docker-installation","title":"Step 4: Verify Docker Installation","text":"<p>Verify the installation by running a test Docker container.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>If the container runs and displays a welcome message, Docker is installed correctly.</p>"},{"location":"liberty/technical/installation/#step-5-install-docker-compose","title":"Step 5: Install Docker Compose","text":"<p>Download the current stable release of Docker Compose:</p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '\"tag_name\": \"\\K.*?(?=\")')/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n</code></pre> <p>Apply executable permissions to the binary:</p> <pre><code>sudo chmod +x /usr/local/bin/docker-compose\n</code></pre> <p>Verify that the installation was successful:</p> <pre><code>docker-compose --version\n</code></pre>"},{"location":"liberty/technical/installation/#step-6-adding-your-user-to-the-docker-group-optional","title":"Step 6: Adding Your User to the Docker Group (Optional)","text":"<p>To run Docker commands without <code>sudo</code>, add your user to the Docker group.</p> <pre><code>sudo usermod -aG docker $(whoami)\n</code></pre> <p>Log out and log back in to apply the group changes.</p>"},{"location":"liberty/technical/installation/#uninstall-docker_1","title":"Uninstall Docker","text":"<p>To remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:</p> <pre><code>sudo yum remove docker\nsudo rm -rf /var/lib/docker\nsudo rm /usr/local/bin/docker-compose\n</code></pre>"},{"location":"liberty/technical/installation/#post-installation-tasks","title":"Post installation Tasks","text":"<p>If you want to set a custom directory for docker and if you are running behind a proxy, the docker service must be modified</p> <p>Edit the service: /lib/systemd/system/docker.service</p> <pre><code>[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd --data-root &lt;CUSTOM_DIRECTORY&gt; -H fd:// --containerd=/run/containerd/containerd.sock\nExecReload=/bin/kill -s HUP $MAINPID\nTimeoutStartSec=0\nRestartSec=2\nRestart=always\nEnvironment=\"HTTP_PROXY=&lt;PROXY_URL&gt;\"\nEnvironment=\"HTTPS_PROXY=&lt;PROXY_URL&gt;\"\n</code></pre> <p>If you want to change the default IP range (172.17.x.x) for docker Edit the file: /etc/docker/daemon.json</p> <pre><code># Set the ip range according to your requirements\n# bip is for the internal interface\n# default-address-pools is for all new networks\n{\n  \"bip\": \"172.26.0.1/16\",\n  \"default-address-pools\": [\n    { \"base\": \"172.27.0.0/16\", \"size\": 24 }\n  ]\n}\n</code></pre>"},{"location":"liberty/technical/installation/#conclusion","title":"Conclusion","text":"<p>You have successfully installed Docker and Docker Compose on your CentOS or Amazon Linux OS system. You can now begin deploying and managing your Docker containers for Liberty Framework.</p>"},{"location":"liberty/technical/installation/#references","title":"References","text":"<ul> <li>Docker Documentation</li> <li>AWS Documentation</li> </ul>"},{"location":"liberty/technical/liberty-deployment/","title":"Deploying Liberty Framework with Portainer","text":"<p>This guide will walk you through deploying Liberty Framework using Portainer, based on the Compose file located at the following URL: liberty-framework.yml.</p>"},{"location":"liberty/technical/liberty-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure the following prerequisites are met:</p> <ul> <li>You have Docker installed and running on your server. Installation instructions can be found here.</li> <li>You have Portainer installed and running on your server. Installation instructions can be found here.</li> <li>You have access to the Portainer web interface. The URL typically looks like <code>http://your-server-ip:3000</code> or <code>https://your-server-ip:3443</code>.</li> </ul>"},{"location":"liberty/technical/liberty-deployment/#accessing-portainer","title":"Accessing Portainer","text":"<ol> <li> <p>Open a web browser and navigate to the Portainer web interface.</p> </li> <li> <p>Log in with your Portainer credentials.</p> </li> <li> <p>Set a password first time you log into Portainer</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#logging-into-a-custom-registry","title":"Logging into a Custom Registry","text":"<ol> <li> <p>In the Portainer web interface, navigate to <code>Registries</code> from the sidebar.</p> </li> <li> <p>Click on the <code>+ Add registry</code> button.</p> </li> <li> <p>Provide the following details for your custom registry:</p> <ul> <li>Name: A friendly name for your registry.</li> <li>URL: The URL of your custom registry (e.g., <code>ghcr.io/fblettner</code>).</li> <li>Username: Your registry username (this user will be provided by Nomana-IT).</li> <li>Password: Your registry password (this token will be provided by Nomana-IT).</li> </ul> </li> <li> <p>After filling in the details, click on the <code>Add Registry</code> button to save the registry.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#deploy-the-stack","title":"Deploy the Stack","text":"<ol> <li> <p>In the Portainer web interface, navigate to <code>Stacks</code> from the sidebar.</p> </li> <li> <p>Click on the <code>+ Add Stack</code> button.</p> </li> <li> <p>Provide a name for your stack in the <code>Name</code> field.</p> </li> <li> <p>Under the <code>Git repository</code> tab:</p> <ul> <li> <p>Enter the Repository URL:    <pre><code>https://github.com/fblettner/liberty-public\n</code></pre></p> </li> <li> <p>In the Compose path field, specify:   <pre><code>release/latest/liberty-framework.yml\n</code></pre></p> </li> </ul> </li> <li> <p>Scroll down and click on the <code>Deploy the stack</code> button.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#verify-deployment","title":"Verify Deployment","text":"<ol> <li> <p>Once the stack is deployed, navigate to <code>Containers</code> from the sidebar.</p> </li> <li> <p>Verify that the containers listed in the Compose file are running.</p> </li> <li> <p>Access the services through the designated ports to ensure everything is functioning as expected.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#alternative-pull-docker-images-from-terminal","title":"Alternative: Pull Docker Images from Terminal","text":"<p>If you prefer to pull Docker images directly from the terminal, you can do so using the following commands:</p> <ol> <li> <p>Open a terminal and log in to the custom registry:</p> <pre><code>docker login ghcr.io\n</code></pre> <p>When prompted, enter your username and password (token).</p> </li> <li> <p>Pull the required Docker images manually:</p> <pre><code>docker pull ghcr.io/fblettner/liberty-node:latest\ndocker pull ghcr.io/fblettner/liberty-pg:latest\ndocker pull ghcr.io/fblettner/liberty-pgadmin:latest\ndocker pull ghcr.io/fblettner/liberty-rundeck:latest\ndocker pull ghcr.io/fblettner/liberty-keycloak:latest\ndocker pull ghcr.io/fblettner/liberty-filebrowser:latest\n</code></pre> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#steps-for-aws-users","title":"Steps for AWS Users","text":"<p>If you are using AWS and need to connect via AWS CLI, follow these steps:</p> <ol> <li> <p>Configure your AWS CLI:</p> <pre><code>aws configure\n</code></pre> <p>Follow the prompts to enter your AWS Access Key, Secret Access Key, default region name, and output format.</p> </li> <li> <p>Log in to the AWS Elastic Container Registry (ECR):</p> <pre><code>aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin &lt;your-aws-account-id&gt;.dkr.ecr.eu-west-1.amazonaws.com\n</code></pre> <p>Replace <code>&lt;your-aws-account-id&gt;</code> with your actual AWS account ID.</p> </li> </ol>"},{"location":"liberty/technical/liberty-deployment/#additional-resources","title":"Additional Resources","text":"<ul> <li>Portainer Documentation</li> <li>Docker Compose Documentation</li> <li>GitHub Repository - liberty-framework.yml</li> </ul> <p>By following this guide, you should be able to deploy Liberty Framework using Portainer seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.</p>"},{"location":"liberty/technical/liberty-deployment/#summary","title":"Summary","text":"<p>URLs: - Web Application: <code>/</code> - API: <code>/api</code> - PgAdmin: <code>/pgadmin</code> - Rundeck: <code>/rundeck</code> - OIDC: <code>/oidc</code> - Filebrowser: <code>/filebrowser</code></p> <p>Services: - node: ghcr.io/fblettner/liberty-node:latest (Port 3002) - pg: ghcr.io/fblettner/liberty-pg:latest (Port 5432) - pgadmin: ghcr.io/fblettner/liberty-pgadmin:latest (Port 3003) - rundeck: ghcr.io/fblettner/liberty-rundeck:latest (Port 4440) - oidc: ghcr.io/fblettner/liberty-keycloak:latest (Port 8080) - filebrowser: ghcr.io/fblettner/liberty-filebrowser:latest (Port 80)</p> <p>Details of all Liberty Framework Services can be found here.</p>"},{"location":"liberty/technical/linux-services/","title":"Creating Systemd Services for Docker Compose","text":"<p>This guide will walk you through creating systemd services to manage your Docker Compose deployments. This ensures that your services start automatically on boot and can be managed easily using standard systemd commands.</p>"},{"location":"liberty/technical/linux-services/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure the following prerequisites are met:</p> <ul> <li>You have Docker and Docker Compose installed on your server.</li> <li>You have completed the deployment steps for Liberty Framework using Docker Compose.</li> </ul>"},{"location":"liberty/technical/linux-services/#creating-the-systemd-service-for-admin-tools","title":"Creating the Systemd Service for Admin Tools","text":"<ol> <li> <p>Create a service file for <code>docker-admin</code>:</p> <pre><code>sudo nano /etc/systemd/system/docker-admin.service\n</code></pre> </li> <li> <p>Paste the following content into the file:</p> <pre><code>[Unit]\nDescription=Liberty Admin Tools Service\nPartOf=docker.service\nAfter=docker.service\n\n[Service]\nType=simple\nRemainAfterExit=true\nWorkingDirectory=/app/liberty-admin/\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml start\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml stop\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"liberty/technical/linux-services/#creating-the-systemd-service-for-liberty-framework","title":"Creating the Systemd Service for Liberty Framework","text":"<ol> <li>Open a terminal.</li> <li> <p>Create a new directory:     <pre><code>mkdir -p /app/liberty-framework\ncd /app/liberty-framework\n</code></pre></p> </li> <li> <p>Download the Docker Compose file from the provided URL, Using <code>curl</code>:     <pre><code>curl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-framework.yml\n</code></pre></p> </li> <li> <p>Create a service file for <code>docker-liberty</code>:</p> <pre><code>sudo nano /etc/systemd/system/docker-liberty.service\n</code></pre> </li> <li> <p>Paste the following content into the file:</p> <pre><code>[Unit]\nDescription=Liberty Framework Service\nPartOf=docker.service\nAfter=docker.service\n\n[Service]\nType=simple\nRemainAfterExit=true\nWorkingDirectory=/app/liberty/\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-framework/docker-compose.yml start\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-framework/liberty-compose.yaml stop\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"liberty/technical/linux-services/#enabling-and-starting-the-services","title":"Enabling and Starting the Services","text":"<ol> <li> <p>Enable the created services to start on boot:</p> <pre><code>sudo systemctl enable docker-liberty.service\nsudo systemctl enable docker-admin.service\n</code></pre> </li> <li> <p>Start the services immediately:</p> <pre><code>sudo systemctl start docker-liberty.service\nsudo systemctl start docker-admin.service\n</code></pre> </li> <li> <p>Check the status of the services to ensure they are running:</p> <pre><code>sudo systemctl status docker-liberty.service\nsudo systemctl status docker-admin.service\n</code></pre> </li> </ol>"},{"location":"liberty/technical/linux-services/#additional-resources","title":"Additional Resources","text":"<ul> <li>Systemd Documentation</li> <li>Docker Documentation</li> <li>Docker Compose Documentation</li> </ul> <p>By following this guide, you should be able to create and manage systemd services for your Docker Compose deployments seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.</p>"},{"location":"liberty/technical/post-ssl/","title":"Enable SSL with Traefik","text":"<p>By default, SSL is enabled with a self signed certificate. You have to copy your own certificates according to your domain</p>"},{"location":"liberty/technical/post-ssl/#prerequisites","title":"Prerequisites:","text":"<ul> <li><code>mkcert</code> installed to create a new self-signed certificate.</li> <li>Certificates for your domain</li> </ul>"},{"location":"liberty/technical/post-ssl/#step-1-copy-your-certificates-files","title":"Step 1: Copy your certificates files","text":"<ol> <li> <p>Copy your certificates files to the server hosting Liberty Framework</p> </li> <li> <p>Transfer you certificate to the Docker container <pre><code>docker cp &lt;your_certificate_directory&gt;/cert.pem traefik:/etc/certs/cert.pem\ndocker cp &lt;your_certificate_directory&gt;/key.pem traefik:/etc/certs/key.pem\n</code></pre></p> </li> </ol> <p>Final Administrator Note: Certificates must be transferred to the Docker container with each renewal</p>"},{"location":"liberty/technical/post-ssl/#step2-create-a-self-signed-certificate-optional","title":"Step2: Create a self-signed certificate (optional)","text":"<ol> <li> <p>Connect to the server hosting Liberty Framework</p> </li> <li> <p>Create a new self signed certificate <pre><code>mkcert -key-file ./certs/key.pem -cert-file ./certs/cert.pem '&lt;server_name&gt;'\n</code></pre></p> </li> <li> <p>Transfer you certificate to the Docker container <pre><code>docker cp ./certs/cert.pem traefik:/etc/certs/cert.pem\ndocker cp ./certs/key.pem traefik:/etc/certs/key.pem\n</code></pre></p> </li> </ol> <p>Final Administrator Note: After updating both files, it is required to restart the Traefik service to apply the new settings.</p>"},{"location":"liberty/technical/tools-deployment/","title":"Deploying Installation Tools with Docker Compose","text":""},{"location":"liberty/technical/tools-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, ensure you have the following installed on your system:</p> <ol> <li>Docker and Docker Compose: Installation instructions can be found here.</li> <li>Git: Installation instructions can be found here.</li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-1-logging-into-docker","title":"Step 1: Logging into Docker","text":"<p>To access a private Docker registry, you'll need to authenticate with your Docker credentials.</p> <ol> <li>Log in to Docker:     <pre><code>docker login\n</code></pre>     Follow the prompts to enter your Docker username and password.</li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-2-create-a-directory-for-deployment","title":"Step 2: Create a Directory for Deployment","text":"<p>Create a directory where you will download and store the Docker Compose file.</p> <ol> <li>Open a terminal.</li> <li>Create a new directory:     <pre><code>mkdir -p /app/liberty-admin\ncd /app/liberty-admin\n</code></pre></li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-3-download-the-docker-compose-file","title":"Step 3: Download the Docker Compose File","text":"<p>Next, download the Docker Compose file from the provided URL.</p> <ol> <li> <p>Using <code>curl</code>:     <pre><code>curl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n</code></pre></p> </li> <li> <p>Alternatively, using <code>wget</code>:     <pre><code>wget -O docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n</code></pre></p> </li> </ol>"},{"location":"liberty/technical/tools-deployment/#step-4-deploy-the-docker-container-using-docker-compose","title":"Step 4: Deploy the Docker Container using Docker Compose","text":"<p>Once you have the <code>docker-compose.yml</code> file downloaded into your <code>liberty-admin</code> directory, use Docker Compose to deploy the container.</p> <ol> <li> <p>In the terminal, navigate to the <code>liberty-admin</code> directory (if not already there):     <pre><code>cd /app/liberty-admin\n</code></pre></p> </li> <li> <p>Deploy the Docker container:     <pre><code>docker-compose up -d\n</code></pre></p> </li> </ol> <p>This command will pull the necessary images from the registry (if they are not already available locally) and start the containers in detached mode.</p>"},{"location":"liberty/technical/tools-deployment/#step-5-verify-the-deployment","title":"Step 5: Verify the Deployment","text":"<p>To ensure the deployment is successful, you can check the status of the containers.</p> <ol> <li>List the running containers:     <pre><code>docker ps\n</code></pre></li> </ol> <p>You should see the following containers running as defined in the <code>docker-compose.yml</code> file:</p> <ul> <li>traefik: This service is managing routing and load balancing, and exposes several endpoints for web (port 3000), websecure (port 3443), dashboard (port 8080), and database (port 5432).</li> <li>portainer: This service provides a UI for managing Docker environments, accessible via paths prefixed with <code>/portainer</code>.</li> <li>error-pages: This service handles error pages and is available to respond to general HTTP requests.</li> </ul>"},{"location":"liberty/technical/tools-deployment/#summary-of-commands","title":"Summary of Commands","text":"<pre><code># Log in to Docker\ndocker login\n\n# Create and navigate to the admin directory\nmkdir -p /app/liberty-admin\ncd /app/liberty-admin\n\n# Download the Docker Compose file\ncurl -L -o docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n# or using wget\nwget -O docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n\n# Deploy the Docker container\ndocker-compose up -d\n</code></pre>"},{"location":"liberty/technical/tools-deployment/#accessing-services","title":"Accessing Services","text":"<p>After deployment, you can access the services with the following URLs:</p> <ul> <li>Traefik Dashboard: Accessible at http://<code>&lt;your_server_ip&gt;</code>:8080/dashboard/ (authentication may be required).</li> <li>Portainer: Accessible at http://<code>&lt;your_server_ip&gt;</code>:3000/portainer or https://<code>&lt;your_server_ip&gt;</code>:3443/portainer.</li> </ul> <p>Replace <code>&lt;your_server_ip&gt;</code> with the IP address or hostname of your server. Feel free to reach out if you have any further questions or run into any issues!</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/jd-edwards/","title":"JD Edwards","text":""},{"location":"blog/category/mkdocs-materials/","title":"MkDocs Materials","text":""},{"location":"blog/category/oracle/","title":"Oracle","text":""}]}